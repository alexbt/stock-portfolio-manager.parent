<?xml version="1.0" encoding="UTF-8"?>
<yguard version="1.5">
<!--
  yGuard Bytecode Obfuscator, v2.3.0.1, a Product of yWorks GmbH - http://www.yworks.com

  Logfile created on Mon Mar 29 18:27:24 EDT 2010

  Jar file to be obfuscated:           yguard_temp_4909683806929566295.jar
  Target Jar file for obfuscated code: joda-time-1.6.jar.tmp

-->
<!--
  Memory in use after class data structure built: 5210056 bytes
  Total memory available                        : 21569536 bytes
-->
<expose>
</expose>
<map>
  <package name="org" map="A"/>
  <package name="org.joda" map="A"/>
  <package name="org.joda.time" map="A"/>
  <package name="org.joda.time.chrono" map="A"/>
  <class name="org.joda.time.chrono.GJYearOfEraDateTimeField" map="A"/>
  <field class="org.joda.time.chrono.GJYearOfEraDateTimeField" name="iChronology" map="&#x00dd;"/>
  <field class="org.joda.time.chrono.GJYearOfEraDateTimeField" name="serialVersionUID" map="&#x00de;"/>
  <method class="org.joda.time.chrono.GJYearOfEraDateTimeField" name="long roundCeiling(long)" map="H"/>
  <method class="org.joda.time.chrono.GJYearOfEraDateTimeField" name="long add(long, int)" map="B"/>
  <method class="org.joda.time.chrono.GJYearOfEraDateTimeField" name="int[] addWrapField(org.joda.time.ReadablePartial, int, int[], int)" map="C"/>
  <method class="org.joda.time.chrono.GJYearOfEraDateTimeField" name="long set(long, int)" map="C"/>
  <method class="org.joda.time.chrono.GJYearOfEraDateTimeField" name="long add(long, long)" map="A"/>
  <method class="org.joda.time.chrono.GJYearOfEraDateTimeField" name="long remainder(long)" map="D"/>
  <method class="org.joda.time.chrono.GJYearOfEraDateTimeField" name="long roundFloor(long)" map="A"/>
  <method class="org.joda.time.chrono.GJYearOfEraDateTimeField" name="int getMaximumValue()" map="F"/>
  <method class="org.joda.time.chrono.GJYearOfEraDateTimeField" name="long getDifferenceAsLong(long, long)" map="C"/>
  <method class="org.joda.time.chrono.GJYearOfEraDateTimeField" name="int getDifference(long, long)" map="B"/>
  <method class="org.joda.time.chrono.GJYearOfEraDateTimeField" name="int getMinimumValue()" map="D"/>
  <method class="org.joda.time.chrono.GJYearOfEraDateTimeField" name="int get(long)" map="E"/>
  <method class="org.joda.time.chrono.GJYearOfEraDateTimeField" name="long addWrapField(long, int)" map="A"/>
  <method class="org.joda.time.chrono.GJYearOfEraDateTimeField" name="java.lang.Object readResolve()" map="d"/>
  <class name="org.joda.time.chrono.GJChronology$LinkedDurationField" map="_A"/>
  <field class="org.joda.time.chrono.GJChronology$LinkedDurationField" name="iField" map="W"/>
  <field class="org.joda.time.chrono.GJChronology$LinkedDurationField" name="serialVersionUID" map="X"/>
  <method class="org.joda.time.chrono.GJChronology$LinkedDurationField" name="long getDifferenceAsLong(long, long)" map="B"/>
  <method class="org.joda.time.chrono.GJChronology$LinkedDurationField" name="long add(long, int)" map="A"/>
  <method class="org.joda.time.chrono.GJChronology$LinkedDurationField" name="int getDifference(long, long)" map="D"/>
  <method class="org.joda.time.chrono.GJChronology$LinkedDurationField" name="long add(long, long)" map="E"/>
  <class name="org.joda.time.chrono.GJChronology$ImpreciseCutoverField" map="_B"/>
  <field class="org.joda.time.chrono.GJChronology$ImpreciseCutoverField" name="this$0" map="this$0"/>
  <field class="org.joda.time.chrono.GJChronology$ImpreciseCutoverField" name="serialVersionUID" map="_"/>
  <method class="org.joda.time.chrono.GJChronology$ImpreciseCutoverField" name="long getDifferenceAsLong(long, long)" map="C"/>
  <method class="org.joda.time.chrono.GJChronology$ImpreciseCutoverField" name="long add(long, int)" map="B"/>
  <method class="org.joda.time.chrono.GJChronology$ImpreciseCutoverField" name="int getDifference(long, long)" map="B"/>
  <method class="org.joda.time.chrono.GJChronology$ImpreciseCutoverField" name="int getMinimumValue(long)" map="G"/>
  <method class="org.joda.time.chrono.GJChronology$ImpreciseCutoverField" name="int getMaximumValue(long)" map="M"/>
  <method class="org.joda.time.chrono.GJChronology$ImpreciseCutoverField" name="long add(long, long)" map="A"/>
  <class name="org.joda.time.chrono.GJChronology$CutoverField" map="_C"/>
  <field class="org.joda.time.chrono.GJChronology$CutoverField" name="this$0" map="this$0"/>
  <field class="org.joda.time.chrono.GJChronology$CutoverField" name="iRangeDurationField" map="T"/>
  <field class="org.joda.time.chrono.GJChronology$CutoverField" name="iCutover" map="U"/>
  <field class="org.joda.time.chrono.GJChronology$CutoverField" name="iGregorianField" map="V"/>
  <field class="org.joda.time.chrono.GJChronology$CutoverField" name="iConvertByWeekyear" map="W"/>
  <field class="org.joda.time.chrono.GJChronology$CutoverField" name="iJulianField" map="X"/>
  <field class="org.joda.time.chrono.GJChronology$CutoverField" name="iDurationField" map="Y"/>
  <field class="org.joda.time.chrono.GJChronology$CutoverField" name="serialVersionUID" map="Z"/>
  <method class="org.joda.time.chrono.GJChronology$CutoverField" name="int getMinimumValue(org.joda.time.ReadablePartial)" map="A"/>
  <method class="org.joda.time.chrono.GJChronology$CutoverField" name="org.joda.time.DurationField getLeapDurationField()" map="B"/>
  <method class="org.joda.time.chrono.GJChronology$CutoverField" name="java.lang.String getAsShortText(int, java.util.Locale)" map="B"/>
  <method class="org.joda.time.chrono.GJChronology$CutoverField" name="long roundFloor(long)" map="A"/>
  <method class="org.joda.time.chrono.GJChronology$CutoverField" name="long add(long, int)" map="B"/>
  <method class="org.joda.time.chrono.GJChronology$CutoverField" name="long gregorianToJulian(long)" map="N"/>
  <method class="org.joda.time.chrono.GJChronology$CutoverField" name="int getMinimumValue(org.joda.time.ReadablePartial, int[])" map="B"/>
  <method class="org.joda.time.chrono.GJChronology$CutoverField" name="long getDifferenceAsLong(long, long)" map="C"/>
  <method class="org.joda.time.chrono.GJChronology$CutoverField" name="int getMaximumTextLength(java.util.Locale)" map="A"/>
  <method class="org.joda.time.chrono.GJChronology$CutoverField" name="int getMinimumValue(long)" map="G"/>
  <method class="org.joda.time.chrono.GJChronology$CutoverField" name="int getMinimumValue()" map="D"/>
  <method class="org.joda.time.chrono.GJChronology$CutoverField" name="int[] add(org.joda.time.ReadablePartial, int, int[], int)" map="D"/>
  <method class="org.joda.time.chrono.GJChronology$CutoverField" name="org.joda.time.DurationField getDurationField()" map="H"/>
  <method class="org.joda.time.chrono.GJChronology$CutoverField" name="org.joda.time.DurationField getRangeDurationField()" map="A"/>
  <method class="org.joda.time.chrono.GJChronology$CutoverField" name="int getMaximumShortTextLength(java.util.Locale)" map="B"/>
  <method class="org.joda.time.chrono.GJChronology$CutoverField" name="int getMaximumValue(org.joda.time.ReadablePartial, int[])" map="A"/>
  <method class="org.joda.time.chrono.GJChronology$CutoverField" name="boolean isLenient()" map="C"/>
  <method class="org.joda.time.chrono.GJChronology$CutoverField" name="int getMaximumValue(org.joda.time.ReadablePartial)" map="B"/>
  <method class="org.joda.time.chrono.GJChronology$CutoverField" name="boolean isLeap(long)" map="L"/>
  <method class="org.joda.time.chrono.GJChronology$CutoverField" name="int get(long)" map="E"/>
  <method class="org.joda.time.chrono.GJChronology$CutoverField" name="int getLeapAmount(long)" map="B"/>
  <method class="org.joda.time.chrono.GJChronology$CutoverField" name="int getMaximumValue()" map="F"/>
  <method class="org.joda.time.chrono.GJChronology$CutoverField" name="int getDifference(long, long)" map="B"/>
  <method class="org.joda.time.chrono.GJChronology$CutoverField" name="long set(long, int)" map="C"/>
  <method class="org.joda.time.chrono.GJChronology$CutoverField" name="long add(long, long)" map="A"/>
  <method class="org.joda.time.chrono.GJChronology$CutoverField" name="java.lang.String getAsText(long, java.util.Locale)" map="A"/>
  <method class="org.joda.time.chrono.GJChronology$CutoverField" name="long roundCeiling(long)" map="H"/>
  <method class="org.joda.time.chrono.GJChronology$CutoverField" name="int getMaximumValue(long)" map="M"/>
  <method class="org.joda.time.chrono.GJChronology$CutoverField" name="long set(long, java.lang.String, java.util.Locale)" map="A"/>
  <method class="org.joda.time.chrono.GJChronology$CutoverField" name="java.lang.String getAsText(int, java.util.Locale)" map="A"/>
  <method class="org.joda.time.chrono.GJChronology$CutoverField" name="java.lang.String getAsShortText(long, java.util.Locale)" map="B"/>
  <method class="org.joda.time.chrono.GJChronology$CutoverField" name="long julianToGregorian(long)" map="O"/>
  <class name="org.joda.time.chrono.GJChronology" map="B"/>
  <field class="org.joda.time.chrono.GJChronology" name="iJulianChronology" map="&#x0118;"/>
  <field class="org.joda.time.chrono.GJChronology" name="iCutoverInstant" map="&#x0119;"/>
  <field class="org.joda.time.chrono.GJChronology" name="iCutoverMillis" map="&#x011a;"/>
  <field class="org.joda.time.chrono.GJChronology" name="iGregorianChronology" map="&#x011b;"/>
  <field class="org.joda.time.chrono.GJChronology" name="DEFAULT_CUTOVER" map="&#x011c;"/>
  <field class="org.joda.time.chrono.GJChronology" name="iGapDuration" map="&#x011d;"/>
  <field class="org.joda.time.chrono.GJChronology" name="cCache" map="&#x011e;"/>
  <field class="org.joda.time.chrono.GJChronology" name="serialVersionUID" map="&#x011f;"/>
  <method class="org.joda.time.chrono.GJChronology" name="org.joda.time.chrono.GJChronology getInstanceUTC()" map="&#x00db;"/>
  <method class="org.joda.time.chrono.GJChronology" name="long gregorianToJulianByWeekyear(long)" map="K"/>
  <method class="org.joda.time.chrono.GJChronology" name="org.joda.time.Chronology withUTC()" map="B"/>
  <method class="org.joda.time.chrono.GJChronology" name="long access$000(org.joda.time.chrono.GJChronology)" map="access$000"/>
  <method class="org.joda.time.chrono.GJChronology" name="org.joda.time.chrono.GJChronology getInstance()" map="&#x00dc;"/>
  <method class="org.joda.time.chrono.GJChronology" name="long convertByWeekyear(long, org.joda.time.Chronology, org.joda.time.Chronology)" map="A"/>
  <method class="org.joda.time.chrono.GJChronology" name="boolean equals(java.lang.Object)" map="equals"/>
  <method class="org.joda.time.chrono.GJChronology" name="org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone)" map="O"/>
  <method class="org.joda.time.chrono.GJChronology" name="org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone, org.joda.time.ReadableInstant)" map="A"/>
  <method class="org.joda.time.chrono.GJChronology" name="java.lang.String toString()" map="toString"/>
  <method class="org.joda.time.chrono.GJChronology" name="org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)" map="B"/>
  <method class="org.joda.time.chrono.GJChronology" name="long julianToGregorianByYear(long)" map="L"/>
  <method class="org.joda.time.chrono.GJChronology" name="org.joda.time.DateTimeZone getZone()" map="D"/>
  <method class="org.joda.time.chrono.GJChronology" name="int getMinimumDaysInFirstWeek()" map="&#x00dd;"/>
  <method class="org.joda.time.chrono.GJChronology" name="long julianToGregorianByWeekyear(long)" map="M"/>
  <method class="org.joda.time.chrono.GJChronology" name="org.joda.time.Instant getGregorianCutover()" map="&#x00de;"/>
  <method class="org.joda.time.chrono.GJChronology" name="void assemble(org.joda.time.chrono.AssembledChronology$Fields)" map="A"/>
  <method class="org.joda.time.chrono.GJChronology" name="int hashCode()" map="hashCode"/>
  <method class="org.joda.time.chrono.GJChronology" name="long convertByYear(long, org.joda.time.Chronology, org.joda.time.Chronology)" map="B"/>
  <method class="org.joda.time.chrono.GJChronology" name="org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone, long, int)" map="A"/>
  <method class="org.joda.time.chrono.GJChronology" name="java.lang.Object readResolve()" map="&#x00df;"/>
  <method class="org.joda.time.chrono.GJChronology" name="long gregorianToJulianByYear(long)" map="N"/>
  <method class="org.joda.time.chrono.GJChronology" name="long getDateTimeMillis(int, int, int, int)" map="A"/>
  <method class="org.joda.time.chrono.GJChronology" name="org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone, org.joda.time.ReadableInstant, int)" map="A"/>
  <method class="org.joda.time.chrono.GJChronology" name="long getDateTimeMillis(int, int, int, int, int, int, int)" map="A"/>
  <class name="org.joda.time.chrono.EthiopicChronology" map="C"/>
  <field class="org.joda.time.chrono.EthiopicChronology" name="EE" map="&#x00c9;"/>
  <field class="org.joda.time.chrono.EthiopicChronology" name="INSTANCE_UTC" map="&#x00ca;"/>
  <field class="org.joda.time.chrono.EthiopicChronology" name="MIN_YEAR" map="&#x00cb;"/>
  <field class="org.joda.time.chrono.EthiopicChronology" name="ERA_FIELD" map="&#x00cc;"/>
  <field class="org.joda.time.chrono.EthiopicChronology" name="cCache" map="&#x00cd;"/>
  <field class="org.joda.time.chrono.EthiopicChronology" name="MAX_YEAR" map="&#x00ce;"/>
  <field class="org.joda.time.chrono.EthiopicChronology" name="serialVersionUID" map="&#x00cf;"/>
  <method class="org.joda.time.chrono.EthiopicChronology" name="int getMinYear()" map="&#x00aa;"/>
  <method class="org.joda.time.chrono.EthiopicChronology" name="org.joda.time.Chronology withUTC()" map="B"/>
  <method class="org.joda.time.chrono.EthiopicChronology" name="org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)" map="B"/>
  <method class="org.joda.time.chrono.EthiopicChronology" name="org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone)" map="H"/>
  <method class="org.joda.time.chrono.EthiopicChronology" name="long getApproxMillisAtEpochDividedByTwo()" map="&#x00a3;"/>
  <method class="org.joda.time.chrono.EthiopicChronology" name="void assemble(org.joda.time.chrono.AssembledChronology$Fields)" map="A"/>
  <method class="org.joda.time.chrono.EthiopicChronology" name="long calculateFirstDayOfYearMillis(int)" map="C"/>
  <method class="org.joda.time.chrono.EthiopicChronology" name="org.joda.time.chrono.EthiopicChronology getInstanceUTC()" map="&#x00c2;"/>
  <method class="org.joda.time.chrono.EthiopicChronology" name="java.lang.Object readResolve()" map="&#x00c3;"/>
  <method class="org.joda.time.chrono.EthiopicChronology" name="int getMaxYear()" map="&#x00c0;"/>
  <method class="org.joda.time.chrono.EthiopicChronology" name="org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone, int)" map="A"/>
  <method class="org.joda.time.chrono.EthiopicChronology" name="org.joda.time.chrono.EthiopicChronology getInstance()" map="&#x00c4;"/>
  <class name="org.joda.time.chrono.JulianChronology" map="D"/>
  <field class="org.joda.time.chrono.JulianChronology" name="MILLIS_PER_YEAR" map="&#x00de;"/>
  <field class="org.joda.time.chrono.JulianChronology" name="MILLIS_PER_MONTH" map="&#x00df;"/>
  <field class="org.joda.time.chrono.JulianChronology" name="INSTANCE_UTC" map="&#x00e0;"/>
  <field class="org.joda.time.chrono.JulianChronology" name="MIN_YEAR" map="&#x00e1;"/>
  <field class="org.joda.time.chrono.JulianChronology" name="cCache" map="&#x00e2;"/>
  <field class="org.joda.time.chrono.JulianChronology" name="MAX_YEAR" map="&#x00e3;"/>
  <field class="org.joda.time.chrono.JulianChronology" name="serialVersionUID" map="&#x00e4;"/>
  <method class="org.joda.time.chrono.JulianChronology" name="org.joda.time.chrono.JulianChronology getInstance()" map="&#x00c8;"/>
  <method class="org.joda.time.chrono.JulianChronology" name="org.joda.time.Chronology withUTC()" map="B"/>
  <method class="org.joda.time.chrono.JulianChronology" name="org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone)" map="J"/>
  <method class="org.joda.time.chrono.JulianChronology" name="long getAverageMillisPerYear()" map="&#x00a4;"/>
  <method class="org.joda.time.chrono.JulianChronology" name="int getMinYear()" map="&#x00aa;"/>
  <method class="org.joda.time.chrono.JulianChronology" name="long calculateFirstDayOfYearMillis(int)" map="C"/>
  <method class="org.joda.time.chrono.JulianChronology" name="boolean isLeapYear(int)" map="H"/>
  <method class="org.joda.time.chrono.JulianChronology" name="org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)" map="B"/>
  <method class="org.joda.time.chrono.JulianChronology" name="long getApproxMillisAtEpochDividedByTwo()" map="&#x00a3;"/>
  <method class="org.joda.time.chrono.JulianChronology" name="void assemble(org.joda.time.chrono.AssembledChronology$Fields)" map="A"/>
  <method class="org.joda.time.chrono.JulianChronology" name="java.lang.Object readResolve()" map="&#x00c9;"/>
  <method class="org.joda.time.chrono.JulianChronology" name="long getAverageMillisPerMonth()" map="&#x00c1;"/>
  <method class="org.joda.time.chrono.JulianChronology" name="org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone, int)" map="C"/>
  <method class="org.joda.time.chrono.JulianChronology" name="long getDateMidnightMillis(int, int, int)" map="B"/>
  <method class="org.joda.time.chrono.JulianChronology" name="org.joda.time.chrono.JulianChronology getInstanceUTC()" map="&#x00ca;"/>
  <method class="org.joda.time.chrono.JulianChronology" name="int getMaxYear()" map="&#x00c0;"/>
  <method class="org.joda.time.chrono.JulianChronology" name="int adjustYearForSet(int)" map="J"/>
  <method class="org.joda.time.chrono.JulianChronology" name="long getAverageMillisPerYearDividedByTwo()" map="&#x00a2;"/>
  <class name="org.joda.time.chrono.BasicFixedMonthChronology" map="E"/>
  <field class="org.joda.time.chrono.BasicFixedMonthChronology" name="MILLIS_PER_YEAR" map="&#x00c5;"/>
  <field class="org.joda.time.chrono.BasicFixedMonthChronology" name="MILLIS_PER_MONTH" map="&#x00c6;"/>
  <field class="org.joda.time.chrono.BasicFixedMonthChronology" name="MONTH_LENGTH" map="&#x00c7;"/>
  <field class="org.joda.time.chrono.BasicFixedMonthChronology" name="serialVersionUID" map="&#x00c8;"/>
  <method class="org.joda.time.chrono.BasicFixedMonthChronology" name="long getAverageMillisPerMonth()" map="&#x00c1;"/>
  <method class="org.joda.time.chrono.BasicFixedMonthChronology" name="long getAverageMillisPerYear()" map="&#x00a4;"/>
  <method class="org.joda.time.chrono.BasicFixedMonthChronology" name="int getMonthOfYear(long)" map="H"/>
  <method class="org.joda.time.chrono.BasicFixedMonthChronology" name="int getMaxMonth()" map="&#x00b5;"/>
  <method class="org.joda.time.chrono.BasicFixedMonthChronology" name="long getAverageMillisPerYearDividedByTwo()" map="&#x00a2;"/>
  <method class="org.joda.time.chrono.BasicFixedMonthChronology" name="int getDaysInYearMonth(int, int)" map="C"/>
  <method class="org.joda.time.chrono.BasicFixedMonthChronology" name="long setYear(long, int)" map="E"/>
  <method class="org.joda.time.chrono.BasicFixedMonthChronology" name="int getDaysInMonthMax(int)" map="B"/>
  <method class="org.joda.time.chrono.BasicFixedMonthChronology" name="boolean isLeapYear(int)" map="H"/>
  <method class="org.joda.time.chrono.BasicFixedMonthChronology" name="int getDaysInMonthMax()" map="&#x00a5;"/>
  <method class="org.joda.time.chrono.BasicFixedMonthChronology" name="long getYearDifference(long, long)" map="A"/>
  <method class="org.joda.time.chrono.BasicFixedMonthChronology" name="int getMonthOfYear(long, int)" map="F"/>
  <method class="org.joda.time.chrono.BasicFixedMonthChronology" name="int getDayOfMonth(long)" map="C"/>
  <method class="org.joda.time.chrono.BasicFixedMonthChronology" name="long getTotalMillisByYearMonth(int, int)" map="A"/>
  <class name="org.joda.time.chrono.GJDayOfWeekDateTimeField" map="F"/>
  <field class="org.joda.time.chrono.GJDayOfWeekDateTimeField" name="iChronology" map="&#x00a4;"/>
  <field class="org.joda.time.chrono.GJDayOfWeekDateTimeField" name="serialVersionUID" map="&#x00a5;"/>
  <method class="org.joda.time.chrono.GJDayOfWeekDateTimeField" name="int getMaximumShortTextLength(java.util.Locale)" map="B"/>
  <method class="org.joda.time.chrono.GJDayOfWeekDateTimeField" name="java.lang.String getAsShortText(int, java.util.Locale)" map="B"/>
  <method class="org.joda.time.chrono.GJDayOfWeekDateTimeField" name="org.joda.time.DurationField getRangeDurationField()" map="A"/>
  <method class="org.joda.time.chrono.GJDayOfWeekDateTimeField" name="java.lang.String getAsText(int, java.util.Locale)" map="A"/>
  <method class="org.joda.time.chrono.GJDayOfWeekDateTimeField" name="int getMaximumValue()" map="F"/>
  <method class="org.joda.time.chrono.GJDayOfWeekDateTimeField" name="int getMinimumValue()" map="D"/>
  <method class="org.joda.time.chrono.GJDayOfWeekDateTimeField" name="int get(long)" map="E"/>
  <method class="org.joda.time.chrono.GJDayOfWeekDateTimeField" name="java.lang.Object readResolve()" map="U"/>
  <method class="org.joda.time.chrono.GJDayOfWeekDateTimeField" name="int convertText(java.lang.String, java.util.Locale)" map="A"/>
  <method class="org.joda.time.chrono.GJDayOfWeekDateTimeField" name="int getMaximumTextLength(java.util.Locale)" map="A"/>
  <class name="org.joda.time.chrono.BasicDayOfMonthDateTimeField" map="G"/>
  <field class="org.joda.time.chrono.BasicDayOfMonthDateTimeField" name="iChronology" map="&#x00aa;"/>
  <field class="org.joda.time.chrono.BasicDayOfMonthDateTimeField" name="serialVersionUID" map="&#x00b5;"/>
  <method class="org.joda.time.chrono.BasicDayOfMonthDateTimeField" name="int getMaximumValue(org.joda.time.ReadablePartial)" map="B"/>
  <method class="org.joda.time.chrono.BasicDayOfMonthDateTimeField" name="org.joda.time.DurationField getRangeDurationField()" map="A"/>
  <method class="org.joda.time.chrono.BasicDayOfMonthDateTimeField" name="int getMaximumValue()" map="F"/>
  <method class="org.joda.time.chrono.BasicDayOfMonthDateTimeField" name="int getMaximumValueForSet(long, int)" map="D"/>
  <method class="org.joda.time.chrono.BasicDayOfMonthDateTimeField" name="int getMaximumValue(org.joda.time.ReadablePartial, int[])" map="A"/>
  <method class="org.joda.time.chrono.BasicDayOfMonthDateTimeField" name="int getMaximumValue(long)" map="M"/>
  <method class="org.joda.time.chrono.BasicDayOfMonthDateTimeField" name="int getMinimumValue()" map="D"/>
  <method class="org.joda.time.chrono.BasicDayOfMonthDateTimeField" name="int get(long)" map="E"/>
  <method class="org.joda.time.chrono.BasicDayOfMonthDateTimeField" name="java.lang.Object readResolve()" map="V"/>
  <class name="org.joda.time.chrono.BasicWeekyearDateTimeField" map="H"/>
  <field class="org.joda.time.chrono.BasicWeekyearDateTimeField" name="iChronology" map="o"/>
  <field class="org.joda.time.chrono.BasicWeekyearDateTimeField" name="WEEK_53" map="p"/>
  <field class="org.joda.time.chrono.BasicWeekyearDateTimeField" name="serialVersionUID" map="q"/>
  <method class="org.joda.time.chrono.BasicWeekyearDateTimeField" name="long add(long, int)" map="B"/>
  <method class="org.joda.time.chrono.BasicWeekyearDateTimeField" name="int getLeapAmount(long)" map="B"/>
  <method class="org.joda.time.chrono.BasicWeekyearDateTimeField" name="long set(long, int)" map="C"/>
  <method class="org.joda.time.chrono.BasicWeekyearDateTimeField" name="long add(long, long)" map="A"/>
  <method class="org.joda.time.chrono.BasicWeekyearDateTimeField" name="org.joda.time.DurationField getRangeDurationField()" map="A"/>
  <method class="org.joda.time.chrono.BasicWeekyearDateTimeField" name="long remainder(long)" map="D"/>
  <method class="org.joda.time.chrono.BasicWeekyearDateTimeField" name="long roundFloor(long)" map="A"/>
  <method class="org.joda.time.chrono.BasicWeekyearDateTimeField" name="boolean isLeap(long)" map="L"/>
  <method class="org.joda.time.chrono.BasicWeekyearDateTimeField" name="int getMaximumValue()" map="F"/>
  <method class="org.joda.time.chrono.BasicWeekyearDateTimeField" name="long getDifferenceAsLong(long, long)" map="C"/>
  <method class="org.joda.time.chrono.BasicWeekyearDateTimeField" name="boolean isLenient()" map="C"/>
  <method class="org.joda.time.chrono.BasicWeekyearDateTimeField" name="int getMinimumValue()" map="D"/>
  <method class="org.joda.time.chrono.BasicWeekyearDateTimeField" name="int get(long)" map="E"/>
  <method class="org.joda.time.chrono.BasicWeekyearDateTimeField" name="long addWrapField(long, int)" map="A"/>
  <method class="org.joda.time.chrono.BasicWeekyearDateTimeField" name="java.lang.Object readResolve()" map="Q"/>
  <method class="org.joda.time.chrono.BasicWeekyearDateTimeField" name="org.joda.time.DurationField getLeapDurationField()" map="B"/>
  <class name="org.joda.time.chrono.LenientChronology" map="I"/>
  <field class="org.joda.time.chrono.LenientChronology" name="iWithUTC" map="n"/>
  <field class="org.joda.time.chrono.LenientChronology" name="serialVersionUID" map="o"/>
  <method class="org.joda.time.chrono.LenientChronology" name="org.joda.time.Chronology withUTC()" map="B"/>
  <method class="org.joda.time.chrono.LenientChronology" name="org.joda.time.chrono.LenientChronology getInstance(org.joda.time.Chronology)" map="A"/>
  <method class="org.joda.time.chrono.LenientChronology" name="boolean equals(java.lang.Object)" map="equals"/>
  <method class="org.joda.time.chrono.LenientChronology" name="org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)" map="A"/>
  <method class="org.joda.time.chrono.LenientChronology" name="int hashCode()" map="hashCode"/>
  <method class="org.joda.time.chrono.LenientChronology" name="java.lang.String toString()" map="toString"/>
  <method class="org.joda.time.chrono.LenientChronology" name="org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)" map="B"/>
  <method class="org.joda.time.chrono.LenientChronology" name="void assemble(org.joda.time.chrono.AssembledChronology$Fields)" map="A"/>
  <class name="org.joda.time.chrono.BasicChronology$HalfdayField" map="_A"/>
  <field class="org.joda.time.chrono.BasicChronology$HalfdayField" name="serialVersionUID" map="&#x00c6;"/>
  <method class="org.joda.time.chrono.BasicChronology$HalfdayField" name="long set(long, java.lang.String, java.util.Locale)" map="A"/>
  <method class="org.joda.time.chrono.BasicChronology$HalfdayField" name="java.lang.String getAsText(int, java.util.Locale)" map="A"/>
  <method class="org.joda.time.chrono.BasicChronology$HalfdayField" name="int getMaximumTextLength(java.util.Locale)" map="A"/>
  <class name="org.joda.time.chrono.BasicChronology$YearInfo" map="_B"/>
  <field class="org.joda.time.chrono.BasicChronology$YearInfo" name="iYear" map="A"/>
  <field class="org.joda.time.chrono.BasicChronology$YearInfo" name="iFirstDayMillis" map="B"/>
  <class name="org.joda.time.chrono.BasicChronology" map="J"/>
  <field class="org.joda.time.chrono.BasicChronology" name="cSecondOfMinuteField" map="p"/>
  <field class="org.joda.time.chrono.BasicChronology" name="cHourOfHalfdayField" map="q"/>
  <field class="org.joda.time.chrono.BasicChronology" name="cClockhourOfHalfdayField" map="r"/>
  <field class="org.joda.time.chrono.BasicChronology" name="cSecondsField" map="s"/>
  <field class="org.joda.time.chrono.BasicChronology" name="cMillisOfDayField" map="t"/>
  <field class="org.joda.time.chrono.BasicChronology" name="cMinutesField" map="u"/>
  <field class="org.joda.time.chrono.BasicChronology" name="cDaysField" map="v"/>
  <field class="org.joda.time.chrono.BasicChronology" name="cHourOfDayField" map="w"/>
  <field class="org.joda.time.chrono.BasicChronology" name="serialVersionUID" map="x"/>
  <field class="org.joda.time.chrono.BasicChronology" name="cHalfdayOfDayField" map="y"/>
  <field class="org.joda.time.chrono.BasicChronology" name="cHoursField" map="z"/>
  <field class="org.joda.time.chrono.BasicChronology" name="cSecondOfDayField" map="&#x00a2;"/>
  <field class="org.joda.time.chrono.BasicChronology" name="iYearInfoCache" map="&#x00a3;"/>
  <field class="org.joda.time.chrono.BasicChronology" name="cMinuteOfDayField" map="&#x00a4;"/>
  <field class="org.joda.time.chrono.BasicChronology" name="cMillisField" map="&#x00a5;"/>
  <field class="org.joda.time.chrono.BasicChronology" name="cClockhourOfDayField" map="&#x00aa;"/>
  <field class="org.joda.time.chrono.BasicChronology" name="CACHE_SIZE" map="&#x00b5;"/>
  <field class="org.joda.time.chrono.BasicChronology" name="cMinuteOfHourField" map="&#x00ba;"/>
  <field class="org.joda.time.chrono.BasicChronology" name="cWeeksField" map="&#x00c0;"/>
  <field class="org.joda.time.chrono.BasicChronology" name="iMinDaysInFirstWeek" map="&#x00c1;"/>
  <field class="org.joda.time.chrono.BasicChronology" name="cHalfdaysField" map="&#x00c2;"/>
  <field class="org.joda.time.chrono.BasicChronology" name="cMillisOfSecondField" map="&#x00c3;"/>
  <field class="org.joda.time.chrono.BasicChronology" name="CACHE_MASK" map="&#x00c4;"/>
  <method class="org.joda.time.chrono.BasicChronology" name="int getDayOfMonth(long, int, int)" map="A"/>
  <method class="org.joda.time.chrono.BasicChronology" name="int getWeekOfWeekyear(long, int)" map="A"/>
  <method class="org.joda.time.chrono.BasicChronology" name="int getDaysInMonthMaxForSet(long, int)" map="B"/>
  <method class="org.joda.time.chrono.BasicChronology" name="long getDateTimeMillis(int, int, int, int, int, int, int)" map="A"/>
  <method class="org.joda.time.chrono.BasicChronology" name="int getDaysInYearMax()" map="z"/>
  <method class="org.joda.time.chrono.BasicChronology" name="long getAverageMillisPerYearDividedByTwo()" map="&#x00a2;"/>
  <method class="org.joda.time.chrono.BasicChronology" name="int getDaysInMonthMax(long)" map="A"/>
  <method class="org.joda.time.chrono.BasicChronology" name="org.joda.time.DurationField access$000()" map="access$000"/>
  <method class="org.joda.time.chrono.BasicChronology" name="long getYearDifference(long, long)" map="A"/>
  <method class="org.joda.time.chrono.BasicChronology" name="int getDaysInYear(int)" map="A"/>
  <method class="org.joda.time.chrono.BasicChronology" name="long getYearMonthDayMillis(int, int, int)" map="A"/>
  <method class="org.joda.time.chrono.BasicChronology" name="int getDayOfMonth(long, int)" map="C"/>
  <method class="org.joda.time.chrono.BasicChronology" name="int getYear(long)" map="B"/>
  <method class="org.joda.time.chrono.BasicChronology" name="int getDaysInMonthMax(int)" map="B"/>
  <method class="org.joda.time.chrono.BasicChronology" name="org.joda.time.DateTimeZone getZone()" map="D"/>
  <method class="org.joda.time.chrono.BasicChronology" name="long getApproxMillisAtEpochDividedByTwo()" map="&#x00a3;"/>
  <method class="org.joda.time.chrono.BasicChronology" name="long calculateFirstDayOfYearMillis(int)" map="C"/>
  <method class="org.joda.time.chrono.BasicChronology" name="long getAverageMillisPerYear()" map="&#x00a4;"/>
  <method class="org.joda.time.chrono.BasicChronology" name="long getTotalMillisByYearMonth(int, int)" map="A"/>
  <method class="org.joda.time.chrono.BasicChronology" name="long getYearMonthMillis(int, int)" map="B"/>
  <method class="org.joda.time.chrono.BasicChronology" name="int getDaysInMonthMax()" map="&#x00a5;"/>
  <method class="org.joda.time.chrono.BasicChronology" name="int getDayOfYear(long, int)" map="D"/>
  <method class="org.joda.time.chrono.BasicChronology" name="int getMinYear()" map="&#x00aa;"/>
  <method class="org.joda.time.chrono.BasicChronology" name="long getDateTimeMillis(int, int, int, int)" map="A"/>
  <method class="org.joda.time.chrono.BasicChronology" name="int hashCode()" map="hashCode"/>
  <method class="org.joda.time.chrono.BasicChronology" name="org.joda.time.DurationField access$100()" map="access$100"/>
  <method class="org.joda.time.chrono.BasicChronology" name="java.lang.String toString()" map="toString"/>
  <method class="org.joda.time.chrono.BasicChronology" name="long getDateMidnightMillis(int, int, int)" map="B"/>
  <method class="org.joda.time.chrono.BasicChronology" name="int getDayOfMonth(long)" map="C"/>
  <method class="org.joda.time.chrono.BasicChronology" name="int getMaxMonth()" map="&#x00b5;"/>
  <method class="org.joda.time.chrono.BasicChronology" name="int getWeekOfWeekyear(long)" map="D"/>
  <method class="org.joda.time.chrono.BasicChronology" name="int getMinimumDaysInFirstWeek()" map="&#x00ba;"/>
  <method class="org.joda.time.chrono.BasicChronology" name="int getDayOfWeek(long)" map="E"/>
  <method class="org.joda.time.chrono.BasicChronology" name="org.joda.time.chrono.BasicChronology$YearInfo getYearInfo(int)" map="D"/>
  <method class="org.joda.time.chrono.BasicChronology" name="int getWeeksInYear(int)" map="E"/>
  <method class="org.joda.time.chrono.BasicChronology" name="int getDaysInYearMonth(int, int)" map="C"/>
  <method class="org.joda.time.chrono.BasicChronology" name="int getMaxMonth(int)" map="F"/>
  <method class="org.joda.time.chrono.BasicChronology" name="long getFirstWeekOfYearMillis(int)" map="G"/>
  <method class="org.joda.time.chrono.BasicChronology" name="boolean equals(java.lang.Object)" map="equals"/>
  <method class="org.joda.time.chrono.BasicChronology" name="int getDayOfYear(long)" map="F"/>
  <method class="org.joda.time.chrono.BasicChronology" name="int getMaxYear()" map="&#x00c0;"/>
  <method class="org.joda.time.chrono.BasicChronology" name="int getWeekyear(long)" map="G"/>
  <method class="org.joda.time.chrono.BasicChronology" name="boolean isLeapYear(int)" map="H"/>
  <method class="org.joda.time.chrono.BasicChronology" name="long getAverageMillisPerMonth()" map="&#x00c1;"/>
  <method class="org.joda.time.chrono.BasicChronology" name="long setYear(long, int)" map="E"/>
  <method class="org.joda.time.chrono.BasicChronology" name="int getMonthOfYear(long)" map="H"/>
  <method class="org.joda.time.chrono.BasicChronology" name="long getYearMillis(int)" map="I"/>
  <method class="org.joda.time.chrono.BasicChronology" name="void assemble(org.joda.time.chrono.AssembledChronology$Fields)" map="A"/>
  <method class="org.joda.time.chrono.BasicChronology" name="int getMillisOfDay(long)" map="I"/>
  <method class="org.joda.time.chrono.BasicChronology" name="int getMonthOfYear(long, int)" map="F"/>
  <class name="org.joda.time.chrono.GregorianChronology" map="K"/>
  <field class="org.joda.time.chrono.GregorianChronology" name="MILLIS_PER_YEAR" map="&#x00e5;"/>
  <field class="org.joda.time.chrono.GregorianChronology" name="MILLIS_PER_MONTH" map="&#x00e6;"/>
  <field class="org.joda.time.chrono.GregorianChronology" name="INSTANCE_UTC" map="&#x00e7;"/>
  <field class="org.joda.time.chrono.GregorianChronology" name="DAYS_0000_TO_1970" map="&#x00e8;"/>
  <field class="org.joda.time.chrono.GregorianChronology" name="MIN_YEAR" map="&#x00e9;"/>
  <field class="org.joda.time.chrono.GregorianChronology" name="cCache" map="&#x00ea;"/>
  <field class="org.joda.time.chrono.GregorianChronology" name="MAX_YEAR" map="&#x00eb;"/>
  <field class="org.joda.time.chrono.GregorianChronology" name="serialVersionUID" map="&#x00ec;"/>
  <method class="org.joda.time.chrono.GregorianChronology" name="org.joda.time.chrono.GregorianChronology getInstanceUTC()" map="&#x00cb;"/>
  <method class="org.joda.time.chrono.GregorianChronology" name="int getMinYear()" map="&#x00aa;"/>
  <method class="org.joda.time.chrono.GregorianChronology" name="org.joda.time.Chronology withUTC()" map="B"/>
  <method class="org.joda.time.chrono.GregorianChronology" name="long getAverageMillisPerMonth()" map="&#x00c1;"/>
  <method class="org.joda.time.chrono.GregorianChronology" name="long getAverageMillisPerYear()" map="&#x00a4;"/>
  <method class="org.joda.time.chrono.GregorianChronology" name="org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)" map="B"/>
  <method class="org.joda.time.chrono.GregorianChronology" name="org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone)" map="K"/>
  <method class="org.joda.time.chrono.GregorianChronology" name="long getApproxMillisAtEpochDividedByTwo()" map="&#x00a3;"/>
  <method class="org.joda.time.chrono.GregorianChronology" name="long getAverageMillisPerYearDividedByTwo()" map="&#x00a2;"/>
  <method class="org.joda.time.chrono.GregorianChronology" name="org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone, int)" map="D"/>
  <method class="org.joda.time.chrono.GregorianChronology" name="boolean isLeapYear(int)" map="H"/>
  <method class="org.joda.time.chrono.GregorianChronology" name="void assemble(org.joda.time.chrono.AssembledChronology$Fields)" map="A"/>
  <method class="org.joda.time.chrono.GregorianChronology" name="org.joda.time.chrono.GregorianChronology getInstance()" map="&#x00cc;"/>
  <method class="org.joda.time.chrono.GregorianChronology" name="long calculateFirstDayOfYearMillis(int)" map="C"/>
  <method class="org.joda.time.chrono.GregorianChronology" name="java.lang.Object readResolve()" map="&#x00cd;"/>
  <method class="org.joda.time.chrono.GregorianChronology" name="int getMaxYear()" map="&#x00c0;"/>
  <class name="org.joda.time.chrono.BasicSingleEraDateTimeField" map="L"/>
  <field class="org.joda.time.chrono.BasicSingleEraDateTimeField" name="iEraText" map="a"/>
  <field class="org.joda.time.chrono.BasicSingleEraDateTimeField" name="ERA_VALUE" map="b"/>
  <method class="org.joda.time.chrono.BasicSingleEraDateTimeField" name="long roundCeiling(long)" map="H"/>
  <method class="org.joda.time.chrono.BasicSingleEraDateTimeField" name="org.joda.time.DurationField getDurationField()" map="H"/>
  <method class="org.joda.time.chrono.BasicSingleEraDateTimeField" name="long set(long, int)" map="C"/>
  <method class="org.joda.time.chrono.BasicSingleEraDateTimeField" name="java.lang.String getAsText(int, java.util.Locale)" map="A"/>
  <method class="org.joda.time.chrono.BasicSingleEraDateTimeField" name="org.joda.time.DurationField getRangeDurationField()" map="A"/>
  <method class="org.joda.time.chrono.BasicSingleEraDateTimeField" name="long roundFloor(long)" map="A"/>
  <method class="org.joda.time.chrono.BasicSingleEraDateTimeField" name="int getMaximumValue()" map="F"/>
  <method class="org.joda.time.chrono.BasicSingleEraDateTimeField" name="boolean isLenient()" map="C"/>
  <method class="org.joda.time.chrono.BasicSingleEraDateTimeField" name="long roundHalfCeiling(long)" map="I"/>
  <method class="org.joda.time.chrono.BasicSingleEraDateTimeField" name="long roundHalfEven(long)" map="K"/>
  <method class="org.joda.time.chrono.BasicSingleEraDateTimeField" name="int getMinimumValue()" map="D"/>
  <method class="org.joda.time.chrono.BasicSingleEraDateTimeField" name="int get(long)" map="E"/>
  <method class="org.joda.time.chrono.BasicSingleEraDateTimeField" name="long set(long, java.lang.String, java.util.Locale)" map="A"/>
  <method class="org.joda.time.chrono.BasicSingleEraDateTimeField" name="int getMaximumTextLength(java.util.Locale)" map="A"/>
  <method class="org.joda.time.chrono.BasicSingleEraDateTimeField" name="long roundHalfFloor(long)" map="F"/>
  <class name="org.joda.time.chrono.ZonedChronology$ZonedDateTimeField" map="_A"/>
  <field class="org.joda.time.chrono.ZonedChronology$ZonedDateTimeField" name="iZone" map="c"/>
  <field class="org.joda.time.chrono.ZonedChronology$ZonedDateTimeField" name="iRangeDurationField" map="d"/>
  <field class="org.joda.time.chrono.ZonedChronology$ZonedDateTimeField" name="iTimeField" map="e"/>
  <field class="org.joda.time.chrono.ZonedChronology$ZonedDateTimeField" name="iLeapDurationField" map="f"/>
  <field class="org.joda.time.chrono.ZonedChronology$ZonedDateTimeField" name="iDurationField" map="g"/>
  <field class="org.joda.time.chrono.ZonedChronology$ZonedDateTimeField" name="iField" map="h"/>
  <field class="org.joda.time.chrono.ZonedChronology$ZonedDateTimeField" name="serialVersionUID" map="i"/>
  <method class="org.joda.time.chrono.ZonedChronology$ZonedDateTimeField" name="int getMinimumValue(org.joda.time.ReadablePartial)" map="A"/>
  <method class="org.joda.time.chrono.ZonedChronology$ZonedDateTimeField" name="org.joda.time.DurationField getLeapDurationField()" map="B"/>
  <method class="org.joda.time.chrono.ZonedChronology$ZonedDateTimeField" name="long remainder(long)" map="D"/>
  <method class="org.joda.time.chrono.ZonedChronology$ZonedDateTimeField" name="java.lang.String getAsShortText(int, java.util.Locale)" map="B"/>
  <method class="org.joda.time.chrono.ZonedChronology$ZonedDateTimeField" name="long roundFloor(long)" map="A"/>
  <method class="org.joda.time.chrono.ZonedChronology$ZonedDateTimeField" name="long add(long, int)" map="B"/>
  <method class="org.joda.time.chrono.ZonedChronology$ZonedDateTimeField" name="int getMinimumValue(org.joda.time.ReadablePartial, int[])" map="B"/>
  <method class="org.joda.time.chrono.ZonedChronology$ZonedDateTimeField" name="long getDifferenceAsLong(long, long)" map="C"/>
  <method class="org.joda.time.chrono.ZonedChronology$ZonedDateTimeField" name="int getMaximumTextLength(java.util.Locale)" map="A"/>
  <method class="org.joda.time.chrono.ZonedChronology$ZonedDateTimeField" name="int getMinimumValue(long)" map="G"/>
  <method class="org.joda.time.chrono.ZonedChronology$ZonedDateTimeField" name="int getMinimumValue()" map="D"/>
  <method class="org.joda.time.chrono.ZonedChronology$ZonedDateTimeField" name="org.joda.time.DurationField getDurationField()" map="H"/>
  <method class="org.joda.time.chrono.ZonedChronology$ZonedDateTimeField" name="org.joda.time.DurationField getRangeDurationField()" map="A"/>
  <method class="org.joda.time.chrono.ZonedChronology$ZonedDateTimeField" name="int getMaximumShortTextLength(java.util.Locale)" map="B"/>
  <method class="org.joda.time.chrono.ZonedChronology$ZonedDateTimeField" name="int getMaximumValue(org.joda.time.ReadablePartial, int[])" map="A"/>
  <method class="org.joda.time.chrono.ZonedChronology$ZonedDateTimeField" name="boolean isLenient()" map="C"/>
  <method class="org.joda.time.chrono.ZonedChronology$ZonedDateTimeField" name="int getMaximumValue(org.joda.time.ReadablePartial)" map="B"/>
  <method class="org.joda.time.chrono.ZonedChronology$ZonedDateTimeField" name="boolean isLeap(long)" map="L"/>
  <method class="org.joda.time.chrono.ZonedChronology$ZonedDateTimeField" name="int get(long)" map="E"/>
  <method class="org.joda.time.chrono.ZonedChronology$ZonedDateTimeField" name="int getLeapAmount(long)" map="B"/>
  <method class="org.joda.time.chrono.ZonedChronology$ZonedDateTimeField" name="int getOffsetToAdd(long)" map="P"/>
  <method class="org.joda.time.chrono.ZonedChronology$ZonedDateTimeField" name="int getMaximumValue()" map="F"/>
  <method class="org.joda.time.chrono.ZonedChronology$ZonedDateTimeField" name="int getDifference(long, long)" map="B"/>
  <method class="org.joda.time.chrono.ZonedChronology$ZonedDateTimeField" name="long set(long, int)" map="C"/>
  <method class="org.joda.time.chrono.ZonedChronology$ZonedDateTimeField" name="long add(long, long)" map="A"/>
  <method class="org.joda.time.chrono.ZonedChronology$ZonedDateTimeField" name="java.lang.String getAsText(long, java.util.Locale)" map="A"/>
  <method class="org.joda.time.chrono.ZonedChronology$ZonedDateTimeField" name="long roundCeiling(long)" map="H"/>
  <method class="org.joda.time.chrono.ZonedChronology$ZonedDateTimeField" name="int getMaximumValue(long)" map="M"/>
  <method class="org.joda.time.chrono.ZonedChronology$ZonedDateTimeField" name="long set(long, java.lang.String, java.util.Locale)" map="A"/>
  <method class="org.joda.time.chrono.ZonedChronology$ZonedDateTimeField" name="java.lang.String getAsText(int, java.util.Locale)" map="A"/>
  <method class="org.joda.time.chrono.ZonedChronology$ZonedDateTimeField" name="java.lang.String getAsShortText(long, java.util.Locale)" map="B"/>
  <method class="org.joda.time.chrono.ZonedChronology$ZonedDateTimeField" name="long addWrapField(long, int)" map="A"/>
  <class name="org.joda.time.chrono.ZonedChronology$ZonedDurationField" map="_B"/>
  <field class="org.joda.time.chrono.ZonedChronology$ZonedDurationField" name="iZone" map="K"/>
  <field class="org.joda.time.chrono.ZonedChronology$ZonedDurationField" name="iTimeField" map="L"/>
  <field class="org.joda.time.chrono.ZonedChronology$ZonedDurationField" name="iField" map="M"/>
  <field class="org.joda.time.chrono.ZonedChronology$ZonedDurationField" name="serialVersionUID" map="N"/>
  <method class="org.joda.time.chrono.ZonedChronology$ZonedDurationField" name="long getMillis(long, long)" map="C"/>
  <method class="org.joda.time.chrono.ZonedChronology$ZonedDurationField" name="boolean isPrecise()" map="A"/>
  <method class="org.joda.time.chrono.ZonedChronology$ZonedDurationField" name="int getOffsetToAdd(long)" map="D"/>
  <method class="org.joda.time.chrono.ZonedChronology$ZonedDurationField" name="long add(long, int)" map="A"/>
  <method class="org.joda.time.chrono.ZonedChronology$ZonedDurationField" name="long getMillis(int, long)" map="A"/>
  <method class="org.joda.time.chrono.ZonedChronology$ZonedDurationField" name="long getUnitMillis()" map="E"/>
  <method class="org.joda.time.chrono.ZonedChronology$ZonedDurationField" name="long add(long, long)" map="E"/>
  <method class="org.joda.time.chrono.ZonedChronology$ZonedDurationField" name="long getValueAsLong(long, long)" map="A"/>
  <method class="org.joda.time.chrono.ZonedChronology$ZonedDurationField" name="int getOffsetFromLocalToSubtract(long)" map="E"/>
  <method class="org.joda.time.chrono.ZonedChronology$ZonedDurationField" name="long getDifferenceAsLong(long, long)" map="B"/>
  <method class="org.joda.time.chrono.ZonedChronology$ZonedDurationField" name="int getDifference(long, long)" map="D"/>
  <method class="org.joda.time.chrono.ZonedChronology$ZonedDurationField" name="int getValue(long, long)" map="F"/>
  <method class="org.joda.time.chrono.ZonedChronology$ZonedDurationField" name="long addOffset(long)" map="F"/>
  <class name="org.joda.time.chrono.ZonedChronology" map="M"/>
  <field class="org.joda.time.chrono.ZonedChronology" name="serialVersionUID" map="&#x0106;"/>
  <method class="org.joda.time.chrono.ZonedChronology" name="org.joda.time.DurationField convertField(org.joda.time.DurationField, java.util.HashMap)" map="A"/>
  <method class="org.joda.time.chrono.ZonedChronology" name="long localToUTC(long)" map="J"/>
  <method class="org.joda.time.chrono.ZonedChronology" name="org.joda.time.Chronology withUTC()" map="B"/>
  <method class="org.joda.time.chrono.ZonedChronology" name="int hashCode()" map="hashCode"/>
  <method class="org.joda.time.chrono.ZonedChronology" name="boolean equals(java.lang.Object)" map="equals"/>
  <method class="org.joda.time.chrono.ZonedChronology" name="org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)" map="B"/>
  <method class="org.joda.time.chrono.ZonedChronology" name="void assemble(org.joda.time.chrono.AssembledChronology$Fields)" map="A"/>
  <method class="org.joda.time.chrono.ZonedChronology" name="long getDateTimeMillis(int, int, int, int, int, int, int)" map="A"/>
  <method class="org.joda.time.chrono.ZonedChronology" name="org.joda.time.DateTimeZone getZone()" map="D"/>
  <method class="org.joda.time.chrono.ZonedChronology" name="boolean useTimeArithmetic(org.joda.time.DurationField)" map="A"/>
  <method class="org.joda.time.chrono.ZonedChronology" name="java.lang.String toString()" map="toString"/>
  <method class="org.joda.time.chrono.ZonedChronology" name="long getDateTimeMillis(int, int, int, int)" map="A"/>
  <method class="org.joda.time.chrono.ZonedChronology" name="org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField, java.util.HashMap)" map="A"/>
  <method class="org.joda.time.chrono.ZonedChronology" name="org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology, org.joda.time.DateTimeZone)" map="A"/>
  <method class="org.joda.time.chrono.ZonedChronology" name="long getDateTimeMillis(long, int, int, int, int)" map="A"/>
  <class name="org.joda.time.chrono.StrictChronology" map="N"/>
  <field class="org.joda.time.chrono.StrictChronology" name="iWithUTC" map="&#x0107;"/>
  <field class="org.joda.time.chrono.StrictChronology" name="serialVersionUID" map="&#x0108;"/>
  <method class="org.joda.time.chrono.StrictChronology" name="org.joda.time.Chronology withUTC()" map="B"/>
  <method class="org.joda.time.chrono.StrictChronology" name="boolean equals(java.lang.Object)" map="equals"/>
  <method class="org.joda.time.chrono.StrictChronology" name="org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)" map="B"/>
  <method class="org.joda.time.chrono.StrictChronology" name="int hashCode()" map="hashCode"/>
  <method class="org.joda.time.chrono.StrictChronology" name="org.joda.time.chrono.StrictChronology getInstance(org.joda.time.Chronology)" map="B"/>
  <method class="org.joda.time.chrono.StrictChronology" name="java.lang.String toString()" map="toString"/>
  <method class="org.joda.time.chrono.StrictChronology" name="org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)" map="B"/>
  <method class="org.joda.time.chrono.StrictChronology" name="void assemble(org.joda.time.chrono.AssembledChronology$Fields)" map="A"/>
  <class name="org.joda.time.chrono.LimitChronology$LimitDurationField" map="_A"/>
  <field class="org.joda.time.chrono.LimitChronology$LimitDurationField" name="this$0" map="this$0"/>
  <field class="org.joda.time.chrono.LimitChronology$LimitDurationField" name="serialVersionUID" map="T"/>
  <method class="org.joda.time.chrono.LimitChronology$LimitDurationField" name="int getValue(long, long)" map="F"/>
  <method class="org.joda.time.chrono.LimitChronology$LimitDurationField" name="long getDifferenceAsLong(long, long)" map="B"/>
  <method class="org.joda.time.chrono.LimitChronology$LimitDurationField" name="long add(long, int)" map="A"/>
  <method class="org.joda.time.chrono.LimitChronology$LimitDurationField" name="long getValueAsLong(long, long)" map="A"/>
  <method class="org.joda.time.chrono.LimitChronology$LimitDurationField" name="int getDifference(long, long)" map="D"/>
  <method class="org.joda.time.chrono.LimitChronology$LimitDurationField" name="long getMillis(long, long)" map="C"/>
  <method class="org.joda.time.chrono.LimitChronology$LimitDurationField" name="long add(long, long)" map="E"/>
  <method class="org.joda.time.chrono.LimitChronology$LimitDurationField" name="long getMillis(int, long)" map="A"/>
  <class name="org.joda.time.chrono.LimitChronology$LimitException" map="_B"/>
  <field class="org.joda.time.chrono.LimitChronology$LimitException" name="this$0" map="this$0"/>
  <field class="org.joda.time.chrono.LimitChronology$LimitException" name="iIsLow" map="A"/>
  <field class="org.joda.time.chrono.LimitChronology$LimitException" name="serialVersionUID" map="B"/>
  <method class="org.joda.time.chrono.LimitChronology$LimitException" name="java.lang.String getMessage()" map="getMessage"/>
  <method class="org.joda.time.chrono.LimitChronology$LimitException" name="java.lang.String toString()" map="toString"/>
  <class name="org.joda.time.chrono.LimitChronology$LimitDateTimeField" map="_C"/>
  <field class="org.joda.time.chrono.LimitChronology$LimitDateTimeField" name="this$0" map="this$0"/>
  <field class="org.joda.time.chrono.LimitChronology$LimitDateTimeField" name="iRangeDurationField" map="&#x00c9;"/>
  <field class="org.joda.time.chrono.LimitChronology$LimitDateTimeField" name="iLeapDurationField" map="&#x00ca;"/>
  <field class="org.joda.time.chrono.LimitChronology$LimitDateTimeField" name="iDurationField" map="&#x00cb;"/>
  <field class="org.joda.time.chrono.LimitChronology$LimitDateTimeField" name="serialVersionUID" map="&#x00cc;"/>
  <method class="org.joda.time.chrono.LimitChronology$LimitDateTimeField" name="long roundHalfFloor(long)" map="F"/>
  <method class="org.joda.time.chrono.LimitChronology$LimitDateTimeField" name="org.joda.time.DurationField getLeapDurationField()" map="B"/>
  <method class="org.joda.time.chrono.LimitChronology$LimitDateTimeField" name="long remainder(long)" map="D"/>
  <method class="org.joda.time.chrono.LimitChronology$LimitDateTimeField" name="long roundFloor(long)" map="A"/>
  <method class="org.joda.time.chrono.LimitChronology$LimitDateTimeField" name="long add(long, int)" map="B"/>
  <method class="org.joda.time.chrono.LimitChronology$LimitDateTimeField" name="long getDifferenceAsLong(long, long)" map="C"/>
  <method class="org.joda.time.chrono.LimitChronology$LimitDateTimeField" name="int getMaximumTextLength(java.util.Locale)" map="A"/>
  <method class="org.joda.time.chrono.LimitChronology$LimitDateTimeField" name="int getMinimumValue(long)" map="G"/>
  <method class="org.joda.time.chrono.LimitChronology$LimitDateTimeField" name="org.joda.time.DurationField getDurationField()" map="H"/>
  <method class="org.joda.time.chrono.LimitChronology$LimitDateTimeField" name="long roundHalfEven(long)" map="K"/>
  <method class="org.joda.time.chrono.LimitChronology$LimitDateTimeField" name="org.joda.time.DurationField getRangeDurationField()" map="A"/>
  <method class="org.joda.time.chrono.LimitChronology$LimitDateTimeField" name="int getMaximumShortTextLength(java.util.Locale)" map="B"/>
  <method class="org.joda.time.chrono.LimitChronology$LimitDateTimeField" name="long roundHalfCeiling(long)" map="I"/>
  <method class="org.joda.time.chrono.LimitChronology$LimitDateTimeField" name="boolean isLeap(long)" map="L"/>
  <method class="org.joda.time.chrono.LimitChronology$LimitDateTimeField" name="int get(long)" map="E"/>
  <method class="org.joda.time.chrono.LimitChronology$LimitDateTimeField" name="int getLeapAmount(long)" map="B"/>
  <method class="org.joda.time.chrono.LimitChronology$LimitDateTimeField" name="int getDifference(long, long)" map="B"/>
  <method class="org.joda.time.chrono.LimitChronology$LimitDateTimeField" name="long set(long, int)" map="C"/>
  <method class="org.joda.time.chrono.LimitChronology$LimitDateTimeField" name="long add(long, long)" map="A"/>
  <method class="org.joda.time.chrono.LimitChronology$LimitDateTimeField" name="java.lang.String getAsText(long, java.util.Locale)" map="A"/>
  <method class="org.joda.time.chrono.LimitChronology$LimitDateTimeField" name="long roundCeiling(long)" map="H"/>
  <method class="org.joda.time.chrono.LimitChronology$LimitDateTimeField" name="int getMaximumValue(long)" map="M"/>
  <method class="org.joda.time.chrono.LimitChronology$LimitDateTimeField" name="long set(long, java.lang.String, java.util.Locale)" map="A"/>
  <method class="org.joda.time.chrono.LimitChronology$LimitDateTimeField" name="java.lang.String getAsShortText(long, java.util.Locale)" map="B"/>
  <method class="org.joda.time.chrono.LimitChronology$LimitDateTimeField" name="long addWrapField(long, int)" map="A"/>
  <class name="org.joda.time.chrono.LimitChronology" map="O"/>
  <field class="org.joda.time.chrono.LimitChronology" name="iWithUTC" map="&#x0109;"/>
  <field class="org.joda.time.chrono.LimitChronology" name="iUpperLimit" map="&#x010a;"/>
  <field class="org.joda.time.chrono.LimitChronology" name="iLowerLimit" map="&#x010b;"/>
  <field class="org.joda.time.chrono.LimitChronology" name="serialVersionUID" map="&#x010c;"/>
  <method class="org.joda.time.chrono.LimitChronology" name="org.joda.time.DurationField convertField(org.joda.time.DurationField, java.util.HashMap)" map="B"/>
  <method class="org.joda.time.chrono.LimitChronology" name="org.joda.time.Chronology withUTC()" map="B"/>
  <method class="org.joda.time.chrono.LimitChronology" name="int hashCode()" map="hashCode"/>
  <method class="org.joda.time.chrono.LimitChronology" name="boolean equals(java.lang.Object)" map="equals"/>
  <method class="org.joda.time.chrono.LimitChronology" name="org.joda.time.DateTime getUpperLimit()" map="&#x00d2;"/>
  <method class="org.joda.time.chrono.LimitChronology" name="org.joda.time.DateTime getLowerLimit()" map="&#x00d3;"/>
  <method class="org.joda.time.chrono.LimitChronology" name="org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)" map="B"/>
  <method class="org.joda.time.chrono.LimitChronology" name="void checkLimits(long, java.lang.String)" map="A"/>
  <method class="org.joda.time.chrono.LimitChronology" name="void assemble(org.joda.time.chrono.AssembledChronology$Fields)" map="A"/>
  <method class="org.joda.time.chrono.LimitChronology" name="long getDateTimeMillis(int, int, int, int, int, int, int)" map="A"/>
  <method class="org.joda.time.chrono.LimitChronology" name="org.joda.time.chrono.LimitChronology getInstance(org.joda.time.Chronology, org.joda.time.ReadableDateTime, org.joda.time.ReadableDateTime)" map="A"/>
  <method class="org.joda.time.chrono.LimitChronology" name="java.lang.String toString()" map="toString"/>
  <method class="org.joda.time.chrono.LimitChronology" name="long getDateTimeMillis(int, int, int, int)" map="A"/>
  <method class="org.joda.time.chrono.LimitChronology" name="org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField, java.util.HashMap)" map="B"/>
  <method class="org.joda.time.chrono.LimitChronology" name="long getDateTimeMillis(long, int, int, int, int)" map="A"/>
  <class name="org.joda.time.chrono.GJMonthOfYearDateTimeField" map="P"/>
  <field class="org.joda.time.chrono.GJMonthOfYearDateTimeField" name="serialVersionUID" map="w"/>
  <method class="org.joda.time.chrono.GJMonthOfYearDateTimeField" name="java.lang.String getAsText(int, java.util.Locale)" map="A"/>
  <method class="org.joda.time.chrono.GJMonthOfYearDateTimeField" name="int getMaximumShortTextLength(java.util.Locale)" map="B"/>
  <method class="org.joda.time.chrono.GJMonthOfYearDateTimeField" name="int getMaximumTextLength(java.util.Locale)" map="A"/>
  <method class="org.joda.time.chrono.GJMonthOfYearDateTimeField" name="int convertText(java.lang.String, java.util.Locale)" map="A"/>
  <method class="org.joda.time.chrono.GJMonthOfYearDateTimeField" name="java.lang.String getAsShortText(int, java.util.Locale)" map="B"/>
  <class name="org.joda.time.chrono.BasicGJChronology" map="Q"/>
  <field class="org.joda.time.chrono.BasicGJChronology" name="FEB_29" map="&#x00d8;"/>
  <field class="org.joda.time.chrono.BasicGJChronology" name="MIN_TOTAL_MILLIS_BY_MONTH_ARRAY" map="&#x00d9;"/>
  <field class="org.joda.time.chrono.BasicGJChronology" name="MAX_DAYS_PER_MONTH_ARRAY" map="&#x00da;"/>
  <field class="org.joda.time.chrono.BasicGJChronology" name="MAX_TOTAL_MILLIS_BY_MONTH_ARRAY" map="&#x00db;"/>
  <field class="org.joda.time.chrono.BasicGJChronology" name="MIN_DAYS_PER_MONTH_ARRAY" map="&#x00dc;"/>
  <field class="org.joda.time.chrono.BasicGJChronology" name="serialVersionUID" map="&#x00dd;"/>
  <method class="org.joda.time.chrono.BasicGJChronology" name="long getTotalMillisByYearMonth(int, int)" map="A"/>
  <method class="org.joda.time.chrono.BasicGJChronology" name="int getDaysInMonthMaxForSet(long, int)" map="B"/>
  <method class="org.joda.time.chrono.BasicGJChronology" name="int getMonthOfYear(long, int)" map="F"/>
  <method class="org.joda.time.chrono.BasicGJChronology" name="long getYearDifference(long, long)" map="A"/>
  <method class="org.joda.time.chrono.BasicGJChronology" name="long setYear(long, int)" map="E"/>
  <method class="org.joda.time.chrono.BasicGJChronology" name="int getDaysInMonthMax(int)" map="B"/>
  <method class="org.joda.time.chrono.BasicGJChronology" name="int getDaysInYearMonth(int, int)" map="C"/>
  <class name="org.joda.time.chrono.IslamicChronology$LeapYearPatternType" map="_A"/>
  <field class="org.joda.time.chrono.IslamicChronology$LeapYearPatternType" name="index" map="A"/>
  <field class="org.joda.time.chrono.IslamicChronology$LeapYearPatternType" name="pattern" map="B"/>
  <field class="org.joda.time.chrono.IslamicChronology$LeapYearPatternType" name="serialVersionUID" map="C"/>
  <method class="org.joda.time.chrono.IslamicChronology$LeapYearPatternType" name="java.lang.Object readResolve()" map="A"/>
  <method class="org.joda.time.chrono.IslamicChronology$LeapYearPatternType" name="boolean isLeapYear(int)" map="A"/>
  <class name="org.joda.time.chrono.IslamicChronology" map="R"/>
  <field class="org.joda.time.chrono.IslamicChronology" name="MILLIS_YEAR_1" map="&#x00ed;"/>
  <field class="org.joda.time.chrono.IslamicChronology" name="CYCLE" map="&#x00ee;"/>
  <field class="org.joda.time.chrono.IslamicChronology" name="LEAP_YEAR_16_BASED" map="&#x00ef;"/>
  <field class="org.joda.time.chrono.IslamicChronology" name="MIN_YEAR" map="&#x00f0;"/>
  <field class="org.joda.time.chrono.IslamicChronology" name="MILLIS_PER_LONG_MONTH" map="&#x00f1;"/>
  <field class="org.joda.time.chrono.IslamicChronology" name="INSTANCE_UTC" map="&#x00f2;"/>
  <field class="org.joda.time.chrono.IslamicChronology" name="ERA_FIELD" map="&#x00f3;"/>
  <field class="org.joda.time.chrono.IslamicChronology" name="MILLIS_PER_YEAR" map="&#x00f4;"/>
  <field class="org.joda.time.chrono.IslamicChronology" name="LEAP_YEAR_INDIAN" map="&#x00f5;"/>
  <field class="org.joda.time.chrono.IslamicChronology" name="serialVersionUID" map="&#x00f6;"/>
  <field class="org.joda.time.chrono.IslamicChronology" name="MILLIS_PER_CYCLE" map="&#x00f8;"/>
  <field class="org.joda.time.chrono.IslamicChronology" name="iLeapYears" map="&#x00f9;"/>
  <field class="org.joda.time.chrono.IslamicChronology" name="MAX_YEAR" map="&#x00fa;"/>
  <field class="org.joda.time.chrono.IslamicChronology" name="SHORT_MONTH_LENGTH" map="&#x00fb;"/>
  <field class="org.joda.time.chrono.IslamicChronology" name="MILLIS_PER_MONTH_PAIR" map="&#x00fc;"/>
  <field class="org.joda.time.chrono.IslamicChronology" name="MONTH_PAIR_LENGTH" map="&#x00fd;"/>
  <field class="org.joda.time.chrono.IslamicChronology" name="MILLIS_PER_LONG_YEAR" map="&#x00fe;"/>
  <field class="org.joda.time.chrono.IslamicChronology" name="AH" map="&#x00ff;"/>
  <field class="org.joda.time.chrono.IslamicChronology" name="LEAP_YEAR_15_BASED" map="&#x0100;"/>
  <field class="org.joda.time.chrono.IslamicChronology" name="MILLIS_PER_MONTH" map="&#x0101;"/>
  <field class="org.joda.time.chrono.IslamicChronology" name="LONG_MONTH_LENGTH" map="&#x0102;"/>
  <field class="org.joda.time.chrono.IslamicChronology" name="cCache" map="&#x0103;"/>
  <field class="org.joda.time.chrono.IslamicChronology" name="MILLIS_PER_SHORT_YEAR" map="&#x0104;"/>
  <field class="org.joda.time.chrono.IslamicChronology" name="LEAP_YEAR_HABASH_AL_HASIB" map="&#x0105;"/>
  <method class="org.joda.time.chrono.IslamicChronology" name="int getDaysInMonthMax()" map="&#x00a5;"/>
  <method class="org.joda.time.chrono.IslamicChronology" name="org.joda.time.Chronology withUTC()" map="B"/>
  <method class="org.joda.time.chrono.IslamicChronology" name="org.joda.time.chrono.IslamicChronology getInstanceUTC()" map="&#x00ce;"/>
  <method class="org.joda.time.chrono.IslamicChronology" name="org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone)" map="L"/>
  <method class="org.joda.time.chrono.IslamicChronology" name="int getDaysInYearMonth(int, int)" map="C"/>
  <method class="org.joda.time.chrono.IslamicChronology" name="long getAverageMillisPerYear()" map="&#x00a4;"/>
  <method class="org.joda.time.chrono.IslamicChronology" name="int getMinYear()" map="&#x00aa;"/>
  <method class="org.joda.time.chrono.IslamicChronology" name="long calculateFirstDayOfYearMillis(int)" map="C"/>
  <method class="org.joda.time.chrono.IslamicChronology" name="int getDaysInYear(int)" map="A"/>
  <method class="org.joda.time.chrono.IslamicChronology" name="boolean isLeapYear(int)" map="H"/>
  <method class="org.joda.time.chrono.IslamicChronology" name="int getDaysInMonthMax(int)" map="B"/>
  <method class="org.joda.time.chrono.IslamicChronology" name="org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)" map="B"/>
  <method class="org.joda.time.chrono.IslamicChronology" name="long getApproxMillisAtEpochDividedByTwo()" map="&#x00a3;"/>
  <method class="org.joda.time.chrono.IslamicChronology" name="long getYearDifference(long, long)" map="A"/>
  <method class="org.joda.time.chrono.IslamicChronology" name="void assemble(org.joda.time.chrono.AssembledChronology$Fields)" map="A"/>
  <method class="org.joda.time.chrono.IslamicChronology" name="int hashCode()" map="hashCode"/>
  <method class="org.joda.time.chrono.IslamicChronology" name="java.lang.Object readResolve()" map="&#x00cf;"/>
  <method class="org.joda.time.chrono.IslamicChronology" name="long setYear(long, int)" map="E"/>
  <method class="org.joda.time.chrono.IslamicChronology" name="long getAverageMillisPerMonth()" map="&#x00c1;"/>
  <method class="org.joda.time.chrono.IslamicChronology" name="org.joda.time.chrono.IslamicChronology getInstance()" map="&#x00d0;"/>
  <method class="org.joda.time.chrono.IslamicChronology" name="int getMonthOfYear(long, int)" map="F"/>
  <method class="org.joda.time.chrono.IslamicChronology" name="org.joda.time.chrono.IslamicChronology$LeapYearPatternType getLeapYearPatternType()" map="&#x00d1;"/>
  <method class="org.joda.time.chrono.IslamicChronology" name="int getYear(long)" map="B"/>
  <method class="org.joda.time.chrono.IslamicChronology" name="int getDaysInYearMax()" map="z"/>
  <method class="org.joda.time.chrono.IslamicChronology" name="org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone, org.joda.time.chrono.IslamicChronology$LeapYearPatternType)" map="A"/>
  <method class="org.joda.time.chrono.IslamicChronology" name="int getMaxYear()" map="&#x00c0;"/>
  <method class="org.joda.time.chrono.IslamicChronology" name="int getDayOfMonth(long)" map="C"/>
  <method class="org.joda.time.chrono.IslamicChronology" name="long getAverageMillisPerYearDividedByTwo()" map="&#x00a2;"/>
  <method class="org.joda.time.chrono.IslamicChronology" name="long getTotalMillisByYearMonth(int, int)" map="A"/>
  <class name="org.joda.time.chrono.GJLocaleSymbols" map="S"/>
  <field class="org.joda.time.chrono.GJLocaleSymbols" name="iMonths" map="A"/>
  <field class="org.joda.time.chrono.GJLocaleSymbols" name="FAST_CACHE_SIZE" map="B"/>
  <field class="org.joda.time.chrono.GJLocaleSymbols" name="iMaxDayOfWeekLength" map="C"/>
  <field class="org.joda.time.chrono.GJLocaleSymbols" name="iHalfday" map="D"/>
  <field class="org.joda.time.chrono.GJLocaleSymbols" name="iMaxMonthLength" map="E"/>
  <field class="org.joda.time.chrono.GJLocaleSymbols" name="iMaxEraLength" map="F"/>
  <field class="org.joda.time.chrono.GJLocaleSymbols" name="iShortMonths" map="G"/>
  <field class="org.joda.time.chrono.GJLocaleSymbols" name="iLocale" map="H"/>
  <field class="org.joda.time.chrono.GJLocaleSymbols" name="iShortDaysOfWeek" map="I"/>
  <field class="org.joda.time.chrono.GJLocaleSymbols" name="iDaysOfWeek" map="J"/>
  <field class="org.joda.time.chrono.GJLocaleSymbols" name="iMaxShortMonthLength" map="K"/>
  <field class="org.joda.time.chrono.GJLocaleSymbols" name="iEras" map="L"/>
  <field class="org.joda.time.chrono.GJLocaleSymbols" name="iParseDaysOfWeek" map="M"/>
  <field class="org.joda.time.chrono.GJLocaleSymbols" name="cFastCache" map="N"/>
  <field class="org.joda.time.chrono.GJLocaleSymbols" name="iMaxHalfdayLength" map="O"/>
  <field class="org.joda.time.chrono.GJLocaleSymbols" name="iParseEras" map="P"/>
  <field class="org.joda.time.chrono.GJLocaleSymbols" name="iParseMonths" map="Q"/>
  <field class="org.joda.time.chrono.GJLocaleSymbols" name="cCache" map="R"/>
  <field class="org.joda.time.chrono.GJLocaleSymbols" name="iMaxShortDayOfWeekLength" map="S"/>
  <method class="org.joda.time.chrono.GJLocaleSymbols" name="int getDayOfWeekMaxShortTextLength()" map="A"/>
  <method class="org.joda.time.chrono.GJLocaleSymbols" name="java.lang.String eraValueToText(int)" map="A"/>
  <method class="org.joda.time.chrono.GJLocaleSymbols" name="void addNumerals(java.util.TreeMap, int, int, java.lang.Integer[])" map="A"/>
  <method class="org.joda.time.chrono.GJLocaleSymbols" name="int eraTextToValue(java.lang.String)" map="A"/>
  <method class="org.joda.time.chrono.GJLocaleSymbols" name="java.lang.String dayOfWeekValueToShortText(int)" map="B"/>
  <method class="org.joda.time.chrono.GJLocaleSymbols" name="int getMonthMaxShortTextLength()" map="B"/>
  <method class="org.joda.time.chrono.GJLocaleSymbols" name="int getMonthMaxTextLength()" map="C"/>
  <method class="org.joda.time.chrono.GJLocaleSymbols" name="int getHalfdayMaxTextLength()" map="D"/>
  <method class="org.joda.time.chrono.GJLocaleSymbols" name="int getEraMaxTextLength()" map="E"/>
  <method class="org.joda.time.chrono.GJLocaleSymbols" name="int getDayOfWeekMaxTextLength()" map="F"/>
  <method class="org.joda.time.chrono.GJLocaleSymbols" name="java.lang.String monthOfYearValueToText(int)" map="C"/>
  <method class="org.joda.time.chrono.GJLocaleSymbols" name="void addSymbols(java.util.TreeMap, java.lang.String[], java.lang.Integer[])" map="A"/>
  <method class="org.joda.time.chrono.GJLocaleSymbols" name="int dayOfWeekTextToValue(java.lang.String)" map="B"/>
  <method class="org.joda.time.chrono.GJLocaleSymbols" name="int monthOfYearTextToValue(java.lang.String)" map="C"/>
  <method class="org.joda.time.chrono.GJLocaleSymbols" name="int maxLength(java.lang.String[])" map="A"/>
  <method class="org.joda.time.chrono.GJLocaleSymbols" name="org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)" map="A"/>
  <method class="org.joda.time.chrono.GJLocaleSymbols" name="java.lang.String[] realignDaysOfWeek(java.lang.String[])" map="B"/>
  <method class="org.joda.time.chrono.GJLocaleSymbols" name="java.lang.String halfdayValueToText(int)" map="D"/>
  <method class="org.joda.time.chrono.GJLocaleSymbols" name="int halfdayTextToValue(java.lang.String)" map="D"/>
  <method class="org.joda.time.chrono.GJLocaleSymbols" name="java.lang.String monthOfYearValueToShortText(int)" map="E"/>
  <method class="org.joda.time.chrono.GJLocaleSymbols" name="java.lang.String[] realignMonths(java.lang.String[])" map="C"/>
  <method class="org.joda.time.chrono.GJLocaleSymbols" name="java.lang.String dayOfWeekValueToText(int)" map="F"/>
  <class name="org.joda.time.chrono.ISOYearOfEraDateTimeField" map="T"/>
  <field class="org.joda.time.chrono.ISOYearOfEraDateTimeField" name="INSTANCE" map="&#x00cd;"/>
  <field class="org.joda.time.chrono.ISOYearOfEraDateTimeField" name="serialVersionUID" map="&#x00ce;"/>
  <method class="org.joda.time.chrono.ISOYearOfEraDateTimeField" name="long roundCeiling(long)" map="H"/>
  <method class="org.joda.time.chrono.ISOYearOfEraDateTimeField" name="long add(long, int)" map="B"/>
  <method class="org.joda.time.chrono.ISOYearOfEraDateTimeField" name="int[] addWrapField(org.joda.time.ReadablePartial, int, int[], int)" map="C"/>
  <method class="org.joda.time.chrono.ISOYearOfEraDateTimeField" name="long set(long, int)" map="C"/>
  <method class="org.joda.time.chrono.ISOYearOfEraDateTimeField" name="long add(long, long)" map="A"/>
  <method class="org.joda.time.chrono.ISOYearOfEraDateTimeField" name="long remainder(long)" map="D"/>
  <method class="org.joda.time.chrono.ISOYearOfEraDateTimeField" name="long roundFloor(long)" map="A"/>
  <method class="org.joda.time.chrono.ISOYearOfEraDateTimeField" name="int getMaximumValue()" map="F"/>
  <method class="org.joda.time.chrono.ISOYearOfEraDateTimeField" name="long getDifferenceAsLong(long, long)" map="C"/>
  <method class="org.joda.time.chrono.ISOYearOfEraDateTimeField" name="int getDifference(long, long)" map="B"/>
  <method class="org.joda.time.chrono.ISOYearOfEraDateTimeField" name="int getMinimumValue()" map="D"/>
  <method class="org.joda.time.chrono.ISOYearOfEraDateTimeField" name="int get(long)" map="E"/>
  <method class="org.joda.time.chrono.ISOYearOfEraDateTimeField" name="long addWrapField(long, int)" map="A"/>
  <method class="org.joda.time.chrono.ISOYearOfEraDateTimeField" name="java.lang.Object readResolve()" map="_"/>
  <class name="org.joda.time.chrono.BasicMonthOfYearDateTimeField" map="U"/>
  <field class="org.joda.time.chrono.BasicMonthOfYearDateTimeField" name="iMax" map="r"/>
  <field class="org.joda.time.chrono.BasicMonthOfYearDateTimeField" name="MIN" map="s"/>
  <field class="org.joda.time.chrono.BasicMonthOfYearDateTimeField" name="iChronology" map="t"/>
  <field class="org.joda.time.chrono.BasicMonthOfYearDateTimeField" name="iLeapMonth" map="u"/>
  <field class="org.joda.time.chrono.BasicMonthOfYearDateTimeField" name="serialVersionUID" map="v"/>
  <method class="org.joda.time.chrono.BasicMonthOfYearDateTimeField" name="long add(long, int)" map="B"/>
  <method class="org.joda.time.chrono.BasicMonthOfYearDateTimeField" name="int getLeapAmount(long)" map="B"/>
  <method class="org.joda.time.chrono.BasicMonthOfYearDateTimeField" name="long set(long, int)" map="C"/>
  <method class="org.joda.time.chrono.BasicMonthOfYearDateTimeField" name="long add(long, long)" map="A"/>
  <method class="org.joda.time.chrono.BasicMonthOfYearDateTimeField" name="org.joda.time.DurationField getRangeDurationField()" map="A"/>
  <method class="org.joda.time.chrono.BasicMonthOfYearDateTimeField" name="long remainder(long)" map="D"/>
  <method class="org.joda.time.chrono.BasicMonthOfYearDateTimeField" name="long roundFloor(long)" map="A"/>
  <method class="org.joda.time.chrono.BasicMonthOfYearDateTimeField" name="boolean isLeap(long)" map="L"/>
  <method class="org.joda.time.chrono.BasicMonthOfYearDateTimeField" name="int getMaximumValue()" map="F"/>
  <method class="org.joda.time.chrono.BasicMonthOfYearDateTimeField" name="long getDifferenceAsLong(long, long)" map="C"/>
  <method class="org.joda.time.chrono.BasicMonthOfYearDateTimeField" name="boolean isLenient()" map="C"/>
  <method class="org.joda.time.chrono.BasicMonthOfYearDateTimeField" name="int getMinimumValue()" map="D"/>
  <method class="org.joda.time.chrono.BasicMonthOfYearDateTimeField" name="int get(long)" map="E"/>
  <method class="org.joda.time.chrono.BasicMonthOfYearDateTimeField" name="long addWrapField(long, int)" map="A"/>
  <method class="org.joda.time.chrono.BasicMonthOfYearDateTimeField" name="int[] add(org.joda.time.ReadablePartial, int, int[], int)" map="D"/>
  <method class="org.joda.time.chrono.BasicMonthOfYearDateTimeField" name="java.lang.Object readResolve()" map="R"/>
  <method class="org.joda.time.chrono.BasicMonthOfYearDateTimeField" name="org.joda.time.DurationField getLeapDurationField()" map="B"/>
  <class name="org.joda.time.chrono.BaseChronology" map="V"/>
  <field class="org.joda.time.chrono.BaseChronology" name="serialVersionUID" map="A"/>
  <method class="org.joda.time.chrono.BaseChronology" name="org.joda.time.DateTimeField dayOfYear()" map="A"/>
  <method class="org.joda.time.chrono.BaseChronology" name="long getDateTimeMillis(int, int, int, int, int, int, int)" map="A"/>
  <method class="org.joda.time.chrono.BaseChronology" name="org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)" map="B"/>
  <method class="org.joda.time.chrono.BaseChronology" name="org.joda.time.Chronology withUTC()" map="B"/>
  <method class="org.joda.time.chrono.BaseChronology" name="org.joda.time.DateTimeField secondOfMinute()" map="C"/>
  <method class="org.joda.time.chrono.BaseChronology" name="org.joda.time.DateTimeZone getZone()" map="D"/>
  <method class="org.joda.time.chrono.BaseChronology" name="org.joda.time.DateTimeField hourOfHalfday()" map="E"/>
  <method class="org.joda.time.chrono.BaseChronology" name="org.joda.time.DateTimeField monthOfYear()" map="G"/>
  <method class="org.joda.time.chrono.BaseChronology" name="org.joda.time.DurationField minutes()" map="H"/>
  <method class="org.joda.time.chrono.BaseChronology" name="org.joda.time.DateTimeField minuteOfHour()" map="I"/>
  <method class="org.joda.time.chrono.BaseChronology" name="org.joda.time.DateTimeField millisOfDay()" map="J"/>
  <method class="org.joda.time.chrono.BaseChronology" name="org.joda.time.DateTimeField weekyearOfCentury()" map="L"/>
  <method class="org.joda.time.chrono.BaseChronology" name="org.joda.time.DateTimeField yearOfCentury()" map="M"/>
  <method class="org.joda.time.chrono.BaseChronology" name="long getDateTimeMillis(int, int, int, int)" map="A"/>
  <method class="org.joda.time.chrono.BaseChronology" name="org.joda.time.DurationField halfdays()" map="N"/>
  <method class="org.joda.time.chrono.BaseChronology" name="org.joda.time.DurationField eras()" map="O"/>
  <method class="org.joda.time.chrono.BaseChronology" name="long set(org.joda.time.ReadablePartial, long)" map="A"/>
  <method class="org.joda.time.chrono.BaseChronology" name="org.joda.time.DurationField hours()" map="Q"/>
  <method class="org.joda.time.chrono.BaseChronology" name="long add(org.joda.time.ReadablePeriod, long, int)" map="A"/>
  <method class="org.joda.time.chrono.BaseChronology" name="org.joda.time.DateTimeField clockhourOfDay()" map="S"/>
  <method class="org.joda.time.chrono.BaseChronology" name="java.lang.String toString()" map="toString"/>
  <method class="org.joda.time.chrono.BaseChronology" name="org.joda.time.DurationField centuries()" map="U"/>
  <method class="org.joda.time.chrono.BaseChronology" name="org.joda.time.DateTimeField hourOfDay()" map="V"/>
  <method class="org.joda.time.chrono.BaseChronology" name="org.joda.time.DateTimeField yearOfEra()" map="W"/>
  <method class="org.joda.time.chrono.BaseChronology" name="long add(long, long, int)" map="A"/>
  <method class="org.joda.time.chrono.BaseChronology" name="org.joda.time.DateTimeField centuryOfEra()" map="X"/>
  <method class="org.joda.time.chrono.BaseChronology" name="org.joda.time.DateTimeField dayOfMonth()" map="Y"/>
  <method class="org.joda.time.chrono.BaseChronology" name="org.joda.time.DateTimeField weekOfWeekyear()" map="_"/>
  <method class="org.joda.time.chrono.BaseChronology" name="void validate(org.joda.time.ReadablePartial, int[])" map="A"/>
  <method class="org.joda.time.chrono.BaseChronology" name="org.joda.time.DurationField months()" map="a"/>
  <method class="org.joda.time.chrono.BaseChronology" name="org.joda.time.DurationField years()" map="b"/>
  <method class="org.joda.time.chrono.BaseChronology" name="org.joda.time.DateTimeField clockhourOfHalfday()" map="c"/>
  <method class="org.joda.time.chrono.BaseChronology" name="long getDateTimeMillis(long, int, int, int, int)" map="A"/>
  <method class="org.joda.time.chrono.BaseChronology" name="org.joda.time.DateTimeField dayOfWeek()" map="e"/>
  <method class="org.joda.time.chrono.BaseChronology" name="org.joda.time.DurationField weeks()" map="d"/>
  <method class="org.joda.time.chrono.BaseChronology" name="org.joda.time.DurationField seconds()" map="g"/>
  <method class="org.joda.time.chrono.BaseChronology" name="org.joda.time.DurationField days()" map="f"/>
  <method class="org.joda.time.chrono.BaseChronology" name="int[] get(org.joda.time.ReadablePartial, long)" map="B"/>
  <method class="org.joda.time.chrono.BaseChronology" name="org.joda.time.DateTimeField era()" map="h"/>
  <method class="org.joda.time.chrono.BaseChronology" name="org.joda.time.DateTimeField millisOfSecond()" map="i"/>
  <method class="org.joda.time.chrono.BaseChronology" name="org.joda.time.DateTimeField year()" map="l"/>
  <method class="org.joda.time.chrono.BaseChronology" name="org.joda.time.DateTimeField secondOfDay()" map="m"/>
  <method class="org.joda.time.chrono.BaseChronology" name="org.joda.time.DateTimeField weekyear()" map="p"/>
  <method class="org.joda.time.chrono.BaseChronology" name="int[] get(org.joda.time.ReadablePeriod, long, long)" map="A"/>
  <method class="org.joda.time.chrono.BaseChronology" name="org.joda.time.DurationField weekyears()" map="q"/>
  <method class="org.joda.time.chrono.BaseChronology" name="int[] get(org.joda.time.ReadablePeriod, long)" map="A"/>
  <method class="org.joda.time.chrono.BaseChronology" name="org.joda.time.DurationField millis()" map="s"/>
  <method class="org.joda.time.chrono.BaseChronology" name="org.joda.time.DateTimeField minuteOfDay()" map="u"/>
  <method class="org.joda.time.chrono.BaseChronology" name="org.joda.time.DateTimeField halfdayOfDay()" map="v"/>
  <class name="org.joda.time.chrono.AssembledChronology$Fields" map="_A"/>
  <field class="org.joda.time.chrono.AssembledChronology$Fields" name="millisOfSecond" map="A"/>
  <field class="org.joda.time.chrono.AssembledChronology$Fields" name="minuteOfHour" map="B"/>
  <field class="org.joda.time.chrono.AssembledChronology$Fields" name="millisOfDay" map="C"/>
  <field class="org.joda.time.chrono.AssembledChronology$Fields" name="clockhourOfHalfday" map="D"/>
  <field class="org.joda.time.chrono.AssembledChronology$Fields" name="halfdays" map="E"/>
  <field class="org.joda.time.chrono.AssembledChronology$Fields" name="weekyearOfCentury" map="F"/>
  <field class="org.joda.time.chrono.AssembledChronology$Fields" name="yearOfEra" map="G"/>
  <field class="org.joda.time.chrono.AssembledChronology$Fields" name="weekOfWeekyear" map="H"/>
  <field class="org.joda.time.chrono.AssembledChronology$Fields" name="weekyear" map="I"/>
  <field class="org.joda.time.chrono.AssembledChronology$Fields" name="millis" map="J"/>
  <field class="org.joda.time.chrono.AssembledChronology$Fields" name="days" map="K"/>
  <field class="org.joda.time.chrono.AssembledChronology$Fields" name="weeks" map="L"/>
  <field class="org.joda.time.chrono.AssembledChronology$Fields" name="months" map="M"/>
  <field class="org.joda.time.chrono.AssembledChronology$Fields" name="centuries" map="N"/>
  <field class="org.joda.time.chrono.AssembledChronology$Fields" name="dayOfYear" map="O"/>
  <field class="org.joda.time.chrono.AssembledChronology$Fields" name="year" map="P"/>
  <field class="org.joda.time.chrono.AssembledChronology$Fields" name="secondOfDay" map="Q"/>
  <field class="org.joda.time.chrono.AssembledChronology$Fields" name="seconds" map="R"/>
  <field class="org.joda.time.chrono.AssembledChronology$Fields" name="dayOfMonth" map="S"/>
  <field class="org.joda.time.chrono.AssembledChronology$Fields" name="centuryOfEra" map="T"/>
  <field class="org.joda.time.chrono.AssembledChronology$Fields" name="minuteOfDay" map="U"/>
  <field class="org.joda.time.chrono.AssembledChronology$Fields" name="era" map="V"/>
  <field class="org.joda.time.chrono.AssembledChronology$Fields" name="monthOfYear" map="W"/>
  <field class="org.joda.time.chrono.AssembledChronology$Fields" name="dayOfWeek" map="X"/>
  <field class="org.joda.time.chrono.AssembledChronology$Fields" name="clockhourOfDay" map="Y"/>
  <field class="org.joda.time.chrono.AssembledChronology$Fields" name="eras" map="Z"/>
  <field class="org.joda.time.chrono.AssembledChronology$Fields" name="years" map="_"/>
  <field class="org.joda.time.chrono.AssembledChronology$Fields" name="minutes" map="a"/>
  <field class="org.joda.time.chrono.AssembledChronology$Fields" name="hourOfHalfday" map="b"/>
  <field class="org.joda.time.chrono.AssembledChronology$Fields" name="yearOfCentury" map="c"/>
  <field class="org.joda.time.chrono.AssembledChronology$Fields" name="hours" map="d"/>
  <field class="org.joda.time.chrono.AssembledChronology$Fields" name="halfdayOfDay" map="e"/>
  <field class="org.joda.time.chrono.AssembledChronology$Fields" name="hourOfDay" map="f"/>
  <field class="org.joda.time.chrono.AssembledChronology$Fields" name="weekyears" map="g"/>
  <field class="org.joda.time.chrono.AssembledChronology$Fields" name="secondOfMinute" map="h"/>
  <method class="org.joda.time.chrono.AssembledChronology$Fields" name="boolean isSupported(org.joda.time.DurationField)" map="A"/>
  <method class="org.joda.time.chrono.AssembledChronology$Fields" name="void copyFieldsFrom(org.joda.time.Chronology)" map="A"/>
  <method class="org.joda.time.chrono.AssembledChronology$Fields" name="boolean isSupported(org.joda.time.DateTimeField)" map="A"/>
  <class name="org.joda.time.chrono.AssembledChronology" map="W"/>
  <field class="org.joda.time.chrono.AssembledChronology" name="iCenturyOfEra" map="B"/>
  <field class="org.joda.time.chrono.AssembledChronology" name="iWeeks" map="C"/>
  <field class="org.joda.time.chrono.AssembledChronology" name="iBaseFlags" map="D"/>
  <field class="org.joda.time.chrono.AssembledChronology" name="iHours" map="E"/>
  <field class="org.joda.time.chrono.AssembledChronology" name="iParam" map="F"/>
  <field class="org.joda.time.chrono.AssembledChronology" name="iMinuteOfHour" map="G"/>
  <field class="org.joda.time.chrono.AssembledChronology" name="iWeekyearOfCentury" map="H"/>
  <field class="org.joda.time.chrono.AssembledChronology" name="serialVersionUID" map="I"/>
  <field class="org.joda.time.chrono.AssembledChronology" name="iMonths" map="J"/>
  <field class="org.joda.time.chrono.AssembledChronology" name="iYear" map="K"/>
  <field class="org.joda.time.chrono.AssembledChronology" name="iDays" map="L"/>
  <field class="org.joda.time.chrono.AssembledChronology" name="iMonthOfYear" map="M"/>
  <field class="org.joda.time.chrono.AssembledChronology" name="iHourOfHalfday" map="N"/>
  <field class="org.joda.time.chrono.AssembledChronology" name="iDayOfMonth" map="O"/>
  <field class="org.joda.time.chrono.AssembledChronology" name="iSeconds" map="P"/>
  <field class="org.joda.time.chrono.AssembledChronology" name="iDayOfWeek" map="Q"/>
  <field class="org.joda.time.chrono.AssembledChronology" name="iDayOfYear" map="R"/>
  <field class="org.joda.time.chrono.AssembledChronology" name="iWeekOfWeekyear" map="S"/>
  <field class="org.joda.time.chrono.AssembledChronology" name="iClockhourOfHalfday" map="T"/>
  <field class="org.joda.time.chrono.AssembledChronology" name="iMillisOfDay" map="U"/>
  <field class="org.joda.time.chrono.AssembledChronology" name="iEras" map="V"/>
  <field class="org.joda.time.chrono.AssembledChronology" name="iBase" map="W"/>
  <field class="org.joda.time.chrono.AssembledChronology" name="iHalfdays" map="X"/>
  <field class="org.joda.time.chrono.AssembledChronology" name="iHalfdayOfDay" map="Y"/>
  <field class="org.joda.time.chrono.AssembledChronology" name="iMillisOfSecond" map="Z"/>
  <field class="org.joda.time.chrono.AssembledChronology" name="iMillis" map="_"/>
  <field class="org.joda.time.chrono.AssembledChronology" name="iClockhourOfDay" map="a"/>
  <field class="org.joda.time.chrono.AssembledChronology" name="iYears" map="b"/>
  <field class="org.joda.time.chrono.AssembledChronology" name="iHourOfDay" map="c"/>
  <field class="org.joda.time.chrono.AssembledChronology" name="iYearOfEra" map="d"/>
  <field class="org.joda.time.chrono.AssembledChronology" name="iWeekyear" map="e"/>
  <field class="org.joda.time.chrono.AssembledChronology" name="iYearOfCentury" map="f"/>
  <field class="org.joda.time.chrono.AssembledChronology" name="iCenturies" map="g"/>
  <field class="org.joda.time.chrono.AssembledChronology" name="iMinuteOfDay" map="h"/>
  <field class="org.joda.time.chrono.AssembledChronology" name="iEra" map="i"/>
  <field class="org.joda.time.chrono.AssembledChronology" name="iMinutes" map="j"/>
  <field class="org.joda.time.chrono.AssembledChronology" name="iSecondOfMinute" map="k"/>
  <field class="org.joda.time.chrono.AssembledChronology" name="iWeekyears" map="l"/>
  <field class="org.joda.time.chrono.AssembledChronology" name="iSecondOfDay" map="m"/>
  <method class="org.joda.time.chrono.AssembledChronology" name="org.joda.time.DateTimeField dayOfYear()" map="A"/>
  <method class="org.joda.time.chrono.AssembledChronology" name="long getDateTimeMillis(int, int, int, int, int, int, int)" map="A"/>
  <method class="org.joda.time.chrono.AssembledChronology" name="void setFields()" map="w"/>
  <method class="org.joda.time.chrono.AssembledChronology" name="org.joda.time.DateTimeField secondOfMinute()" map="C"/>
  <method class="org.joda.time.chrono.AssembledChronology" name="org.joda.time.DateTimeZone getZone()" map="D"/>
  <method class="org.joda.time.chrono.AssembledChronology" name="org.joda.time.DateTimeField hourOfHalfday()" map="E"/>
  <method class="org.joda.time.chrono.AssembledChronology" name="void readObject(java.io.ObjectInputStream)" map="A"/>
  <method class="org.joda.time.chrono.AssembledChronology" name="org.joda.time.DateTimeField monthOfYear()" map="G"/>
  <method class="org.joda.time.chrono.AssembledChronology" name="org.joda.time.DurationField minutes()" map="H"/>
  <method class="org.joda.time.chrono.AssembledChronology" name="org.joda.time.DateTimeField minuteOfHour()" map="I"/>
  <method class="org.joda.time.chrono.AssembledChronology" name="org.joda.time.DateTimeField millisOfDay()" map="J"/>
  <method class="org.joda.time.chrono.AssembledChronology" name="org.joda.time.DateTimeField weekyearOfCentury()" map="L"/>
  <method class="org.joda.time.chrono.AssembledChronology" name="long getDateTimeMillis(int, int, int, int)" map="A"/>
  <method class="org.joda.time.chrono.AssembledChronology" name="org.joda.time.DurationField halfdays()" map="N"/>
  <method class="org.joda.time.chrono.AssembledChronology" name="org.joda.time.DateTimeField yearOfCentury()" map="M"/>
  <method class="org.joda.time.chrono.AssembledChronology" name="org.joda.time.DurationField eras()" map="O"/>
  <method class="org.joda.time.chrono.AssembledChronology" name="org.joda.time.DurationField hours()" map="Q"/>
  <method class="org.joda.time.chrono.AssembledChronology" name="org.joda.time.DateTimeField clockhourOfDay()" map="S"/>
  <method class="org.joda.time.chrono.AssembledChronology" name="org.joda.time.DurationField centuries()" map="U"/>
  <method class="org.joda.time.chrono.AssembledChronology" name="org.joda.time.DateTimeField hourOfDay()" map="V"/>
  <method class="org.joda.time.chrono.AssembledChronology" name="org.joda.time.DateTimeField yearOfEra()" map="W"/>
  <method class="org.joda.time.chrono.AssembledChronology" name="org.joda.time.DateTimeField centuryOfEra()" map="X"/>
  <method class="org.joda.time.chrono.AssembledChronology" name="org.joda.time.DateTimeField dayOfMonth()" map="Y"/>
  <method class="org.joda.time.chrono.AssembledChronology" name="org.joda.time.DateTimeField weekOfWeekyear()" map="_"/>
  <method class="org.joda.time.chrono.AssembledChronology" name="org.joda.time.DurationField months()" map="a"/>
  <method class="org.joda.time.chrono.AssembledChronology" name="org.joda.time.DurationField years()" map="b"/>
  <method class="org.joda.time.chrono.AssembledChronology" name="org.joda.time.DateTimeField clockhourOfHalfday()" map="c"/>
  <method class="org.joda.time.chrono.AssembledChronology" name="long getDateTimeMillis(long, int, int, int, int)" map="A"/>
  <method class="org.joda.time.chrono.AssembledChronology" name="java.lang.Object getParam()" map="x"/>
  <method class="org.joda.time.chrono.AssembledChronology" name="org.joda.time.DateTimeField dayOfWeek()" map="e"/>
  <method class="org.joda.time.chrono.AssembledChronology" name="org.joda.time.DurationField weeks()" map="d"/>
  <method class="org.joda.time.chrono.AssembledChronology" name="org.joda.time.DurationField seconds()" map="g"/>
  <method class="org.joda.time.chrono.AssembledChronology" name="org.joda.time.DurationField days()" map="f"/>
  <method class="org.joda.time.chrono.AssembledChronology" name="org.joda.time.DateTimeField era()" map="h"/>
  <method class="org.joda.time.chrono.AssembledChronology" name="org.joda.time.DateTimeField millisOfSecond()" map="i"/>
  <method class="org.joda.time.chrono.AssembledChronology" name="org.joda.time.DateTimeField year()" map="l"/>
  <method class="org.joda.time.chrono.AssembledChronology" name="org.joda.time.DateTimeField secondOfDay()" map="m"/>
  <method class="org.joda.time.chrono.AssembledChronology" name="org.joda.time.DateTimeField weekyear()" map="p"/>
  <method class="org.joda.time.chrono.AssembledChronology" name="org.joda.time.Chronology getBase()" map="y"/>
  <method class="org.joda.time.chrono.AssembledChronology" name="void assemble(org.joda.time.chrono.AssembledChronology$Fields)" map="A"/>
  <method class="org.joda.time.chrono.AssembledChronology" name="org.joda.time.DurationField weekyears()" map="q"/>
  <method class="org.joda.time.chrono.AssembledChronology" name="org.joda.time.DurationField millis()" map="s"/>
  <method class="org.joda.time.chrono.AssembledChronology" name="org.joda.time.DateTimeField minuteOfDay()" map="u"/>
  <method class="org.joda.time.chrono.AssembledChronology" name="org.joda.time.DateTimeField halfdayOfDay()" map="v"/>
  <class name="org.joda.time.chrono.BasicDayOfYearDateTimeField" map="X"/>
  <field class="org.joda.time.chrono.BasicDayOfYearDateTimeField" name="iChronology" map="&#x00ba;"/>
  <field class="org.joda.time.chrono.BasicDayOfYearDateTimeField" name="serialVersionUID" map="&#x00c0;"/>
  <method class="org.joda.time.chrono.BasicDayOfYearDateTimeField" name="int getMaximumValue(org.joda.time.ReadablePartial)" map="B"/>
  <method class="org.joda.time.chrono.BasicDayOfYearDateTimeField" name="org.joda.time.DurationField getRangeDurationField()" map="A"/>
  <method class="org.joda.time.chrono.BasicDayOfYearDateTimeField" name="int getMaximumValue()" map="F"/>
  <method class="org.joda.time.chrono.BasicDayOfYearDateTimeField" name="int getMaximumValueForSet(long, int)" map="D"/>
  <method class="org.joda.time.chrono.BasicDayOfYearDateTimeField" name="int getMaximumValue(org.joda.time.ReadablePartial, int[])" map="A"/>
  <method class="org.joda.time.chrono.BasicDayOfYearDateTimeField" name="int getMaximumValue(long)" map="M"/>
  <method class="org.joda.time.chrono.BasicDayOfYearDateTimeField" name="int getMinimumValue()" map="D"/>
  <method class="org.joda.time.chrono.BasicDayOfYearDateTimeField" name="int get(long)" map="E"/>
  <method class="org.joda.time.chrono.BasicDayOfYearDateTimeField" name="java.lang.Object readResolve()" map="W"/>
  <class name="org.joda.time.chrono.GJEraDateTimeField" map="Y"/>
  <field class="org.joda.time.chrono.GJEraDateTimeField" name="iChronology" map="j"/>
  <field class="org.joda.time.chrono.GJEraDateTimeField" name="serialVersionUID" map="k"/>
  <method class="org.joda.time.chrono.GJEraDateTimeField" name="long roundCeiling(long)" map="H"/>
  <method class="org.joda.time.chrono.GJEraDateTimeField" name="org.joda.time.DurationField getDurationField()" map="H"/>
  <method class="org.joda.time.chrono.GJEraDateTimeField" name="long set(long, int)" map="C"/>
  <method class="org.joda.time.chrono.GJEraDateTimeField" name="org.joda.time.DurationField getRangeDurationField()" map="A"/>
  <method class="org.joda.time.chrono.GJEraDateTimeField" name="java.lang.String getAsText(int, java.util.Locale)" map="A"/>
  <method class="org.joda.time.chrono.GJEraDateTimeField" name="long roundFloor(long)" map="A"/>
  <method class="org.joda.time.chrono.GJEraDateTimeField" name="int getMaximumValue()" map="F"/>
  <method class="org.joda.time.chrono.GJEraDateTimeField" name="long roundHalfCeiling(long)" map="I"/>
  <method class="org.joda.time.chrono.GJEraDateTimeField" name="boolean isLenient()" map="C"/>
  <method class="org.joda.time.chrono.GJEraDateTimeField" name="long roundHalfEven(long)" map="K"/>
  <method class="org.joda.time.chrono.GJEraDateTimeField" name="int getMinimumValue()" map="D"/>
  <method class="org.joda.time.chrono.GJEraDateTimeField" name="int get(long)" map="E"/>
  <method class="org.joda.time.chrono.GJEraDateTimeField" name="java.lang.Object readResolve()" map="O"/>
  <method class="org.joda.time.chrono.GJEraDateTimeField" name="long set(long, java.lang.String, java.util.Locale)" map="A"/>
  <method class="org.joda.time.chrono.GJEraDateTimeField" name="int getMaximumTextLength(java.util.Locale)" map="A"/>
  <method class="org.joda.time.chrono.GJEraDateTimeField" name="long roundHalfFloor(long)" map="F"/>
  <class name="org.joda.time.chrono.CopticChronology" map="Z"/>
  <field class="org.joda.time.chrono.CopticChronology" name="INSTANCE_UTC" map="&#x00d0;"/>
  <field class="org.joda.time.chrono.CopticChronology" name="AM" map="&#x00d1;"/>
  <field class="org.joda.time.chrono.CopticChronology" name="MIN_YEAR" map="&#x00d2;"/>
  <field class="org.joda.time.chrono.CopticChronology" name="ERA_FIELD" map="&#x00d3;"/>
  <field class="org.joda.time.chrono.CopticChronology" name="cCache" map="&#x00d4;"/>
  <field class="org.joda.time.chrono.CopticChronology" name="MAX_YEAR" map="&#x00d5;"/>
  <field class="org.joda.time.chrono.CopticChronology" name="serialVersionUID" map="&#x00d6;"/>
  <method class="org.joda.time.chrono.CopticChronology" name="org.joda.time.chrono.CopticChronology getInstance()" map="&#x00c5;"/>
  <method class="org.joda.time.chrono.CopticChronology" name="int getMinYear()" map="&#x00aa;"/>
  <method class="org.joda.time.chrono.CopticChronology" name="org.joda.time.Chronology withUTC()" map="B"/>
  <method class="org.joda.time.chrono.CopticChronology" name="org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)" map="B"/>
  <method class="org.joda.time.chrono.CopticChronology" name="org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone)" map="I"/>
  <method class="org.joda.time.chrono.CopticChronology" name="long getApproxMillisAtEpochDividedByTwo()" map="&#x00a3;"/>
  <method class="org.joda.time.chrono.CopticChronology" name="void assemble(org.joda.time.chrono.AssembledChronology$Fields)" map="A"/>
  <method class="org.joda.time.chrono.CopticChronology" name="org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone, int)" map="B"/>
  <method class="org.joda.time.chrono.CopticChronology" name="long calculateFirstDayOfYearMillis(int)" map="C"/>
  <method class="org.joda.time.chrono.CopticChronology" name="org.joda.time.chrono.CopticChronology getInstanceUTC()" map="&#x00c6;"/>
  <method class="org.joda.time.chrono.CopticChronology" name="java.lang.Object readResolve()" map="&#x00c7;"/>
  <method class="org.joda.time.chrono.CopticChronology" name="int getMaxYear()" map="&#x00c0;"/>
  <class name="org.joda.time.chrono.ISOChronology$Stub" map="_A"/>
  <field class="org.joda.time.chrono.ISOChronology$Stub" name="iZone" map="A"/>
  <field class="org.joda.time.chrono.ISOChronology$Stub" name="serialVersionUID" map="B"/>
  <method class="org.joda.time.chrono.ISOChronology$Stub" name="void writeObject(java.io.ObjectOutputStream)" map="A"/>
  <method class="org.joda.time.chrono.ISOChronology$Stub" name="java.lang.Object readResolve()" map="A"/>
  <method class="org.joda.time.chrono.ISOChronology$Stub" name="void readObject(java.io.ObjectInputStream)" map="A"/>
  <class name="org.joda.time.chrono.ISOChronology" map="_"/>
  <field class="org.joda.time.chrono.ISOChronology" name="cFastCache" map="&#x010d;"/>
  <field class="org.joda.time.chrono.ISOChronology" name="INSTANCE_UTC" map="&#x010e;"/>
  <field class="org.joda.time.chrono.ISOChronology" name="cCache" map="&#x010f;"/>
  <field class="org.joda.time.chrono.ISOChronology" name="FAST_CACHE_SIZE" map="&#x0110;"/>
  <field class="org.joda.time.chrono.ISOChronology" name="serialVersionUID" map="&#x0111;"/>
  <method class="org.joda.time.chrono.ISOChronology" name="java.lang.Object writeReplace()" map="&#x00d4;"/>
  <method class="org.joda.time.chrono.ISOChronology" name="org.joda.time.Chronology withUTC()" map="B"/>
  <method class="org.joda.time.chrono.ISOChronology" name="int hashCode()" map="hashCode"/>
  <method class="org.joda.time.chrono.ISOChronology" name="boolean equals(java.lang.Object)" map="equals"/>
  <method class="org.joda.time.chrono.ISOChronology" name="org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)" map="B"/>
  <method class="org.joda.time.chrono.ISOChronology" name="org.joda.time.chrono.ISOChronology getInstance()" map="&#x00d5;"/>
  <method class="org.joda.time.chrono.ISOChronology" name="org.joda.time.chrono.ISOChronology getInstanceUTC()" map="&#x00d6;"/>
  <method class="org.joda.time.chrono.ISOChronology" name="void assemble(org.joda.time.chrono.AssembledChronology$Fields)" map="A"/>
  <method class="org.joda.time.chrono.ISOChronology" name="java.lang.String toString()" map="toString"/>
  <method class="org.joda.time.chrono.ISOChronology" name="org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)" map="M"/>
  <class name="org.joda.time.chrono.BasicYearDateTimeField" map="a"/>
  <field class="org.joda.time.chrono.BasicYearDateTimeField" name="iChronology" map="x"/>
  <field class="org.joda.time.chrono.BasicYearDateTimeField" name="serialVersionUID" map="y"/>
  <method class="org.joda.time.chrono.BasicYearDateTimeField" name="long roundCeiling(long)" map="H"/>
  <method class="org.joda.time.chrono.BasicYearDateTimeField" name="long add(long, int)" map="B"/>
  <method class="org.joda.time.chrono.BasicYearDateTimeField" name="int getLeapAmount(long)" map="B"/>
  <method class="org.joda.time.chrono.BasicYearDateTimeField" name="long set(long, int)" map="C"/>
  <method class="org.joda.time.chrono.BasicYearDateTimeField" name="long add(long, long)" map="A"/>
  <method class="org.joda.time.chrono.BasicYearDateTimeField" name="org.joda.time.DurationField getRangeDurationField()" map="A"/>
  <method class="org.joda.time.chrono.BasicYearDateTimeField" name="long remainder(long)" map="D"/>
  <method class="org.joda.time.chrono.BasicYearDateTimeField" name="long roundFloor(long)" map="A"/>
  <method class="org.joda.time.chrono.BasicYearDateTimeField" name="boolean isLeap(long)" map="L"/>
  <method class="org.joda.time.chrono.BasicYearDateTimeField" name="int getMaximumValue()" map="F"/>
  <method class="org.joda.time.chrono.BasicYearDateTimeField" name="long getDifferenceAsLong(long, long)" map="C"/>
  <method class="org.joda.time.chrono.BasicYearDateTimeField" name="boolean isLenient()" map="C"/>
  <method class="org.joda.time.chrono.BasicYearDateTimeField" name="int getMinimumValue()" map="D"/>
  <method class="org.joda.time.chrono.BasicYearDateTimeField" name="int get(long)" map="E"/>
  <method class="org.joda.time.chrono.BasicYearDateTimeField" name="long addWrapField(long, int)" map="A"/>
  <method class="org.joda.time.chrono.BasicYearDateTimeField" name="java.lang.Object readResolve()" map="S"/>
  <method class="org.joda.time.chrono.BasicYearDateTimeField" name="org.joda.time.DurationField getLeapDurationField()" map="B"/>
  <class name="org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField" map="b"/>
  <field class="org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField" name="iChronology" map="&#x00c1;"/>
  <field class="org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField" name="serialVersionUID" map="&#x00c2;"/>
  <method class="org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField" name="long roundCeiling(long)" map="H"/>
  <method class="org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField" name="int getMaximumValue(org.joda.time.ReadablePartial)" map="B"/>
  <method class="org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField" name="org.joda.time.DurationField getRangeDurationField()" map="A"/>
  <method class="org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField" name="long remainder(long)" map="D"/>
  <method class="org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField" name="long roundFloor(long)" map="A"/>
  <method class="org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField" name="int getMaximumValue()" map="F"/>
  <method class="org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField" name="int getMaximumValueForSet(long, int)" map="D"/>
  <method class="org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField" name="int getMaximumValue(org.joda.time.ReadablePartial, int[])" map="A"/>
  <method class="org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField" name="int getMaximumValue(long)" map="M"/>
  <method class="org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField" name="int getMinimumValue()" map="D"/>
  <method class="org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField" name="int get(long)" map="E"/>
  <method class="org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField" name="java.lang.Object readResolve()" map="X"/>
  <class name="org.joda.time.chrono.BuddhistChronology" map="c"/>
  <field class="org.joda.time.chrono.BuddhistChronology" name="BUDDHIST_OFFSET" map="&#x0112;"/>
  <field class="org.joda.time.chrono.BuddhistChronology" name="INSTANCE_UTC" map="&#x0113;"/>
  <field class="org.joda.time.chrono.BuddhistChronology" name="BE" map="&#x0114;"/>
  <field class="org.joda.time.chrono.BuddhistChronology" name="ERA_FIELD" map="&#x0115;"/>
  <field class="org.joda.time.chrono.BuddhistChronology" name="cCache" map="&#x0116;"/>
  <field class="org.joda.time.chrono.BuddhistChronology" name="serialVersionUID" map="&#x0117;"/>
  <method class="org.joda.time.chrono.BuddhistChronology" name="org.joda.time.Chronology withUTC()" map="B"/>
  <method class="org.joda.time.chrono.BuddhistChronology" name="int hashCode()" map="hashCode"/>
  <method class="org.joda.time.chrono.BuddhistChronology" name="org.joda.time.chrono.BuddhistChronology getInstanceUTC()" map="&#x00d8;"/>
  <method class="org.joda.time.chrono.BuddhistChronology" name="boolean equals(java.lang.Object)" map="equals"/>
  <method class="org.joda.time.chrono.BuddhistChronology" name="org.joda.time.chrono.BuddhistChronology getInstance()" map="&#x00d9;"/>
  <method class="org.joda.time.chrono.BuddhistChronology" name="org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)" map="B"/>
  <method class="org.joda.time.chrono.BuddhistChronology" name="void assemble(org.joda.time.chrono.AssembledChronology$Fields)" map="A"/>
  <method class="org.joda.time.chrono.BuddhistChronology" name="org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)" map="N"/>
  <method class="org.joda.time.chrono.BuddhistChronology" name="java.lang.String toString()" map="toString"/>
  <method class="org.joda.time.chrono.BuddhistChronology" name="java.lang.Object readResolve()" map="&#x00da;"/>
  <package name="org.joda.time.base" map="B"/>
  <class name="org.joda.time.base.BasePeriod" map="A"/>
  <field class="org.joda.time.base.BasePeriod" name="iValues" map="A"/>
  <field class="org.joda.time.base.BasePeriod" name="iType" map="B"/>
  <field class="org.joda.time.base.BasePeriod" name="serialVersionUID" map="C"/>
  <method class="org.joda.time.base.BasePeriod" name="void setField(org.joda.time.DurationFieldType, int)" map="A"/>
  <method class="org.joda.time.base.BasePeriod" name="void setValues(int[])" map="A"/>
  <method class="org.joda.time.base.BasePeriod" name="int[] addPeriodInto(int[], org.joda.time.ReadablePeriod)" map="A"/>
  <method class="org.joda.time.base.BasePeriod" name="int[] mergePeriodInto(int[], org.joda.time.ReadablePeriod)" map="B"/>
  <method class="org.joda.time.base.BasePeriod" name="void addFieldInto(int[], org.joda.time.DurationFieldType, int)" map="A"/>
  <method class="org.joda.time.base.BasePeriod" name="void setPeriodInternal(int, int, int, int, int, int, int, int)" map="A"/>
  <method class="org.joda.time.base.BasePeriod" name="void mergePeriod(org.joda.time.ReadablePeriod)" map="A"/>
  <method class="org.joda.time.base.BasePeriod" name="void addField(org.joda.time.DurationFieldType, int)" map="B"/>
  <method class="org.joda.time.base.BasePeriod" name="int getValue(int)" map="B"/>
  <method class="org.joda.time.base.BasePeriod" name="org.joda.time.Duration toDurationTo(org.joda.time.ReadableInstant)" map="A"/>
  <method class="org.joda.time.base.BasePeriod" name="void setPeriod(int, int, int, int, int, int, int, int)" map="B"/>
  <method class="org.joda.time.base.BasePeriod" name="void addPeriod(org.joda.time.ReadablePeriod)" map="B"/>
  <method class="org.joda.time.base.BasePeriod" name="void setPeriod(org.joda.time.ReadablePeriod)" map="C"/>
  <method class="org.joda.time.base.BasePeriod" name="org.joda.time.PeriodType getPeriodType()" map="C"/>
  <method class="org.joda.time.base.BasePeriod" name="void setValue(int, int)" map="A"/>
  <method class="org.joda.time.base.BasePeriod" name="void checkAndUpdate(org.joda.time.DurationFieldType, int[], int)" map="A"/>
  <method class="org.joda.time.base.BasePeriod" name="int size()" map="D"/>
  <method class="org.joda.time.base.BasePeriod" name="org.joda.time.Duration toDurationFrom(org.joda.time.ReadableInstant)" map="B"/>
  <method class="org.joda.time.base.BasePeriod" name="org.joda.time.PeriodType checkPeriodType(org.joda.time.PeriodType)" map="A"/>
  <method class="org.joda.time.base.BasePeriod" name="org.joda.time.DurationFieldType getFieldType(int)" map="A"/>
  <method class="org.joda.time.base.BasePeriod" name="void setPeriodInternal(org.joda.time.ReadablePeriod)" map="D"/>
  <method class="org.joda.time.base.BasePeriod" name="void setFieldInto(int[], org.joda.time.DurationFieldType, int)" map="B"/>
  <class name="org.joda.time.base.AbstractDuration" map="B"/>
  <method class="org.joda.time.base.AbstractDuration" name="org.joda.time.Period toPeriod()" map="A"/>
  <method class="org.joda.time.base.AbstractDuration" name="int hashCode()" map="hashCode"/>
  <method class="org.joda.time.base.AbstractDuration" name="boolean isLongerThan(org.joda.time.ReadableDuration)" map="A"/>
  <method class="org.joda.time.base.AbstractDuration" name="boolean equals(java.lang.Object)" map="equals"/>
  <method class="org.joda.time.base.AbstractDuration" name="boolean isShorterThan(org.joda.time.ReadableDuration)" map="B"/>
  <method class="org.joda.time.base.AbstractDuration" name="boolean isEqual(org.joda.time.ReadableDuration)" map="C"/>
  <method class="org.joda.time.base.AbstractDuration" name="java.lang.String toString()" map="toString"/>
  <method class="org.joda.time.base.AbstractDuration" name="org.joda.time.Duration toDuration()" map="C"/>
  <method class="org.joda.time.base.AbstractDuration" name="int compareTo(java.lang.Object)" map="compareTo"/>
  <class name="org.joda.time.base.BaseLocal" map="C"/>
  <field class="org.joda.time.base.BaseLocal" name="serialVersionUID" map="A"/>
  <method class="org.joda.time.base.BaseLocal" name="long getLocalMillis()" map="F"/>
  <class name="org.joda.time.base.AbstractInstant" map="D"/>
  <method class="org.joda.time.base.AbstractInstant" name="org.joda.time.DateTime toDateTime(org.joda.time.DateTimeZone)" map="A"/>
  <method class="org.joda.time.base.AbstractInstant" name="boolean isSupported(org.joda.time.DateTimeFieldType)" map="B"/>
  <method class="org.joda.time.base.AbstractInstant" name="org.joda.time.MutableDateTime toMutableDateTimeISO()" map="Y"/>
  <method class="org.joda.time.base.AbstractInstant" name="org.joda.time.MutableDateTime toMutableDateTime(org.joda.time.Chronology)" map="A"/>
  <method class="org.joda.time.base.AbstractInstant" name="boolean isAfterNow()" map="Z"/>
  <method class="org.joda.time.base.AbstractInstant" name="org.joda.time.DateTime toDateTime()" map="G"/>
  <method class="org.joda.time.base.AbstractInstant" name="boolean isBefore(long)" map="A"/>
  <method class="org.joda.time.base.AbstractInstant" name="org.joda.time.MutableDateTime toMutableDateTime()" map="J"/>
  <method class="org.joda.time.base.AbstractInstant" name="boolean isEqual(org.joda.time.ReadableInstant)" map="A"/>
  <method class="org.joda.time.base.AbstractInstant" name="int get(org.joda.time.DateTimeFieldType)" map="A"/>
  <method class="org.joda.time.base.AbstractInstant" name="boolean isEqualNow()" map="_"/>
  <method class="org.joda.time.base.AbstractInstant" name="boolean equals(java.lang.Object)" map="equals"/>
  <method class="org.joda.time.base.AbstractInstant" name="int get(org.joda.time.DateTimeField)" map="A"/>
  <method class="org.joda.time.base.AbstractInstant" name="java.lang.String toString()" map="toString"/>
  <method class="org.joda.time.base.AbstractInstant" name="org.joda.time.DateTimeZone getZone()" map="C"/>
  <method class="org.joda.time.base.AbstractInstant" name="org.joda.time.Instant toInstant()" map="A"/>
  <method class="org.joda.time.base.AbstractInstant" name="int hashCode()" map="hashCode"/>
  <method class="org.joda.time.base.AbstractInstant" name="boolean isAfter(long)" map="B"/>
  <method class="org.joda.time.base.AbstractInstant" name="boolean isEqual(long)" map="C"/>
  <method class="org.joda.time.base.AbstractInstant" name="boolean isAfter(org.joda.time.ReadableInstant)" map="C"/>
  <method class="org.joda.time.base.AbstractInstant" name="java.util.Date toDate()" map="a"/>
  <method class="org.joda.time.base.AbstractInstant" name="int compareTo(java.lang.Object)" map="compareTo"/>
  <method class="org.joda.time.base.AbstractInstant" name="org.joda.time.DateTime toDateTimeISO()" map="b"/>
  <method class="org.joda.time.base.AbstractInstant" name="boolean isBefore(org.joda.time.ReadableInstant)" map="B"/>
  <method class="org.joda.time.base.AbstractInstant" name="boolean isBeforeNow()" map="c"/>
  <method class="org.joda.time.base.AbstractInstant" name="java.lang.String toString(org.joda.time.format.DateTimeFormatter)" map="A"/>
  <method class="org.joda.time.base.AbstractInstant" name="org.joda.time.MutableDateTime toMutableDateTime(org.joda.time.DateTimeZone)" map="B"/>
  <method class="org.joda.time.base.AbstractInstant" name="org.joda.time.DateTime toDateTime(org.joda.time.Chronology)" map="B"/>
  <class name="org.joda.time.base.AbstractPeriod" map="E"/>
  <method class="org.joda.time.base.AbstractPeriod" name="org.joda.time.MutablePeriod toMutablePeriod()" map="A"/>
  <method class="org.joda.time.base.AbstractPeriod" name="org.joda.time.Period toPeriod()" map="B"/>
  <method class="org.joda.time.base.AbstractPeriod" name="int get(org.joda.time.DurationFieldType)" map="A"/>
  <method class="org.joda.time.base.AbstractPeriod" name="int hashCode()" map="hashCode"/>
  <method class="org.joda.time.base.AbstractPeriod" name="boolean equals(java.lang.Object)" map="equals"/>
  <method class="org.joda.time.base.AbstractPeriod" name="org.joda.time.DurationFieldType[] getFieldTypes()" map="E"/>
  <method class="org.joda.time.base.AbstractPeriod" name="boolean isSupported(org.joda.time.DurationFieldType)" map="B"/>
  <method class="org.joda.time.base.AbstractPeriod" name="int[] getValues()" map="F"/>
  <method class="org.joda.time.base.AbstractPeriod" name="java.lang.String toString(org.joda.time.format.PeriodFormatter)" map="A"/>
  <method class="org.joda.time.base.AbstractPeriod" name="java.lang.String toString()" map="toString"/>
  <method class="org.joda.time.base.AbstractPeriod" name="int indexOf(org.joda.time.DurationFieldType)" map="C"/>
  <class name="org.joda.time.base.BasePartial" map="F"/>
  <field class="org.joda.time.base.BasePartial" name="iValues" map="c"/>
  <field class="org.joda.time.base.BasePartial" name="iChronology" map="d"/>
  <field class="org.joda.time.base.BasePartial" name="serialVersionUID" map="e"/>
  <method class="org.joda.time.base.BasePartial" name="org.joda.time.Chronology getChronology()" map="B"/>
  <method class="org.joda.time.base.BasePartial" name="int[] getValues()" map="E"/>
  <method class="org.joda.time.base.BasePartial" name="void setValues(int[])" map="A"/>
  <method class="org.joda.time.base.BasePartial" name="java.lang.String toString(java.lang.String)" map="E"/>
  <method class="org.joda.time.base.BasePartial" name="int getValue(int)" map="C"/>
  <method class="org.joda.time.base.BasePartial" name="java.lang.String toString(java.lang.String, java.util.Locale)" map="E"/>
  <method class="org.joda.time.base.BasePartial" name="void setValue(int, int)" map="A"/>
  <class name="org.joda.time.base.AbstractPartial" map="G"/>
  <method class="org.joda.time.base.AbstractPartial" name="org.joda.time.DateTime toDateTime(org.joda.time.ReadableInstant)" map="A"/>
  <method class="org.joda.time.base.AbstractPartial" name="boolean isEqual(org.joda.time.ReadablePartial)" map="A"/>
  <method class="org.joda.time.base.AbstractPartial" name="org.joda.time.DateTimeField getField(int, org.joda.time.Chronology)" map="A"/>
  <method class="org.joda.time.base.AbstractPartial" name="boolean isSupported(org.joda.time.DateTimeFieldType)" map="B"/>
  <method class="org.joda.time.base.AbstractPartial" name="int indexOf(org.joda.time.DurationFieldType)" map="A"/>
  <method class="org.joda.time.base.AbstractPartial" name="int get(org.joda.time.DateTimeFieldType)" map="A"/>
  <method class="org.joda.time.base.AbstractPartial" name="org.joda.time.DateTimeFieldType getFieldType(int)" map="B"/>
  <method class="org.joda.time.base.AbstractPartial" name="boolean isAfter(org.joda.time.ReadablePartial)" map="B"/>
  <method class="org.joda.time.base.AbstractPartial" name="boolean equals(java.lang.Object)" map="equals"/>
  <method class="org.joda.time.base.AbstractPartial" name="int indexOfSupported(org.joda.time.DurationFieldType)" map="B"/>
  <method class="org.joda.time.base.AbstractPartial" name="org.joda.time.DateTimeField getField(int)" map="A"/>
  <method class="org.joda.time.base.AbstractPartial" name="org.joda.time.DateTimeFieldType[] getFieldTypes()" map="C"/>
  <method class="org.joda.time.base.AbstractPartial" name="boolean isBefore(org.joda.time.ReadablePartial)" map="C"/>
  <method class="org.joda.time.base.AbstractPartial" name="int hashCode()" map="hashCode"/>
  <method class="org.joda.time.base.AbstractPartial" name="org.joda.time.DateTimeField[] getFields()" map="D"/>
  <method class="org.joda.time.base.AbstractPartial" name="int indexOf(org.joda.time.DateTimeFieldType)" map="C"/>
  <method class="org.joda.time.base.AbstractPartial" name="int indexOfSupported(org.joda.time.DateTimeFieldType)" map="D"/>
  <method class="org.joda.time.base.AbstractPartial" name="int compareTo(java.lang.Object)" map="compareTo"/>
  <method class="org.joda.time.base.AbstractPartial" name="int[] getValues()" map="E"/>
  <method class="org.joda.time.base.AbstractPartial" name="java.lang.String toString(org.joda.time.format.DateTimeFormatter)" map="A"/>
  <class name="org.joda.time.base.BaseSingleFieldPeriod" map="H"/>
  <field class="org.joda.time.base.BaseSingleFieldPeriod" name="iPeriod" map="G"/>
  <field class="org.joda.time.base.BaseSingleFieldPeriod" name="serialVersionUID" map="H"/>
  <method class="org.joda.time.base.BaseSingleFieldPeriod" name="org.joda.time.MutablePeriod toMutablePeriod()" map="A"/>
  <method class="org.joda.time.base.BaseSingleFieldPeriod" name="org.joda.time.Period toPeriod()" map="B"/>
  <method class="org.joda.time.base.BaseSingleFieldPeriod" name="int get(org.joda.time.DurationFieldType)" map="A"/>
  <method class="org.joda.time.base.BaseSingleFieldPeriod" name="int hashCode()" map="hashCode"/>
  <method class="org.joda.time.base.BaseSingleFieldPeriod" name="boolean equals(java.lang.Object)" map="equals"/>
  <method class="org.joda.time.base.BaseSingleFieldPeriod" name="org.joda.time.DurationFieldType getFieldType()" map="e"/>
  <method class="org.joda.time.base.BaseSingleFieldPeriod" name="int between(org.joda.time.ReadablePartial, org.joda.time.ReadablePartial, org.joda.time.ReadablePeriod)" map="A"/>
  <method class="org.joda.time.base.BaseSingleFieldPeriod" name="org.joda.time.PeriodType getPeriodType()" map="C"/>
  <method class="org.joda.time.base.BaseSingleFieldPeriod" name="int between(org.joda.time.ReadableInstant, org.joda.time.ReadableInstant, org.joda.time.DurationFieldType)" map="A"/>
  <method class="org.joda.time.base.BaseSingleFieldPeriod" name="boolean isSupported(org.joda.time.DurationFieldType)" map="B"/>
  <method class="org.joda.time.base.BaseSingleFieldPeriod" name="org.joda.time.DurationFieldType getFieldType(int)" map="A"/>
  <method class="org.joda.time.base.BaseSingleFieldPeriod" name="int size()" map="D"/>
  <method class="org.joda.time.base.BaseSingleFieldPeriod" name="int getValue()" map="f"/>
  <method class="org.joda.time.base.BaseSingleFieldPeriod" name="int getValue(int)" map="B"/>
  <method class="org.joda.time.base.BaseSingleFieldPeriod" name="int compareTo(java.lang.Object)" map="compareTo"/>
  <method class="org.joda.time.base.BaseSingleFieldPeriod" name="int standardPeriodIn(org.joda.time.ReadablePeriod, long)" map="A"/>
  <method class="org.joda.time.base.BaseSingleFieldPeriod" name="void setValue(int)" map="x"/>
  <class name="org.joda.time.base.BaseInterval" map="I"/>
  <field class="org.joda.time.base.BaseInterval" name="iStartMillis" map="A"/>
  <field class="org.joda.time.base.BaseInterval" name="iChronology" map="B"/>
  <field class="org.joda.time.base.BaseInterval" name="iEndMillis" map="C"/>
  <field class="org.joda.time.base.BaseInterval" name="serialVersionUID" map="D"/>
  <method class="org.joda.time.base.BaseInterval" name="org.joda.time.Chronology getChronology()" map="C"/>
  <method class="org.joda.time.base.BaseInterval" name="long getEndMillis()" map="I"/>
  <method class="org.joda.time.base.BaseInterval" name="void setInterval(long, long, org.joda.time.Chronology)" map="A"/>
  <method class="org.joda.time.base.BaseInterval" name="long getStartMillis()" map="E"/>
  <class name="org.joda.time.base.AbstractInterval" map="J"/>
  <method class="org.joda.time.base.AbstractInterval" name="boolean isBefore(org.joda.time.ReadableInterval)" map="A"/>
  <method class="org.joda.time.base.AbstractInterval" name="boolean isAfterNow()" map="K"/>
  <method class="org.joda.time.base.AbstractInterval" name="boolean isBefore(long)" map="A"/>
  <method class="org.joda.time.base.AbstractInterval" name="void checkInterval(long, long)" map="A"/>
  <method class="org.joda.time.base.AbstractInterval" name="boolean contains(org.joda.time.ReadableInterval)" map="B"/>
  <method class="org.joda.time.base.AbstractInterval" name="org.joda.time.Period toPeriod(org.joda.time.PeriodType)" map="A"/>
  <method class="org.joda.time.base.AbstractInterval" name="boolean equals(java.lang.Object)" map="equals"/>
  <method class="org.joda.time.base.AbstractInterval" name="java.lang.String toString()" map="toString"/>
  <method class="org.joda.time.base.AbstractInterval" name="org.joda.time.Period toPeriod()" map="A"/>
  <method class="org.joda.time.base.AbstractInterval" name="org.joda.time.DateTime getStart()" map="B"/>
  <method class="org.joda.time.base.AbstractInterval" name="boolean overlaps(org.joda.time.ReadableInterval)" map="C"/>
  <method class="org.joda.time.base.AbstractInterval" name="org.joda.time.Duration toDuration()" map="D"/>
  <method class="org.joda.time.base.AbstractInterval" name="boolean contains(org.joda.time.ReadableInstant)" map="A"/>
  <method class="org.joda.time.base.AbstractInterval" name="boolean isAfter(org.joda.time.ReadableInterval)" map="D"/>
  <method class="org.joda.time.base.AbstractInterval" name="int hashCode()" map="hashCode"/>
  <method class="org.joda.time.base.AbstractInterval" name="long toDurationMillis()" map="F"/>
  <method class="org.joda.time.base.AbstractInterval" name="boolean isAfter(long)" map="B"/>
  <method class="org.joda.time.base.AbstractInterval" name="org.joda.time.DateTime getEnd()" map="G"/>
  <method class="org.joda.time.base.AbstractInterval" name="org.joda.time.MutableInterval toMutableInterval()" map="H"/>
  <method class="org.joda.time.base.AbstractInterval" name="boolean contains(long)" map="C"/>
  <method class="org.joda.time.base.AbstractInterval" name="boolean isAfter(org.joda.time.ReadableInstant)" map="B"/>
  <method class="org.joda.time.base.AbstractInterval" name="boolean isBeforeNow()" map="L"/>
  <method class="org.joda.time.base.AbstractInterval" name="boolean isBefore(org.joda.time.ReadableInstant)" map="C"/>
  <method class="org.joda.time.base.AbstractInterval" name="boolean containsNow()" map="M"/>
  <method class="org.joda.time.base.AbstractInterval" name="org.joda.time.Interval toInterval()" map="J"/>
  <class name="org.joda.time.base.BaseDateTime" map="K"/>
  <field class="org.joda.time.base.BaseDateTime" name="iMillis" map="C"/>
  <field class="org.joda.time.base.BaseDateTime" name="iChronology" map="D"/>
  <field class="org.joda.time.base.BaseDateTime" name="serialVersionUID" map="E"/>
  <method class="org.joda.time.base.BaseDateTime" name="org.joda.time.Chronology getChronology()" map="D"/>
  <method class="org.joda.time.base.BaseDateTime" name="long checkInstant(long, org.joda.time.Chronology)" map="A"/>
  <method class="org.joda.time.base.BaseDateTime" name="long getMillis()" map="B"/>
  <method class="org.joda.time.base.BaseDateTime" name="void setMillis(long)" map="G"/>
  <method class="org.joda.time.base.BaseDateTime" name="void setChronology(org.joda.time.Chronology)" map="C"/>
  <method class="org.joda.time.base.BaseDateTime" name="org.joda.time.Chronology checkChronology(org.joda.time.Chronology)" map="D"/>
  <class name="org.joda.time.base.AbstractDateTime" map="L"/>
  <method class="org.joda.time.base.AbstractDateTime" name="java.util.GregorianCalendar toGregorianCalendar()" map="d"/>
  <method class="org.joda.time.base.AbstractDateTime" name="java.lang.String toString(java.lang.String, java.util.Locale)" map="A"/>
  <method class="org.joda.time.base.AbstractDateTime" name="int getWeekyear()" map="E"/>
  <method class="org.joda.time.base.AbstractDateTime" name="int getMinuteOfDay()" map="F"/>
  <method class="org.joda.time.base.AbstractDateTime" name="int getYearOfEra()" map="H"/>
  <method class="org.joda.time.base.AbstractDateTime" name="int getYear()" map="I"/>
  <method class="org.joda.time.base.AbstractDateTime" name="int getMinuteOfHour()" map="K"/>
  <method class="org.joda.time.base.AbstractDateTime" name="int get(org.joda.time.DateTimeFieldType)" map="A"/>
  <method class="org.joda.time.base.AbstractDateTime" name="int getWeekOfWeekyear()" map="L"/>
  <method class="org.joda.time.base.AbstractDateTime" name="java.util.Calendar toCalendar(java.util.Locale)" map="A"/>
  <method class="org.joda.time.base.AbstractDateTime" name="int getDayOfWeek()" map="M"/>
  <method class="org.joda.time.base.AbstractDateTime" name="int getMonthOfYear()" map="N"/>
  <method class="org.joda.time.base.AbstractDateTime" name="int getSecondOfDay()" map="O"/>
  <method class="org.joda.time.base.AbstractDateTime" name="int getEra()" map="P"/>
  <method class="org.joda.time.base.AbstractDateTime" name="int getDayOfMonth()" map="Q"/>
  <method class="org.joda.time.base.AbstractDateTime" name="int getHourOfDay()" map="R"/>
  <method class="org.joda.time.base.AbstractDateTime" name="int getSecondOfMinute()" map="S"/>
  <method class="org.joda.time.base.AbstractDateTime" name="int getDayOfYear()" map="T"/>
  <method class="org.joda.time.base.AbstractDateTime" name="int getMillisOfSecond()" map="U"/>
  <method class="org.joda.time.base.AbstractDateTime" name="int getMillisOfDay()" map="V"/>
  <method class="org.joda.time.base.AbstractDateTime" name="int getCenturyOfEra()" map="W"/>
  <method class="org.joda.time.base.AbstractDateTime" name="int getYearOfCentury()" map="X"/>
  <method class="org.joda.time.base.AbstractDateTime" name="java.lang.String toString(java.lang.String)" map="A"/>
  <class name="org.joda.time.base.BaseDuration" map="M"/>
  <field class="org.joda.time.base.BaseDuration" name="iMillis" map="A"/>
  <field class="org.joda.time.base.BaseDuration" name="serialVersionUID" map="B"/>
  <method class="org.joda.time.base.BaseDuration" name="void setMillis(long)" map="A"/>
  <method class="org.joda.time.base.BaseDuration" name="org.joda.time.Period toPeriod(org.joda.time.PeriodType, org.joda.time.Chronology)" map="A"/>
  <method class="org.joda.time.base.BaseDuration" name="org.joda.time.Period toPeriodFrom(org.joda.time.ReadableInstant)" map="A"/>
  <method class="org.joda.time.base.BaseDuration" name="org.joda.time.Period toPeriodFrom(org.joda.time.ReadableInstant, org.joda.time.PeriodType)" map="A"/>
  <method class="org.joda.time.base.BaseDuration" name="org.joda.time.Interval toIntervalTo(org.joda.time.ReadableInstant)" map="B"/>
  <method class="org.joda.time.base.BaseDuration" name="org.joda.time.Period toPeriodTo(org.joda.time.ReadableInstant, org.joda.time.PeriodType)" map="B"/>
  <method class="org.joda.time.base.BaseDuration" name="long getMillis()" map="B"/>
  <method class="org.joda.time.base.BaseDuration" name="org.joda.time.Period toPeriodTo(org.joda.time.ReadableInstant)" map="C"/>
  <method class="org.joda.time.base.BaseDuration" name="org.joda.time.Interval toIntervalFrom(org.joda.time.ReadableInstant)" map="D"/>
  <method class="org.joda.time.base.BaseDuration" name="org.joda.time.Period toPeriod(org.joda.time.Chronology)" map="A"/>
  <method class="org.joda.time.base.BaseDuration" name="org.joda.time.Period toPeriod(org.joda.time.PeriodType)" map="A"/>
  <package name="org.joda.time.format" map="C"/>
  <class name="org.joda.time.format.ISODateTimeFormat" map="A"/>
  <field class="org.joda.time.format.ISODateTimeFormat" name="dhmsl" map="A"/>
  <field class="org.joda.time.format.ISODateTimeFormat" name="bodtx" map="B"/>
  <field class="org.joda.time.format.ISODateTimeFormat" name="sme" map="C"/>
  <field class="org.joda.time.format.ISODateTimeFormat" name="dhmsf" map="D"/>
  <field class="org.joda.time.format.ISODateTimeFormat" name="we" map="E"/>
  <field class="org.joda.time.format.ISODateTimeFormat" name="ze" map="F"/>
  <field class="org.joda.time.format.ISODateTimeFormat" name="dt" map="G"/>
  <field class="org.joda.time.format.ISODateTimeFormat" name="wdtx" map="H"/>
  <field class="org.joda.time.format.ISODateTimeFormat" name="dotp" map="I"/>
  <field class="org.joda.time.format.ISODateTimeFormat" name="hms" map="J"/>
  <field class="org.joda.time.format.ISODateTimeFormat" name="dp" map="K"/>
  <field class="org.joda.time.format.ISODateTimeFormat" name="dhms" map="L"/>
  <field class="org.joda.time.format.ISODateTimeFormat" name="hde" map="M"/>
  <field class="org.joda.time.format.ISODateTimeFormat" name="dh" map="N"/>
  <field class="org.joda.time.format.ISODateTimeFormat" name="odt" map="O"/>
  <field class="org.joda.time.format.ISODateTimeFormat" name="dtx" map="P"/>
  <field class="org.joda.time.format.ISODateTimeFormat" name="wwe" map="Q"/>
  <field class="org.joda.time.format.ISODateTimeFormat" name="bwdtx" map="R"/>
  <field class="org.joda.time.format.ISODateTimeFormat" name="dhm" map="S"/>
  <field class="org.joda.time.format.ISODateTimeFormat" name="wwd" map="T"/>
  <field class="org.joda.time.format.ISODateTimeFormat" name="ymd" map="U"/>
  <field class="org.joda.time.format.ISODateTimeFormat" name="ym" map="V"/>
  <field class="org.joda.time.format.ISODateTimeFormat" name="wdt" map="W"/>
  <field class="org.joda.time.format.ISODateTimeFormat" name="bod" map="X"/>
  <field class="org.joda.time.format.ISODateTimeFormat" name="mhe" map="Y"/>
  <field class="org.joda.time.format.ISODateTimeFormat" name="dtp" map="Z"/>
  <field class="org.joda.time.format.ISODateTimeFormat" name="hmsl" map="_"/>
  <field class="org.joda.time.format.ISODateTimeFormat" name="ttx" map="a"/>
  <field class="org.joda.time.format.ISODateTimeFormat" name="ye" map="b"/>
  <field class="org.joda.time.format.ISODateTimeFormat" name="ltp" map="c"/>
  <field class="org.joda.time.format.ISODateTimeFormat" name="hmsf" map="d"/>
  <field class="org.joda.time.format.ISODateTimeFormat" name="bodt" map="e"/>
  <field class="org.joda.time.format.ISODateTimeFormat" name="dwe" map="f"/>
  <field class="org.joda.time.format.ISODateTimeFormat" name="bdtx" map="g"/>
  <field class="org.joda.time.format.ISODateTimeFormat" name="btx" map="h"/>
  <field class="org.joda.time.format.ISODateTimeFormat" name="btt" map="i"/>
  <field class="org.joda.time.format.ISODateTimeFormat" name="lte" map="j"/>
  <field class="org.joda.time.format.ISODateTimeFormat" name="bwdt" map="k"/>
  <field class="org.joda.time.format.ISODateTimeFormat" name="fse" map="l"/>
  <field class="org.joda.time.format.ISODateTimeFormat" name="ldotp" map="m"/>
  <field class="org.joda.time.format.ISODateTimeFormat" name="ldp" map="n"/>
  <field class="org.joda.time.format.ISODateTimeFormat" name="bttx" map="o"/>
  <field class="org.joda.time.format.ISODateTimeFormat" name="od" map="p"/>
  <field class="org.joda.time.format.ISODateTimeFormat" name="bwd" map="q"/>
  <field class="org.joda.time.format.ISODateTimeFormat" name="t" map="r"/>
  <field class="org.joda.time.format.ISODateTimeFormat" name="dme" map="s"/>
  <field class="org.joda.time.format.ISODateTimeFormat" name="bdt" map="t"/>
  <field class="org.joda.time.format.ISODateTimeFormat" name="bt" map="u"/>
  <field class="org.joda.time.format.ISODateTimeFormat" name="dpe" map="v"/>
  <field class="org.joda.time.format.ISODateTimeFormat" name="mye" map="w"/>
  <field class="org.joda.time.format.ISODateTimeFormat" name="odtx" map="x"/>
  <field class="org.joda.time.format.ISODateTimeFormat" name="dye" map="y"/>
  <field class="org.joda.time.format.ISODateTimeFormat" name="tx" map="z"/>
  <field class="org.joda.time.format.ISODateTimeFormat" name="ww" map="&#x00a2;"/>
  <field class="org.joda.time.format.ISODateTimeFormat" name="hm" map="&#x00a3;"/>
  <field class="org.joda.time.format.ISODateTimeFormat" name="tt" map="&#x00a4;"/>
  <field class="org.joda.time.format.ISODateTimeFormat" name="tpe" map="&#x00a5;"/>
  <field class="org.joda.time.format.ISODateTimeFormat" name="tp" map="&#x00aa;"/>
  <field class="org.joda.time.format.ISODateTimeFormat" name="bd" map="&#x00b5;"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="org.joda.time.format.DateTimeFormatter weekyear()" map="A"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="org.joda.time.format.DateTimeFormatter basicTimeNoMillis()" map="B"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="org.joda.time.format.DateTimeFormatter basicTTimeNoMillis()" map="C"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="org.joda.time.format.DateTimeFormatter dateTime()" map="D"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="org.joda.time.format.DateTimeFormatter weekDate()" map="E"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="org.joda.time.format.DateTimeFormatter basicDateTimeNoMillis()" map="F"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="org.joda.time.format.DateTimeFormatter weekDateTimeNoMillis()" map="G"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="org.joda.time.format.DateTimeFormatter dayOfYearElement()" map="H"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="org.joda.time.format.DateTimeFormatter dayOfMonthElement()" map="I"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()" map="J"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="org.joda.time.format.DateTimeFormatter dateHour()" map="K"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="org.joda.time.format.DateTimeFormatter basicOrdinalDateTime()" map="L"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="org.joda.time.format.DateTimeFormatter tTimeNoMillis()" map="M"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="org.joda.time.format.DateTimeFormatter weekDateTime()" map="N"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="org.joda.time.format.DateTimeFormatter dateParser()" map="O"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="org.joda.time.format.DateTimeFormatter timeParser()" map="P"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="org.joda.time.format.DateTimeFormatter dateTimeNoMillis()" map="Q"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="org.joda.time.format.DateTimeFormatter dayOfWeekElement()" map="R"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="org.joda.time.format.DateTimeFormatter timeNoMillis()" map="S"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="org.joda.time.format.DateTimeFormatter basicTime()" map="T"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="org.joda.time.format.DateTimeFormatter year()" map="U"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="org.joda.time.format.DateTimeFormatter dateElementParser()" map="V"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="org.joda.time.format.DateTimeFormatter tTime()" map="W"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="org.joda.time.format.DateTimeFormatter weekyearWeek()" map="X"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="org.joda.time.format.DateTimeFormatter weekyearElement()" map="Y"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="org.joda.time.format.DateTimeFormatter yearMonth()" map="Z"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="org.joda.time.format.DateTimeFormatter basicTTime()" map="_"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="org.joda.time.format.DateTimeFormatter hourMinute()" map="a"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="org.joda.time.format.DateTimeFormatter minuteElement()" map="b"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="org.joda.time.format.DateTimeFormatter dateHourMinuteSecondFraction()" map="c"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="org.joda.time.format.DateTimeFormatter offsetElement()" map="d"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder, java.util.Collection, boolean, boolean)" map="A"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="org.joda.time.format.DateTimeFormatter dateHourMinuteSecondMillis()" map="e"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="org.joda.time.format.DateTimeFormatter yearMonthDay()" map="f"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="org.joda.time.format.DateTimeFormatter dateTimeParser()" map="g"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="org.joda.time.format.DateTimeFormatter weekyearWeekDay()" map="h"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="org.joda.time.format.DateTimeFormatter secondElement()" map="i"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="org.joda.time.format.DateTimeFormatter basicWeekDate()" map="j"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="org.joda.time.format.DateTimeFormatter date()" map="k"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="org.joda.time.format.DateTimeFormatter hourElement()" map="l"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()" map="m"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="org.joda.time.format.DateTimeFormatter basicDateTime()" map="n"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="org.joda.time.format.DateTimeFormatter dateHourMinute()" map="o"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="void checkNotStrictISO(java.util.Collection, boolean)" map="A"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="org.joda.time.format.DateTimeFormatter timeElementParser()" map="p"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="org.joda.time.format.DateTimeFormatter basicOrdinalDate()" map="q"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="org.joda.time.format.DateTimeFormatter ordinalDateTime()" map="r"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="void appendSeparator(org.joda.time.format.DateTimeFormatterBuilder, boolean)" map="A"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="org.joda.time.format.DateTimeFormatter yearElement()" map="s"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="org.joda.time.format.DateTimeFormatter hourMinuteSecond()" map="t"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="org.joda.time.format.DateTimeFormatter time()" map="u"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="org.joda.time.format.DateTimeFormatter dateHourMinuteSecond()" map="v"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="org.joda.time.format.DateTimeFormatter hour()" map="w"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="org.joda.time.format.DateTimeFormatter weekElement()" map="x"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder, java.util.Collection, boolean, boolean)" map="B"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="org.joda.time.format.DateTimeFormatter monthElement()" map="y"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="org.joda.time.format.DateTimeFormatter basicWeekDateTimeNoMillis()" map="z"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder, java.util.Collection, boolean, boolean)" map="C"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="org.joda.time.format.DateTimeFormatter literalTElement()" map="&#x00a2;"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="org.joda.time.format.DateTimeFormatter ordinalDateTimeNoMillis()" map="&#x00a3;"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="org.joda.time.format.DateTimeFormatter localDateParser()" map="&#x00a4;"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="org.joda.time.format.DateTimeFormatter fractionElement()" map="&#x00a5;"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="org.joda.time.format.DateTimeFormatter localTimeParser()" map="&#x00aa;"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="org.joda.time.format.DateTimeFormatter forFields(java.util.Collection, boolean, boolean)" map="A"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()" map="&#x00b5;"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="org.joda.time.format.DateTimeFormatter basicWeekDateTime()" map="&#x00ba;"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="org.joda.time.format.DateTimeFormatter basicDate()" map="&#x00c0;"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()" map="&#x00c1;"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="org.joda.time.format.DateTimeFormatter ordinalDate()" map="&#x00c2;"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="org.joda.time.format.DateTimeFormatter basicOrdinalDateTimeNoMillis()" map="&#x00c3;"/>
  <method class="org.joda.time.format.ISODateTimeFormat" name="void time(org.joda.time.format.DateTimeFormatterBuilder, java.util.Collection, boolean, boolean, boolean, boolean)" map="A"/>
  <class name="org.joda.time.format.DateTimeFormatterBuilder$Composite" map="_A"/>
  <field class="org.joda.time.format.DateTimeFormatterBuilder$Composite" name="iParsedLengthEstimate" map="A"/>
  <field class="org.joda.time.format.DateTimeFormatterBuilder$Composite" name="iParsers" map="B"/>
  <field class="org.joda.time.format.DateTimeFormatterBuilder$Composite" name="iPrinters" map="C"/>
  <field class="org.joda.time.format.DateTimeFormatterBuilder$Composite" name="iPrintedLengthEstimate" map="D"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$Composite" name="boolean isParser()" map="C"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$Composite" name="int estimatePrintedLength()" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$Composite" name="void printTo(java.lang.StringBuffer, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$Composite" name="boolean isPrinter()" map="D"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$Composite" name="int parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.String, int)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$Composite" name="void addArrayToList(java.util.List, java.lang.Object[])" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$Composite" name="void decompose(java.util.List, java.util.List, java.util.List)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$Composite" name="void printTo(java.lang.StringBuffer, org.joda.time.ReadablePartial, java.util.Locale)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$Composite" name="int estimateParsedLength()" map="B"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$Composite" name="void printTo(java.io.Writer, org.joda.time.ReadablePartial, java.util.Locale)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$Composite" name="void printTo(java.io.Writer, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale)" map="A"/>
  <class name="org.joda.time.format.DateTimeFormatterBuilder$StringLiteral" map="_B"/>
  <field class="org.joda.time.format.DateTimeFormatterBuilder$StringLiteral" name="iValue" map="b"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$StringLiteral" name="void printTo(java.lang.StringBuffer, org.joda.time.ReadablePartial, java.util.Locale)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$StringLiteral" name="int parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.String, int)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$StringLiteral" name="int estimatePrintedLength()" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$StringLiteral" name="int estimateParsedLength()" map="B"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$StringLiteral" name="void printTo(java.lang.StringBuffer, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$StringLiteral" name="void printTo(java.io.Writer, org.joda.time.ReadablePartial, java.util.Locale)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$StringLiteral" name="void printTo(java.io.Writer, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale)" map="A"/>
  <class name="org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral" map="_C"/>
  <field class="org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral" name="iValue" map="E"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral" name="void printTo(java.lang.StringBuffer, org.joda.time.ReadablePartial, java.util.Locale)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral" name="int parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.String, int)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral" name="int estimatePrintedLength()" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral" name="int estimateParsedLength()" map="B"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral" name="void printTo(java.lang.StringBuffer, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral" name="void printTo(java.io.Writer, org.joda.time.ReadablePartial, java.util.Locale)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral" name="void printTo(java.io.Writer, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale)" map="A"/>
  <class name="org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber" map="_D"/>
  <field class="org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber" name="iMinPrintedDigits" map="X"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber" name="void printTo(java.lang.StringBuffer, org.joda.time.ReadablePartial, java.util.Locale)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber" name="int estimatePrintedLength()" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber" name="void printTo(java.lang.StringBuffer, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber" name="void printTo(java.io.Writer, org.joda.time.ReadablePartial, java.util.Locale)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber" name="void printTo(java.io.Writer, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale)" map="A"/>
  <class name="org.joda.time.format.DateTimeFormatterBuilder$FixedNumber" map="_E"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$FixedNumber" name="int parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.String, int)" map="A"/>
  <class name="org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear" map="_F"/>
  <field class="org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear" name="iPivot" map="F"/>
  <field class="org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear" name="iType" map="G"/>
  <field class="org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear" name="iLenientParse" map="H"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear" name="int getTwoDigitYear(long, org.joda.time.Chronology)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear" name="int estimatePrintedLength()" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear" name="void printTo(java.lang.StringBuffer, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear" name="int getTwoDigitYear(org.joda.time.ReadablePartial)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear" name="int parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.String, int)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear" name="void printTo(java.lang.StringBuffer, org.joda.time.ReadablePartial, java.util.Locale)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear" name="int estimateParsedLength()" map="B"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear" name="void printTo(java.io.Writer, org.joda.time.ReadablePartial, java.util.Locale)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear" name="void printTo(java.io.Writer, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale)" map="A"/>
  <class name="org.joda.time.format.DateTimeFormatterBuilder$TextField" map="_G"/>
  <field class="org.joda.time.format.DateTimeFormatterBuilder$TextField" name="cParseCache" map="I"/>
  <field class="org.joda.time.format.DateTimeFormatterBuilder$TextField" name="iShort" map="J"/>
  <field class="org.joda.time.format.DateTimeFormatterBuilder$TextField" name="iFieldType" map="K"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$TextField" name="int estimatePrintedLength()" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$TextField" name="java.lang.String print(org.joda.time.ReadablePartial, java.util.Locale)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$TextField" name="void printTo(java.lang.StringBuffer, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$TextField" name="java.lang.String print(long, org.joda.time.Chronology, java.util.Locale)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$TextField" name="int parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.String, int)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$TextField" name="void printTo(java.lang.StringBuffer, org.joda.time.ReadablePartial, java.util.Locale)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$TextField" name="int estimateParsedLength()" map="B"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$TextField" name="void printTo(java.io.Writer, org.joda.time.ReadablePartial, java.util.Locale)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$TextField" name="void printTo(java.io.Writer, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale)" map="A"/>
  <class name="org.joda.time.format.DateTimeFormatterBuilder$Fraction" map="_H"/>
  <field class="org.joda.time.format.DateTimeFormatterBuilder$Fraction" name="iMinDigits" map="L"/>
  <field class="org.joda.time.format.DateTimeFormatterBuilder$Fraction" name="iFieldType" map="M"/>
  <field class="org.joda.time.format.DateTimeFormatterBuilder$Fraction" name="iMaxDigits" map="N"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$Fraction" name="int estimatePrintedLength()" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$Fraction" name="void printTo(java.lang.StringBuffer, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$Fraction" name="int parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.String, int)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$Fraction" name="void printTo(java.lang.StringBuffer, java.io.Writer, long, org.joda.time.Chronology)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$Fraction" name="void printTo(java.lang.StringBuffer, org.joda.time.ReadablePartial, java.util.Locale)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$Fraction" name="int estimateParsedLength()" map="B"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$Fraction" name="void printTo(java.io.Writer, org.joda.time.ReadablePartial, java.util.Locale)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$Fraction" name="long[] getFractionData(long, org.joda.time.DateTimeField)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$Fraction" name="void printTo(java.io.Writer, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale)" map="A"/>
  <class name="org.joda.time.format.DateTimeFormatterBuilder$MatchingParser" map="_I"/>
  <field class="org.joda.time.format.DateTimeFormatterBuilder$MatchingParser" name="iParsedLengthEstimate" map="O"/>
  <field class="org.joda.time.format.DateTimeFormatterBuilder$MatchingParser" name="iParsers" map="P"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$MatchingParser" name="int parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.String, int)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$MatchingParser" name="int estimateParsedLength()" map="B"/>
  <class name="org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber" map="_J"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber" name="void printTo(java.lang.StringBuffer, org.joda.time.ReadablePartial, java.util.Locale)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber" name="int estimatePrintedLength()" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber" name="void printTo(java.lang.StringBuffer, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber" name="void printTo(java.io.Writer, org.joda.time.ReadablePartial, java.util.Locale)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber" name="void printTo(java.io.Writer, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale)" map="A"/>
  <class name="org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset" map="_K"/>
  <field class="org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset" name="iMaxFields" map="Q"/>
  <field class="org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset" name="iShowSeparators" map="R"/>
  <field class="org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset" name="iZeroOffsetText" map="S"/>
  <field class="org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset" name="iMinFields" map="T"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset" name="int digitCount(java.lang.String, int, int)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset" name="void printTo(java.lang.StringBuffer, org.joda.time.ReadablePartial, java.util.Locale)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset" name="int parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.String, int)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset" name="int estimatePrintedLength()" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset" name="int estimateParsedLength()" map="B"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset" name="void printTo(java.lang.StringBuffer, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset" name="void printTo(java.io.Writer, org.joda.time.ReadablePartial, java.util.Locale)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset" name="void printTo(java.io.Writer, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale)" map="A"/>
  <class name="org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName" map="_L"/>
  <field class="org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName" name="ID" map="c"/>
  <field class="org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName" name="SHORT_NAME" map="d"/>
  <field class="org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName" name="iType" map="e"/>
  <field class="org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName" name="LONG_NAME" map="f"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName" name="void printTo(java.lang.StringBuffer, org.joda.time.ReadablePartial, java.util.Locale)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName" name="int estimatePrintedLength()" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName" name="java.lang.String print(long, org.joda.time.DateTimeZone, java.util.Locale)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName" name="void printTo(java.lang.StringBuffer, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName" name="void printTo(java.io.Writer, org.joda.time.ReadablePartial, java.util.Locale)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName" name="void printTo(java.io.Writer, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale)" map="A"/>
  <class name="org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter" map="_M"/>
  <field class="org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter" name="iMaxParsedDigits" map="U"/>
  <field class="org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter" name="iFieldType" map="V"/>
  <field class="org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter" name="iSigned" map="W"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter" name="int parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.String, int)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter" name="int estimateParsedLength()" map="B"/>
  <class name="org.joda.time.format.DateTimeFormatterBuilder" map="B"/>
  <field class="org.joda.time.format.DateTimeFormatterBuilder" name="iElementPairs" map="A"/>
  <field class="org.joda.time.format.DateTimeFormatterBuilder" name="iFormatter" map="B"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="org.joda.time.format.DateTimePrinter toPrinter()" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneName()" map="B"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="org.joda.time.format.DateTimeFormatterBuilder appendFractionOfDay(int, int)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeParser)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="org.joda.time.format.DateTimeFormatterBuilder appendFractionOfHour(int, int)" map="B"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="org.joda.time.format.DateTimeFormatterBuilder appendSecondOfMinute(int)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="org.joda.time.format.DateTimeFormatterBuilder appendHourOfDay(int)" map="B"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter, org.joda.time.format.DateTimeParser)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="org.joda.time.format.DateTimeFormatterBuilder appendFixedSignedDecimal(org.joda.time.DateTimeFieldType, int)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="org.joda.time.format.DateTimeFormatterBuilder appendHalfdayOfDayText()" map="C"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="org.joda.time.format.DateTimeFormatterBuilder appendMillisOfSecond(int)" map="C"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="org.joda.time.format.DateTimeFormatterBuilder appendYearOfEra(int, int)" map="C"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="org.joda.time.format.DateTimeFormatterBuilder appendWeekyear(int, int)" map="D"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="org.joda.time.format.DateTimeFormatterBuilder appendDayOfMonth(int)" map="D"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="void checkParser(org.joda.time.format.DateTimeParser)" map="B"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="void printUnknownString(java.io.Writer, int)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeekShortText()" map="D"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="org.joda.time.format.DateTimeFormatterBuilder appendCenturyOfEra(int, int)" map="E"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="org.joda.time.format.DateTimeFormatterBuilder appendFractionOfSecond(int, int)" map="F"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="org.joda.time.format.DateTimeFormatterBuilder appendEraText()" map="E"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="org.joda.time.format.DateTimeFormatterBuilder appendClockhourOfHalfday(int)" map="E"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="org.joda.time.format.DateTimeFormatterBuilder appendWeekOfWeekyear(int)" map="F"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeek(int)" map="G"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="java.lang.Object getFormatter()" map="F"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="org.joda.time.format.DateTimeFormatterBuilder appendFractionOfMinute(int, int)" map="G"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="org.joda.time.format.DateTimeFormatterBuilder appendDayOfYear(int)" map="H"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="boolean isParser(java.lang.Object)" map="B"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYearShortText()" map="G"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="org.joda.time.format.DateTimeFormatterBuilder appendYear(int, int)" map="H"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="boolean canBuildPrinter()" map="H"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="org.joda.time.format.DateTimeParser toParser()" map="I"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="org.joda.time.format.DateTimeFormatterBuilder appendClockhourOfDay(int)" map="I"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="void clear()" map="J"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="void appendUnknownString(java.lang.StringBuffer, int)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="org.joda.time.format.DateTimeFormatter toFormatter()" map="K"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="org.joda.time.format.DateTimeFormatterBuilder appendFraction(org.joda.time.DateTimeFieldType, int, int)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="org.joda.time.format.DateTimeFormatterBuilder appendSignedDecimal(org.joda.time.DateTimeFieldType, int, int)" map="B"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="org.joda.time.format.DateTimeFormatterBuilder appendMinuteOfDay(int)" map="J"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="void checkPrinter(org.joda.time.format.DateTimePrinter)" map="B"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYearText()" map="L"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="boolean isFormatter(java.lang.Object)" map="C"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="org.joda.time.format.DateTimeFormatterBuilder append0(org.joda.time.format.DateTimePrinter, org.joda.time.format.DateTimeParser)" map="B"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)" map="C"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="boolean canBuildParser()" map="M"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter, org.joda.time.format.DateTimeParser[])" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneShortName()" map="N"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="org.joda.time.format.DateTimeFormatterBuilder appendSecondOfDay(int)" map="K"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="org.joda.time.format.DateTimeFormatterBuilder appendText(org.joda.time.DateTimeFieldType)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitWeekyear(int)" map="L"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitYear(int, boolean)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="org.joda.time.format.DateTimeFormatterBuilder appendLiteral(java.lang.String)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="org.joda.time.format.DateTimeFormatterBuilder appendPattern(java.lang.String)" map="B"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneOffset(java.lang.String, boolean, int, int)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneId()" map="O"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="org.joda.time.format.DateTimeFormatterBuilder appendHourOfHalfday(int)" map="M"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="org.joda.time.format.DateTimeFormatterBuilder appendMillisOfDay(int)" map="N"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="org.joda.time.format.DateTimeFormatterBuilder appendYearOfCentury(int, int)" map="I"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitWeekyear(int, boolean)" map="B"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="org.joda.time.format.DateTimeFormatterBuilder appendMinuteOfHour(int)" map="O"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType, int, int)" map="C"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeekText()" map="P"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType, int)" map="B"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="org.joda.time.format.DateTimeFormatterBuilder appendShortText(org.joda.time.DateTimeFieldType)" map="B"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="boolean canBuildFormatter()" map="Q"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="boolean isPrinter(java.lang.Object)" map="D"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitYear(int)" map="P"/>
  <method class="org.joda.time.format.DateTimeFormatterBuilder" name="org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYear(int)" map="Q"/>
  <class name="org.joda.time.format.DateTimeFormatter" map="C"/>
  <field class="org.joda.time.format.DateTimeFormatter" name="iPivotYear" map="A"/>
  <field class="org.joda.time.format.DateTimeFormatter" name="iZone" map="B"/>
  <field class="org.joda.time.format.DateTimeFormatter" name="iChrono" map="C"/>
  <field class="org.joda.time.format.DateTimeFormatter" name="iOffsetParsed" map="D"/>
  <field class="org.joda.time.format.DateTimeFormatter" name="iParser" map="E"/>
  <field class="org.joda.time.format.DateTimeFormatter" name="iPrinter" map="F"/>
  <field class="org.joda.time.format.DateTimeFormatter" name="iLocale" map="G"/>
  <method class="org.joda.time.format.DateTimeFormatter" name="void printTo(java.io.Writer, long)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatter" name="org.joda.time.format.DateTimeFormatter withChronology(org.joda.time.Chronology)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatter" name="org.joda.time.format.DateTimeFormatter withZone(org.joda.time.DateTimeZone)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatter" name="java.lang.String print(long)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatter" name="boolean isPrinter()" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatter" name="int parseInto(org.joda.time.ReadWritableInstant, java.lang.String, int)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatter" name="org.joda.time.format.DateTimeParser getParser()" map="B"/>
  <method class="org.joda.time.format.DateTimeFormatter" name="org.joda.time.DateTime parseDateTime(java.lang.String)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatter" name="java.lang.String print(org.joda.time.ReadablePartial)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatter" name="org.joda.time.MutableDateTime parseMutableDateTime(java.lang.String)" map="B"/>
  <method class="org.joda.time.format.DateTimeFormatter" name="org.joda.time.format.DateTimeFormatter withOffsetParsed()" map="C"/>
  <method class="org.joda.time.format.DateTimeFormatter" name="java.util.Locale getLocale()" map="D"/>
  <method class="org.joda.time.format.DateTimeFormatter" name="org.joda.time.format.DateTimeFormatter withPivotYear(java.lang.Integer)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatter" name="java.lang.String print(org.joda.time.ReadableInstant)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatter" name="org.joda.time.format.DateTimePrinter getPrinter()" map="E"/>
  <method class="org.joda.time.format.DateTimeFormatter" name="org.joda.time.format.DateTimeParser requireParser()" map="F"/>
  <method class="org.joda.time.format.DateTimeFormatter" name="org.joda.time.DateTimeZone getZone()" map="G"/>
  <method class="org.joda.time.format.DateTimeFormatter" name="boolean isParser()" map="H"/>
  <method class="org.joda.time.format.DateTimeFormatter" name="void printTo(java.io.Writer, org.joda.time.ReadableInstant)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatter" name="boolean isOffsetParsed()" map="I"/>
  <method class="org.joda.time.format.DateTimeFormatter" name="long parseMillis(java.lang.String)" map="C"/>
  <method class="org.joda.time.format.DateTimeFormatter" name="org.joda.time.Chronology selectChronology(org.joda.time.Chronology)" map="B"/>
  <method class="org.joda.time.format.DateTimeFormatter" name="void printTo(java.lang.StringBuffer, long)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatter" name="org.joda.time.Chronology getChronolgy()" map="J"/>
  <method class="org.joda.time.format.DateTimeFormatter" name="org.joda.time.format.DateTimePrinter requirePrinter()" map="K"/>
  <method class="org.joda.time.format.DateTimeFormatter" name="java.lang.Integer getPivotYear()" map="L"/>
  <method class="org.joda.time.format.DateTimeFormatter" name="org.joda.time.format.DateTimeFormatter withLocale(java.util.Locale)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatter" name="void printTo(java.lang.StringBuffer, org.joda.time.ReadablePartial)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatter" name="void printTo(java.lang.StringBuffer, long, org.joda.time.Chronology)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatter" name="org.joda.time.format.DateTimeFormatter withPivotYear(int)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatter" name="void printTo(java.io.Writer, org.joda.time.ReadablePartial)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatter" name="void printTo(java.io.Writer, long, org.joda.time.Chronology)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormatter" name="void printTo(java.lang.StringBuffer, org.joda.time.ReadableInstant)" map="A"/>
  <class name="org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix" map="_A"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix" name="int scan(java.lang.String, int)" map="A"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix" name="void printTo(java.io.Writer, int)" map="A"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix" name="void printTo(java.lang.StringBuffer, int)" map="A"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix" name="int parse(java.lang.String, int)" map="B"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix" name="int calculatePrintedLength(int)" map="A"/>
  <class name="org.joda.time.format.PeriodFormatterBuilder$Literal" map="_B"/>
  <field class="org.joda.time.format.PeriodFormatterBuilder$Literal" name="EMPTY" map="A"/>
  <field class="org.joda.time.format.PeriodFormatterBuilder$Literal" name="iText" map="B"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder$Literal" name="int parseInto(org.joda.time.ReadWritablePeriod, java.lang.String, int, java.util.Locale)" map="A"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder$Literal" name="void printTo(java.io.Writer, org.joda.time.ReadablePeriod, java.util.Locale)" map="A"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder$Literal" name="int countFieldsToPrint(org.joda.time.ReadablePeriod, int, java.util.Locale)" map="A"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder$Literal" name="void printTo(java.lang.StringBuffer, org.joda.time.ReadablePeriod, java.util.Locale)" map="A"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder$Literal" name="int calculatePrintedLength(org.joda.time.ReadablePeriod, java.util.Locale)" map="A"/>
  <class name="org.joda.time.format.PeriodFormatterBuilder$FieldFormatter" map="_C"/>
  <field class="org.joda.time.format.PeriodFormatterBuilder$FieldFormatter" name="iMinPrintedDigits" map="N"/>
  <field class="org.joda.time.format.PeriodFormatterBuilder$FieldFormatter" name="iMaxParsedDigits" map="O"/>
  <field class="org.joda.time.format.PeriodFormatterBuilder$FieldFormatter" name="iPrefix" map="P"/>
  <field class="org.joda.time.format.PeriodFormatterBuilder$FieldFormatter" name="iRejectSignedValues" map="Q"/>
  <field class="org.joda.time.format.PeriodFormatterBuilder$FieldFormatter" name="iSuffix" map="R"/>
  <field class="org.joda.time.format.PeriodFormatterBuilder$FieldFormatter" name="iPrintZeroSetting" map="S"/>
  <field class="org.joda.time.format.PeriodFormatterBuilder$FieldFormatter" name="iFieldFormatters" map="T"/>
  <field class="org.joda.time.format.PeriodFormatterBuilder$FieldFormatter" name="iFieldType" map="U"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder$FieldFormatter" name="void printTo(java.lang.StringBuffer, org.joda.time.ReadablePeriod, java.util.Locale)" map="A"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder$FieldFormatter" name="void setFieldValue(org.joda.time.ReadWritablePeriod, int, int)" map="A"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder$FieldFormatter" name="long getFieldValue(org.joda.time.ReadablePeriod)" map="A"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder$FieldFormatter" name="int calculatePrintedLength(org.joda.time.ReadablePeriod, java.util.Locale)" map="A"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder$FieldFormatter" name="int countFieldsToPrint(org.joda.time.ReadablePeriod, int, java.util.Locale)" map="A"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder$FieldFormatter" name="boolean isZero(org.joda.time.ReadablePeriod)" map="B"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder$FieldFormatter" name="int getFieldType()" map="A"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder$FieldFormatter" name="int parseInt(java.lang.String, int, int)" map="A"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder$FieldFormatter" name="boolean isSupported(org.joda.time.PeriodType, int)" map="A"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder$FieldFormatter" name="int parseInto(org.joda.time.ReadWritablePeriod, java.lang.String, int, java.util.Locale)" map="A"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder$FieldFormatter" name="void printTo(java.io.Writer, org.joda.time.ReadablePeriod, java.util.Locale)" map="A"/>
  <class name="org.joda.time.format.PeriodFormatterBuilder$CompositeAffix" map="_D"/>
  <field class="org.joda.time.format.PeriodFormatterBuilder$CompositeAffix" name="iRight" map="A"/>
  <field class="org.joda.time.format.PeriodFormatterBuilder$CompositeAffix" name="iLeft" map="B"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder$CompositeAffix" name="int scan(java.lang.String, int)" map="A"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder$CompositeAffix" name="void printTo(java.io.Writer, int)" map="A"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder$CompositeAffix" name="void printTo(java.lang.StringBuffer, int)" map="A"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder$CompositeAffix" name="int parse(java.lang.String, int)" map="B"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder$CompositeAffix" name="int calculatePrintedLength(int)" map="A"/>
  <class name="org.joda.time.format.PeriodFormatterBuilder$Separator" map="_E"/>
  <field class="org.joda.time.format.PeriodFormatterBuilder$Separator" name="iAfterParser" map="C"/>
  <field class="org.joda.time.format.PeriodFormatterBuilder$Separator" name="iText" map="D"/>
  <field class="org.joda.time.format.PeriodFormatterBuilder$Separator" name="iBeforePrinter" map="E"/>
  <field class="org.joda.time.format.PeriodFormatterBuilder$Separator" name="iUseAfter" map="F"/>
  <field class="org.joda.time.format.PeriodFormatterBuilder$Separator" name="iParsedForms" map="G"/>
  <field class="org.joda.time.format.PeriodFormatterBuilder$Separator" name="iAfterPrinter" map="H"/>
  <field class="org.joda.time.format.PeriodFormatterBuilder$Separator" name="iFinalText" map="I"/>
  <field class="org.joda.time.format.PeriodFormatterBuilder$Separator" name="iUseBefore" map="J"/>
  <field class="org.joda.time.format.PeriodFormatterBuilder$Separator" name="iBeforeParser" map="K"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder$Separator" name="int parseInto(org.joda.time.ReadWritablePeriod, java.lang.String, int, java.util.Locale)" map="A"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder$Separator" name="org.joda.time.format.PeriodFormatterBuilder$Separator finish(org.joda.time.format.PeriodPrinter, org.joda.time.format.PeriodParser)" map="A"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder$Separator" name="void printTo(java.io.Writer, org.joda.time.ReadablePeriod, java.util.Locale)" map="A"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder$Separator" name="int countFieldsToPrint(org.joda.time.ReadablePeriod, int, java.util.Locale)" map="A"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder$Separator" name="void printTo(java.lang.StringBuffer, org.joda.time.ReadablePeriod, java.util.Locale)" map="A"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder$Separator" name="int calculatePrintedLength(org.joda.time.ReadablePeriod, java.util.Locale)" map="A"/>
  <class name="org.joda.time.format.PeriodFormatterBuilder$SimpleAffix" map="_F"/>
  <field class="org.joda.time.format.PeriodFormatterBuilder$SimpleAffix" name="iText" map="C"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder$SimpleAffix" name="int scan(java.lang.String, int)" map="A"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder$SimpleAffix" name="void printTo(java.io.Writer, int)" map="A"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder$SimpleAffix" name="void printTo(java.lang.StringBuffer, int)" map="A"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder$SimpleAffix" name="int parse(java.lang.String, int)" map="B"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder$SimpleAffix" name="int calculatePrintedLength(int)" map="A"/>
  <class name="org.joda.time.format.PeriodFormatterBuilder$Composite" map="_G"/>
  <field class="org.joda.time.format.PeriodFormatterBuilder$Composite" name="iParsers" map="L"/>
  <field class="org.joda.time.format.PeriodFormatterBuilder$Composite" name="iPrinters" map="M"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder$Composite" name="int parseInto(org.joda.time.ReadWritablePeriod, java.lang.String, int, java.util.Locale)" map="A"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder$Composite" name="void printTo(java.io.Writer, org.joda.time.ReadablePeriod, java.util.Locale)" map="A"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder$Composite" name="int countFieldsToPrint(org.joda.time.ReadablePeriod, int, java.util.Locale)" map="A"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder$Composite" name="void decompose(java.util.List, java.util.List, java.util.List)" map="A"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder$Composite" name="void addArrayToList(java.util.List, java.lang.Object[])" map="A"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder$Composite" name="void printTo(java.lang.StringBuffer, org.joda.time.ReadablePeriod, java.util.Locale)" map="A"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder$Composite" name="int calculatePrintedLength(org.joda.time.ReadablePeriod, java.util.Locale)" map="A"/>
  <class name="org.joda.time.format.PeriodFormatterBuilder$PluralAffix" map="_H"/>
  <field class="org.joda.time.format.PeriodFormatterBuilder$PluralAffix" name="iPluralText" map="D"/>
  <field class="org.joda.time.format.PeriodFormatterBuilder$PluralAffix" name="iSingularText" map="E"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder$PluralAffix" name="int scan(java.lang.String, int)" map="A"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder$PluralAffix" name="void printTo(java.io.Writer, int)" map="A"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder$PluralAffix" name="void printTo(java.lang.StringBuffer, int)" map="A"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder$PluralAffix" name="int parse(java.lang.String, int)" map="B"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder$PluralAffix" name="int calculatePrintedLength(int)" map="A"/>
  <class name="org.joda.time.format.PeriodFormatterBuilder" map="D"/>
  <field class="org.joda.time.format.PeriodFormatterBuilder" name="iNotParser" map="A"/>
  <field class="org.joda.time.format.PeriodFormatterBuilder" name="iMaxParsedDigits" map="B"/>
  <field class="org.joda.time.format.PeriodFormatterBuilder" name="iNotPrinter" map="C"/>
  <field class="org.joda.time.format.PeriodFormatterBuilder" name="MAX_FIELD" map="D"/>
  <field class="org.joda.time.format.PeriodFormatterBuilder" name="PRINT_ZERO_NEVER" map="E"/>
  <field class="org.joda.time.format.PeriodFormatterBuilder" name="PRINT_ZERO_ALWAYS" map="F"/>
  <field class="org.joda.time.format.PeriodFormatterBuilder" name="YEARS" map="G"/>
  <field class="org.joda.time.format.PeriodFormatterBuilder" name="MINUTES" map="H"/>
  <field class="org.joda.time.format.PeriodFormatterBuilder" name="HOURS" map="I"/>
  <field class="org.joda.time.format.PeriodFormatterBuilder" name="iPrefix" map="J"/>
  <field class="org.joda.time.format.PeriodFormatterBuilder" name="PRINT_ZERO_RARELY_FIRST" map="K"/>
  <field class="org.joda.time.format.PeriodFormatterBuilder" name="iElementPairs" map="L"/>
  <field class="org.joda.time.format.PeriodFormatterBuilder" name="PRINT_ZERO_RARELY_LAST" map="M"/>
  <field class="org.joda.time.format.PeriodFormatterBuilder" name="iPrintZeroSetting" map="N"/>
  <field class="org.joda.time.format.PeriodFormatterBuilder" name="SECONDS" map="O"/>
  <field class="org.joda.time.format.PeriodFormatterBuilder" name="iMinPrintedDigits" map="P"/>
  <field class="org.joda.time.format.PeriodFormatterBuilder" name="PRINT_ZERO_IF_SUPPORTED" map="Q"/>
  <field class="org.joda.time.format.PeriodFormatterBuilder" name="DAYS" map="R"/>
  <field class="org.joda.time.format.PeriodFormatterBuilder" name="SECONDS_MILLIS" map="S"/>
  <field class="org.joda.time.format.PeriodFormatterBuilder" name="MILLIS" map="T"/>
  <field class="org.joda.time.format.PeriodFormatterBuilder" name="SECONDS_OPTIONAL_MILLIS" map="U"/>
  <field class="org.joda.time.format.PeriodFormatterBuilder" name="iRejectSignedValues" map="V"/>
  <field class="org.joda.time.format.PeriodFormatterBuilder" name="MONTHS" map="W"/>
  <field class="org.joda.time.format.PeriodFormatterBuilder" name="WEEKS" map="X"/>
  <field class="org.joda.time.format.PeriodFormatterBuilder" name="iFieldFormatters" map="Y"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder" name="org.joda.time.format.PeriodFormatterBuilder printZeroIfSupported()" map="A"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder" name="org.joda.time.format.PeriodFormatterBuilder append(org.joda.time.format.PeriodPrinter, org.joda.time.format.PeriodParser)" map="A"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder" name="org.joda.time.format.PeriodFormatterBuilder appendSuffix(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)" map="A"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder" name="void appendField(int)" map="A"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder" name="org.joda.time.format.PeriodFormatterBuilder append(org.joda.time.format.PeriodFormatter)" map="A"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder" name="org.joda.time.format.PeriodFormatterBuilder appendPrefix(java.lang.String)" map="A"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder" name="org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String)" map="B"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder" name="org.joda.time.format.PeriodFormatter toFormatter()" map="B"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder" name="org.joda.time.format.PeriodFormatterBuilder appendSecondsWithMillis()" map="C"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder" name="org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String)" map="C"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder" name="org.joda.time.format.PeriodFormatter toFormatter(java.util.List, boolean, boolean)" map="A"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder" name="org.joda.time.format.PeriodFormatterBuilder appendSeparatorIfFieldsAfter(java.lang.String)" map="D"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder" name="org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String, java.lang.String, java.lang.String[], boolean, boolean)" map="A"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder" name="org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String, java.lang.String)" map="A"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder" name="org.joda.time.format.PeriodFormatterBuilder appendPrefix(java.lang.String, java.lang.String)" map="B"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder" name="org.joda.time.format.PeriodFormatterBuilder appendSecondsWithOptionalMillis()" map="D"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder" name="org.joda.time.format.PeriodFormatterBuilder printZeroAlways()" map="E"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder" name="org.joda.time.format.PeriodFormatterBuilder appendSeconds()" map="F"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder" name="org.joda.time.format.PeriodFormatterBuilder appendDays()" map="G"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder" name="org.joda.time.format.PeriodFormatterBuilder appendMillis()" map="H"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder" name="org.joda.time.format.PeriodFormatterBuilder append0(org.joda.time.format.PeriodPrinter, org.joda.time.format.PeriodParser)" map="B"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder" name="org.joda.time.format.PeriodFormatterBuilder printZeroRarelyFirst()" map="I"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder" name="java.lang.Object[] createComposite(java.util.List)" map="A"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder" name="org.joda.time.format.PeriodParser toParser()" map="J"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder" name="void appendField(int, int)" map="A"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder" name="org.joda.time.format.PeriodFormatterBuilder appendHours()" map="K"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder" name="void clear()" map="L"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder" name="org.joda.time.format.PeriodFormatterBuilder appendMinutes()" map="M"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder" name="org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String, java.lang.String, java.lang.String[])" map="A"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder" name="org.joda.time.format.PeriodFormatterBuilder appendSeparatorIfFieldsBefore(java.lang.String)" map="E"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder" name="org.joda.time.format.PeriodFormatterBuilder appendYears()" map="N"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder" name="org.joda.time.format.PeriodFormatterBuilder appendLiteral(java.lang.String)" map="F"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder" name="org.joda.time.format.PeriodFormatterBuilder minimumPrintedDigits(int)" map="B"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder" name="org.joda.time.format.PeriodFormatterBuilder appendWeeks()" map="O"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder" name="org.joda.time.format.PeriodFormatterBuilder maximumParsedDigits(int)" map="C"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder" name="org.joda.time.format.PeriodFormatterBuilder appendPrefix(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)" map="B"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder" name="org.joda.time.format.PeriodFormatterBuilder rejectSignedValues(boolean)" map="A"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder" name="void clearPrefix()" map="P"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder" name="org.joda.time.format.PeriodFormatterBuilder printZeroRarelyLast()" map="Q"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder" name="org.joda.time.format.PeriodFormatterBuilder appendMillis3Digit()" map="R"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder" name="org.joda.time.format.PeriodFormatterBuilder printZeroNever()" map="S"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder" name="org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String, java.lang.String)" map="C"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder" name="org.joda.time.format.PeriodPrinter toPrinter()" map="T"/>
  <method class="org.joda.time.format.PeriodFormatterBuilder" name="org.joda.time.format.PeriodFormatterBuilder appendMonths()" map="U"/>
  <class name="org.joda.time.format.PeriodParser" map="E"/>
  <method class="org.joda.time.format.PeriodParser" name="int parseInto(org.joda.time.ReadWritablePeriod, java.lang.String, int, java.util.Locale)" map="A"/>
  <class name="org.joda.time.format.DateTimeFormat$StyleFormatter" map="_A"/>
  <field class="org.joda.time.format.DateTimeFormat$StyleFormatter" name="iTimeStyle" map="Y"/>
  <field class="org.joda.time.format.DateTimeFormat$StyleFormatter" name="iDateStyle" map="Z"/>
  <field class="org.joda.time.format.DateTimeFormat$StyleFormatter" name="iType" map="_"/>
  <field class="org.joda.time.format.DateTimeFormat$StyleFormatter" name="cCache" map="a"/>
  <method class="org.joda.time.format.DateTimeFormat$StyleFormatter" name="int estimatePrintedLength()" map="A"/>
  <method class="org.joda.time.format.DateTimeFormat$StyleFormatter" name="org.joda.time.format.DateTimeFormatter getFormatter(java.util.Locale)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormat$StyleFormatter" name="void printTo(java.lang.StringBuffer, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormat$StyleFormatter" name="int parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.String, int)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormat$StyleFormatter" name="void printTo(java.lang.StringBuffer, org.joda.time.ReadablePartial, java.util.Locale)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormat$StyleFormatter" name="int estimateParsedLength()" map="B"/>
  <method class="org.joda.time.format.DateTimeFormat$StyleFormatter" name="java.lang.String getPattern(java.util.Locale)" map="B"/>
  <method class="org.joda.time.format.DateTimeFormat$StyleFormatter" name="void printTo(java.io.Writer, org.joda.time.ReadablePartial, java.util.Locale)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormat$StyleFormatter" name="void printTo(java.io.Writer, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale)" map="A"/>
  <class name="org.joda.time.format.DateTimeFormat" map="F"/>
  <field class="org.joda.time.format.DateTimeFormat" name="DATETIME" map="A"/>
  <field class="org.joda.time.format.DateTimeFormat" name="cStyleCache" map="B"/>
  <field class="org.joda.time.format.DateTimeFormat" name="LONG" map="C"/>
  <field class="org.joda.time.format.DateTimeFormat" name="DATE" map="D"/>
  <field class="org.joda.time.format.DateTimeFormat" name="TIME" map="E"/>
  <field class="org.joda.time.format.DateTimeFormat" name="FULL" map="F"/>
  <field class="org.joda.time.format.DateTimeFormat" name="cPatternedCache" map="G"/>
  <field class="org.joda.time.format.DateTimeFormat" name="NONE" map="H"/>
  <field class="org.joda.time.format.DateTimeFormat" name="MEDIUM" map="I"/>
  <field class="org.joda.time.format.DateTimeFormat" name="SHORT" map="J"/>
  <method class="org.joda.time.format.DateTimeFormat" name="int selectStyle(char)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormat" name="org.joda.time.format.DateTimeFormatter longDate()" map="A"/>
  <method class="org.joda.time.format.DateTimeFormat" name="org.joda.time.format.DateTimeFormatter createFormatterForStyle(java.lang.String)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormat" name="void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder, java.lang.String)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormat" name="org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int, int)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormat" name="java.lang.String patternForStyle(java.lang.String, java.util.Locale)" map="A"/>
  <method class="org.joda.time.format.DateTimeFormat" name="org.joda.time.format.DateTimeFormatter mediumDateTime()" map="B"/>
  <method class="org.joda.time.format.DateTimeFormat" name="org.joda.time.format.DateTimeFormatter mediumTime()" map="C"/>
  <method class="org.joda.time.format.DateTimeFormat" name="void appendPatternTo(org.joda.time.format.DateTimeFormatterBuilder, java.lang.String)" map="B"/>
  <method class="org.joda.time.format.DateTimeFormat" name="org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)" map="B"/>
  <method class="org.joda.time.format.DateTimeFormat" name="org.joda.time.format.DateTimeFormatter fullTime()" map="D"/>
  <method class="org.joda.time.format.DateTimeFormat" name="org.joda.time.format.DateTimeFormatter shortDate()" map="E"/>
  <method class="org.joda.time.format.DateTimeFormat" name="java.lang.String parseToken(java.lang.String, int[])" map="A"/>
  <method class="org.joda.time.format.DateTimeFormat" name="org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)" map="C"/>
  <method class="org.joda.time.format.DateTimeFormat" name="org.joda.time.format.DateTimeFormatter longTime()" map="F"/>
  <method class="org.joda.time.format.DateTimeFormat" name="org.joda.time.format.DateTimeFormatter fullDateTime()" map="G"/>
  <method class="org.joda.time.format.DateTimeFormat" name="org.joda.time.format.DateTimeFormatter forStyle(java.lang.String)" map="D"/>
  <method class="org.joda.time.format.DateTimeFormat" name="org.joda.time.format.DateTimeFormatter mediumDate()" map="H"/>
  <method class="org.joda.time.format.DateTimeFormat" name="org.joda.time.format.DateTimeFormatter shortDateTime()" map="I"/>
  <method class="org.joda.time.format.DateTimeFormat" name="org.joda.time.format.DateTimeFormatter longDateTime()" map="J"/>
  <method class="org.joda.time.format.DateTimeFormat" name="org.joda.time.format.DateTimeFormatter fullDate()" map="K"/>
  <method class="org.joda.time.format.DateTimeFormat" name="boolean isNumericToken(java.lang.String)" map="E"/>
  <method class="org.joda.time.format.DateTimeFormat" name="org.joda.time.format.DateTimeFormatter shortTime()" map="L"/>
  <class name="org.joda.time.format.DateTimeParserBucket$SavedState" map="_A"/>
  <field class="org.joda.time.format.DateTimeParserBucket$SavedState" name="this$0" map="this$0"/>
  <field class="org.joda.time.format.DateTimeParserBucket$SavedState" name="iZone" map="A"/>
  <field class="org.joda.time.format.DateTimeParserBucket$SavedState" name="iSavedFieldsCount" map="B"/>
  <field class="org.joda.time.format.DateTimeParserBucket$SavedState" name="iSavedFields" map="C"/>
  <field class="org.joda.time.format.DateTimeParserBucket$SavedState" name="iOffset" map="D"/>
  <method class="org.joda.time.format.DateTimeParserBucket$SavedState" name="boolean restoreState(org.joda.time.format.DateTimeParserBucket)" map="A"/>
  <class name="org.joda.time.format.DateTimeParserBucket$SavedField" map="_B"/>
  <field class="org.joda.time.format.DateTimeParserBucket$SavedField" name="iLocale" map="A"/>
  <field class="org.joda.time.format.DateTimeParserBucket$SavedField" name="iText" map="B"/>
  <field class="org.joda.time.format.DateTimeParserBucket$SavedField" name="iValue" map="C"/>
  <field class="org.joda.time.format.DateTimeParserBucket$SavedField" name="iField" map="D"/>
  <method class="org.joda.time.format.DateTimeParserBucket$SavedField" name="int compareReverse(org.joda.time.DurationField, org.joda.time.DurationField)" map="A"/>
  <method class="org.joda.time.format.DateTimeParserBucket$SavedField" name="long set(long, boolean)" map="A"/>
  <method class="org.joda.time.format.DateTimeParserBucket$SavedField" name="int compareTo(java.lang.Object)" map="compareTo"/>
  <class name="org.joda.time.format.DateTimeParserBucket" map="G"/>
  <field class="org.joda.time.format.DateTimeParserBucket" name="iMillis" map="A"/>
  <field class="org.joda.time.format.DateTimeParserBucket" name="iSavedFieldsCount" map="B"/>
  <field class="org.joda.time.format.DateTimeParserBucket" name="iOffset" map="C"/>
  <field class="org.joda.time.format.DateTimeParserBucket" name="iSavedState" map="D"/>
  <field class="org.joda.time.format.DateTimeParserBucket" name="iSavedFields" map="E"/>
  <field class="org.joda.time.format.DateTimeParserBucket" name="iChrono" map="F"/>
  <field class="org.joda.time.format.DateTimeParserBucket" name="iZone" map="G"/>
  <field class="org.joda.time.format.DateTimeParserBucket" name="iSavedFieldsShared" map="H"/>
  <field class="org.joda.time.format.DateTimeParserBucket" name="iLocale" map="I"/>
  <field class="org.joda.time.format.DateTimeParserBucket" name="iPivotYear" map="J"/>
  <method class="org.joda.time.format.DateTimeParserBucket" name="void sort(java.lang.Comparable[], int)" map="A"/>
  <method class="org.joda.time.format.DateTimeParserBucket" name="void setPivotYear(java.lang.Integer)" map="A"/>
  <method class="org.joda.time.format.DateTimeParserBucket" name="long computeMillis()" map="A"/>
  <method class="org.joda.time.format.DateTimeParserBucket" name="boolean restoreState(java.lang.Object)" map="A"/>
  <method class="org.joda.time.format.DateTimeParserBucket" name="void saveField(org.joda.time.DateTimeFieldType, java.lang.String, java.util.Locale)" map="A"/>
  <method class="org.joda.time.format.DateTimeParserBucket" name="org.joda.time.DateTimeZone access$002(org.joda.time.format.DateTimeParserBucket, org.joda.time.DateTimeZone)" map="access$002"/>
  <method class="org.joda.time.format.DateTimeParserBucket" name="int access$100(org.joda.time.format.DateTimeParserBucket)" map="access$100"/>
  <method class="org.joda.time.format.DateTimeParserBucket" name="org.joda.time.format.DateTimeParserBucket$SavedField[] access$200(org.joda.time.format.DateTimeParserBucket)" map="access$200"/>
  <method class="org.joda.time.format.DateTimeParserBucket" name="java.util.Locale getLocale()" map="B"/>
  <method class="org.joda.time.format.DateTimeParserBucket" name="org.joda.time.DateTimeZone access$000(org.joda.time.format.DateTimeParserBucket)" map="access$000"/>
  <method class="org.joda.time.format.DateTimeParserBucket" name="int access$102(org.joda.time.format.DateTimeParserBucket, int)" map="access$102"/>
  <method class="org.joda.time.format.DateTimeParserBucket" name="org.joda.time.Chronology getChronology()" map="C"/>
  <method class="org.joda.time.format.DateTimeParserBucket" name="org.joda.time.DateTimeZone getZone()" map="D"/>
  <method class="org.joda.time.format.DateTimeParserBucket" name="java.lang.Object saveState()" map="E"/>
  <method class="org.joda.time.format.DateTimeParserBucket" name="void saveField(org.joda.time.DateTimeFieldType, int)" map="A"/>
  <method class="org.joda.time.format.DateTimeParserBucket" name="void saveField(org.joda.time.format.DateTimeParserBucket$SavedField)" map="A"/>
  <method class="org.joda.time.format.DateTimeParserBucket" name="void setZone(org.joda.time.DateTimeZone)" map="A"/>
  <method class="org.joda.time.format.DateTimeParserBucket" name="int access$302(org.joda.time.format.DateTimeParserBucket, int)" map="access$302"/>
  <method class="org.joda.time.format.DateTimeParserBucket" name="long computeMillis(boolean)" map="A"/>
  <method class="org.joda.time.format.DateTimeParserBucket" name="void saveField(org.joda.time.DateTimeField, int)" map="A"/>
  <method class="org.joda.time.format.DateTimeParserBucket" name="boolean access$402(org.joda.time.format.DateTimeParserBucket, boolean)" map="access$402"/>
  <method class="org.joda.time.format.DateTimeParserBucket" name="org.joda.time.format.DateTimeParserBucket$SavedField[] access$202(org.joda.time.format.DateTimeParserBucket, org.joda.time.format.DateTimeParserBucket$SavedField[])" map="access$202"/>
  <method class="org.joda.time.format.DateTimeParserBucket" name="int getOffset()" map="F"/>
  <method class="org.joda.time.format.DateTimeParserBucket" name="long computeMillis(boolean, java.lang.String)" map="A"/>
  <method class="org.joda.time.format.DateTimeParserBucket" name="int access$300(org.joda.time.format.DateTimeParserBucket)" map="access$300"/>
  <method class="org.joda.time.format.DateTimeParserBucket" name="void setOffset(int)" map="A"/>
  <method class="org.joda.time.format.DateTimeParserBucket" name="java.lang.Integer getPivotYear()" map="G"/>
  <class name="org.joda.time.format.DateTimeParser" map="H"/>
  <method class="org.joda.time.format.DateTimeParser" name="int parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.String, int)" map="A"/>
  <method class="org.joda.time.format.DateTimeParser" name="int estimateParsedLength()" map="B"/>
  <class name="org.joda.time.format.ISOPeriodFormat" map="I"/>
  <field class="org.joda.time.format.ISOPeriodFormat" name="cAlternate" map="A"/>
  <field class="org.joda.time.format.ISOPeriodFormat" name="cStandard" map="B"/>
  <field class="org.joda.time.format.ISOPeriodFormat" name="cAlternateExtended" map="C"/>
  <field class="org.joda.time.format.ISOPeriodFormat" name="cAlternateWithWeeks" map="D"/>
  <field class="org.joda.time.format.ISOPeriodFormat" name="cAlternateExtendedWihWeeks" map="E"/>
  <method class="org.joda.time.format.ISOPeriodFormat" name="org.joda.time.format.PeriodFormatter alternateExtended()" map="A"/>
  <method class="org.joda.time.format.ISOPeriodFormat" name="org.joda.time.format.PeriodFormatter standard()" map="B"/>
  <method class="org.joda.time.format.ISOPeriodFormat" name="org.joda.time.format.PeriodFormatter alternateExtendedWithWeeks()" map="C"/>
  <method class="org.joda.time.format.ISOPeriodFormat" name="org.joda.time.format.PeriodFormatter alternateWithWeeks()" map="D"/>
  <method class="org.joda.time.format.ISOPeriodFormat" name="org.joda.time.format.PeriodFormatter alternate()" map="E"/>
  <class name="org.joda.time.format.PeriodFormatter" map="J"/>
  <field class="org.joda.time.format.PeriodFormatter" name="iParser" map="A"/>
  <field class="org.joda.time.format.PeriodFormatter" name="iPrinter" map="B"/>
  <field class="org.joda.time.format.PeriodFormatter" name="iParseType" map="C"/>
  <field class="org.joda.time.format.PeriodFormatter" name="iLocale" map="D"/>
  <method class="org.joda.time.format.PeriodFormatter" name="org.joda.time.MutablePeriod parseMutablePeriod(java.lang.String)" map="A"/>
  <method class="org.joda.time.format.PeriodFormatter" name="boolean isParser()" map="A"/>
  <method class="org.joda.time.format.PeriodFormatter" name="org.joda.time.format.PeriodFormatter withParseType(org.joda.time.PeriodType)" map="A"/>
  <method class="org.joda.time.format.PeriodFormatter" name="org.joda.time.format.PeriodFormatter withLocale(java.util.Locale)" map="A"/>
  <method class="org.joda.time.format.PeriodFormatter" name="int parseInto(org.joda.time.ReadWritablePeriod, java.lang.String, int)" map="A"/>
  <method class="org.joda.time.format.PeriodFormatter" name="void printTo(java.io.Writer, org.joda.time.ReadablePeriod)" map="A"/>
  <method class="org.joda.time.format.PeriodFormatter" name="void checkPrinter()" map="B"/>
  <method class="org.joda.time.format.PeriodFormatter" name="void checkParser()" map="C"/>
  <method class="org.joda.time.format.PeriodFormatter" name="org.joda.time.PeriodType getParseType()" map="D"/>
  <method class="org.joda.time.format.PeriodFormatter" name="java.util.Locale getLocale()" map="E"/>
  <method class="org.joda.time.format.PeriodFormatter" name="boolean isPrinter()" map="F"/>
  <method class="org.joda.time.format.PeriodFormatter" name="void checkPeriod(org.joda.time.ReadablePeriod)" map="A"/>
  <method class="org.joda.time.format.PeriodFormatter" name="org.joda.time.Period parsePeriod(java.lang.String)" map="B"/>
  <method class="org.joda.time.format.PeriodFormatter" name="org.joda.time.format.PeriodParser getParser()" map="G"/>
  <method class="org.joda.time.format.PeriodFormatter" name="org.joda.time.format.PeriodPrinter getPrinter()" map="H"/>
  <method class="org.joda.time.format.PeriodFormatter" name="java.lang.String print(org.joda.time.ReadablePeriod)" map="B"/>
  <method class="org.joda.time.format.PeriodFormatter" name="void printTo(java.lang.StringBuffer, org.joda.time.ReadablePeriod)" map="A"/>
  <class name="org.joda.time.format.PeriodFormat" map="K"/>
  <field class="org.joda.time.format.PeriodFormat" name="cEnglishWords" map="A"/>
  <method class="org.joda.time.format.PeriodFormat" name="org.joda.time.format.PeriodFormatter getDefault()" map="A"/>
  <class name="org.joda.time.format.PeriodPrinter" map="L"/>
  <method class="org.joda.time.format.PeriodPrinter" name="void printTo(java.io.Writer, org.joda.time.ReadablePeriod, java.util.Locale)" map="A"/>
  <method class="org.joda.time.format.PeriodPrinter" name="int countFieldsToPrint(org.joda.time.ReadablePeriod, int, java.util.Locale)" map="A"/>
  <method class="org.joda.time.format.PeriodPrinter" name="void printTo(java.lang.StringBuffer, org.joda.time.ReadablePeriod, java.util.Locale)" map="A"/>
  <method class="org.joda.time.format.PeriodPrinter" name="int calculatePrintedLength(org.joda.time.ReadablePeriod, java.util.Locale)" map="A"/>
  <class name="org.joda.time.format.FormatUtils" map="M"/>
  <field class="org.joda.time.format.FormatUtils" name="LOG_10" map="A"/>
  <method class="org.joda.time.format.FormatUtils" name="void writeUnpaddedInteger(java.io.Writer, long)" map="A"/>
  <method class="org.joda.time.format.FormatUtils" name="void appendUnpaddedInteger(java.lang.StringBuffer, long)" map="A"/>
  <method class="org.joda.time.format.FormatUtils" name="java.lang.String createErrorMessage(java.lang.String, int)" map="A"/>
  <method class="org.joda.time.format.FormatUtils" name="int parseTwoDigits(java.lang.String, int)" map="B"/>
  <method class="org.joda.time.format.FormatUtils" name="int calculateDigitCount(long)" map="A"/>
  <method class="org.joda.time.format.FormatUtils" name="void writePaddedInteger(java.io.Writer, long, int)" map="A"/>
  <method class="org.joda.time.format.FormatUtils" name="void appendPaddedInteger(java.lang.StringBuffer, long, int)" map="A"/>
  <method class="org.joda.time.format.FormatUtils" name="void writePaddedInteger(java.io.Writer, int, int)" map="A"/>
  <method class="org.joda.time.format.FormatUtils" name="void writeUnpaddedInteger(java.io.Writer, int)" map="A"/>
  <method class="org.joda.time.format.FormatUtils" name="void appendPaddedInteger(java.lang.StringBuffer, int, int)" map="A"/>
  <method class="org.joda.time.format.FormatUtils" name="void appendUnpaddedInteger(java.lang.StringBuffer, int)" map="A"/>
  <class name="org.joda.time.format.DateTimePrinter" map="N"/>
  <method class="org.joda.time.format.DateTimePrinter" name="void printTo(java.lang.StringBuffer, org.joda.time.ReadablePartial, java.util.Locale)" map="A"/>
  <method class="org.joda.time.format.DateTimePrinter" name="int estimatePrintedLength()" map="A"/>
  <method class="org.joda.time.format.DateTimePrinter" name="void printTo(java.lang.StringBuffer, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale)" map="A"/>
  <method class="org.joda.time.format.DateTimePrinter" name="void printTo(java.io.Writer, org.joda.time.ReadablePartial, java.util.Locale)" map="A"/>
  <method class="org.joda.time.format.DateTimePrinter" name="void printTo(java.io.Writer, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale)" map="A"/>
  <package name="org.joda.time.field" map="D"/>
  <class name="org.joda.time.field.ZeroIsMaxDateTimeField" map="A"/>
  <field class="org.joda.time.field.ZeroIsMaxDateTimeField" name="serialVersionUID" map="&#x00cf;"/>
  <method class="org.joda.time.field.ZeroIsMaxDateTimeField" name="long roundHalfFloor(long)" map="F"/>
  <method class="org.joda.time.field.ZeroIsMaxDateTimeField" name="org.joda.time.DurationField getLeapDurationField()" map="B"/>
  <method class="org.joda.time.field.ZeroIsMaxDateTimeField" name="int getMinimumValue(org.joda.time.ReadablePartial)" map="A"/>
  <method class="org.joda.time.field.ZeroIsMaxDateTimeField" name="long remainder(long)" map="D"/>
  <method class="org.joda.time.field.ZeroIsMaxDateTimeField" name="long roundFloor(long)" map="A"/>
  <method class="org.joda.time.field.ZeroIsMaxDateTimeField" name="long add(long, int)" map="B"/>
  <method class="org.joda.time.field.ZeroIsMaxDateTimeField" name="int getMinimumValue(org.joda.time.ReadablePartial, int[])" map="B"/>
  <method class="org.joda.time.field.ZeroIsMaxDateTimeField" name="long getDifferenceAsLong(long, long)" map="C"/>
  <method class="org.joda.time.field.ZeroIsMaxDateTimeField" name="int getMinimumValue(long)" map="G"/>
  <method class="org.joda.time.field.ZeroIsMaxDateTimeField" name="int getMinimumValue()" map="D"/>
  <method class="org.joda.time.field.ZeroIsMaxDateTimeField" name="long roundHalfEven(long)" map="K"/>
  <method class="org.joda.time.field.ZeroIsMaxDateTimeField" name="int getMaximumValue(org.joda.time.ReadablePartial, int[])" map="A"/>
  <method class="org.joda.time.field.ZeroIsMaxDateTimeField" name="long roundHalfCeiling(long)" map="I"/>
  <method class="org.joda.time.field.ZeroIsMaxDateTimeField" name="int getMaximumValue(org.joda.time.ReadablePartial)" map="B"/>
  <method class="org.joda.time.field.ZeroIsMaxDateTimeField" name="boolean isLeap(long)" map="L"/>
  <method class="org.joda.time.field.ZeroIsMaxDateTimeField" name="int get(long)" map="E"/>
  <method class="org.joda.time.field.ZeroIsMaxDateTimeField" name="int getLeapAmount(long)" map="B"/>
  <method class="org.joda.time.field.ZeroIsMaxDateTimeField" name="int getDifference(long, long)" map="B"/>
  <method class="org.joda.time.field.ZeroIsMaxDateTimeField" name="int getMaximumValue()" map="F"/>
  <method class="org.joda.time.field.ZeroIsMaxDateTimeField" name="long set(long, int)" map="C"/>
  <method class="org.joda.time.field.ZeroIsMaxDateTimeField" name="int[] addWrapField(org.joda.time.ReadablePartial, int, int[], int)" map="C"/>
  <method class="org.joda.time.field.ZeroIsMaxDateTimeField" name="long add(long, long)" map="A"/>
  <method class="org.joda.time.field.ZeroIsMaxDateTimeField" name="long roundCeiling(long)" map="H"/>
  <method class="org.joda.time.field.ZeroIsMaxDateTimeField" name="int getMaximumValue(long)" map="M"/>
  <method class="org.joda.time.field.ZeroIsMaxDateTimeField" name="long addWrapField(long, int)" map="A"/>
  <class name="org.joda.time.field.PreciseDurationField" map="B"/>
  <field class="org.joda.time.field.PreciseDurationField" name="iUnitMillis" map="O"/>
  <field class="org.joda.time.field.PreciseDurationField" name="serialVersionUID" map="P"/>
  <method class="org.joda.time.field.PreciseDurationField" name="long getMillis(long, long)" map="C"/>
  <method class="org.joda.time.field.PreciseDurationField" name="boolean isPrecise()" map="A"/>
  <method class="org.joda.time.field.PreciseDurationField" name="long add(long, int)" map="A"/>
  <method class="org.joda.time.field.PreciseDurationField" name="int hashCode()" map="hashCode"/>
  <method class="org.joda.time.field.PreciseDurationField" name="boolean equals(java.lang.Object)" map="equals"/>
  <method class="org.joda.time.field.PreciseDurationField" name="long getMillis(int, long)" map="A"/>
  <method class="org.joda.time.field.PreciseDurationField" name="long getUnitMillis()" map="E"/>
  <method class="org.joda.time.field.PreciseDurationField" name="long add(long, long)" map="E"/>
  <method class="org.joda.time.field.PreciseDurationField" name="long getValueAsLong(long, long)" map="A"/>
  <method class="org.joda.time.field.PreciseDurationField" name="long getDifferenceAsLong(long, long)" map="B"/>
  <class name="org.joda.time.field.DelegatedDurationField" map="C"/>
  <field class="org.joda.time.field.DelegatedDurationField" name="iType" map="A"/>
  <field class="org.joda.time.field.DelegatedDurationField" name="iField" map="B"/>
  <field class="org.joda.time.field.DelegatedDurationField" name="serialVersionUID" map="C"/>
  <method class="org.joda.time.field.DelegatedDurationField" name="long getValueAsLong(long, long)" map="A"/>
  <method class="org.joda.time.field.DelegatedDurationField" name="long getMillis(int, long)" map="A"/>
  <method class="org.joda.time.field.DelegatedDurationField" name="long getValueAsLong(long)" map="A"/>
  <method class="org.joda.time.field.DelegatedDurationField" name="long add(long, int)" map="A"/>
  <method class="org.joda.time.field.DelegatedDurationField" name="boolean isPrecise()" map="A"/>
  <method class="org.joda.time.field.DelegatedDurationField" name="long getDifferenceAsLong(long, long)" map="B"/>
  <method class="org.joda.time.field.DelegatedDurationField" name="boolean isSupported()" map="B"/>
  <method class="org.joda.time.field.DelegatedDurationField" name="long getMillis(long, long)" map="C"/>
  <method class="org.joda.time.field.DelegatedDurationField" name="java.lang.String toString()" map="toString"/>
  <method class="org.joda.time.field.DelegatedDurationField" name="long getMillis(int)" map="A"/>
  <method class="org.joda.time.field.DelegatedDurationField" name="java.lang.String getName()" map="C"/>
  <method class="org.joda.time.field.DelegatedDurationField" name="int getDifference(long, long)" map="D"/>
  <method class="org.joda.time.field.DelegatedDurationField" name="long add(long, long)" map="E"/>
  <method class="org.joda.time.field.DelegatedDurationField" name="org.joda.time.DurationFieldType getType()" map="D"/>
  <method class="org.joda.time.field.DelegatedDurationField" name="long getUnitMillis()" map="E"/>
  <method class="org.joda.time.field.DelegatedDurationField" name="int compareTo(java.lang.Object)" map="compareTo"/>
  <method class="org.joda.time.field.DelegatedDurationField" name="org.joda.time.DurationField getWrappedField()" map="F"/>
  <method class="org.joda.time.field.DelegatedDurationField" name="long getMillis(long)" map="B"/>
  <method class="org.joda.time.field.DelegatedDurationField" name="int getValue(long)" map="C"/>
  <method class="org.joda.time.field.DelegatedDurationField" name="int getValue(long, long)" map="F"/>
  <class name="org.joda.time.field.DividedDateTimeField" map="D"/>
  <field class="org.joda.time.field.DividedDateTimeField" name="iMax" map="&#x00d0;"/>
  <field class="org.joda.time.field.DividedDateTimeField" name="iDivisor" map="&#x00d1;"/>
  <field class="org.joda.time.field.DividedDateTimeField" name="iMin" map="&#x00d2;"/>
  <field class="org.joda.time.field.DividedDateTimeField" name="iDurationField" map="&#x00d3;"/>
  <field class="org.joda.time.field.DividedDateTimeField" name="serialVersionUID" map="&#x00d4;"/>
  <method class="org.joda.time.field.DividedDateTimeField" name="int getDivisor()" map="a"/>
  <method class="org.joda.time.field.DividedDateTimeField" name="org.joda.time.DurationField getDurationField()" map="H"/>
  <method class="org.joda.time.field.DividedDateTimeField" name="long add(long, int)" map="B"/>
  <method class="org.joda.time.field.DividedDateTimeField" name="long set(long, int)" map="C"/>
  <method class="org.joda.time.field.DividedDateTimeField" name="long add(long, long)" map="A"/>
  <method class="org.joda.time.field.DividedDateTimeField" name="long remainder(long)" map="D"/>
  <method class="org.joda.time.field.DividedDateTimeField" name="long roundFloor(long)" map="A"/>
  <method class="org.joda.time.field.DividedDateTimeField" name="int getMaximumValue()" map="F"/>
  <method class="org.joda.time.field.DividedDateTimeField" name="long getDifferenceAsLong(long, long)" map="C"/>
  <method class="org.joda.time.field.DividedDateTimeField" name="int getDifference(long, long)" map="B"/>
  <method class="org.joda.time.field.DividedDateTimeField" name="int getRemainder(int)" map="A"/>
  <method class="org.joda.time.field.DividedDateTimeField" name="int getMinimumValue()" map="D"/>
  <method class="org.joda.time.field.DividedDateTimeField" name="int get(long)" map="E"/>
  <method class="org.joda.time.field.DividedDateTimeField" name="long addWrapField(long, int)" map="A"/>
  <class name="org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField" map="_A"/>
  <field class="org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField" name="this$0" map="this$0"/>
  <field class="org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField" name="serialVersionUID" map="Q"/>
  <method class="org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField" name="long getMillis(long, long)" map="C"/>
  <method class="org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField" name="boolean isPrecise()" map="A"/>
  <method class="org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField" name="long add(long, int)" map="A"/>
  <method class="org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField" name="long getMillis(int, long)" map="A"/>
  <method class="org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField" name="long getUnitMillis()" map="E"/>
  <method class="org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField" name="long add(long, long)" map="E"/>
  <method class="org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField" name="long getValueAsLong(long, long)" map="A"/>
  <method class="org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField" name="long getDifferenceAsLong(long, long)" map="B"/>
  <method class="org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField" name="int getDifference(long, long)" map="D"/>
  <method class="org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField" name="int getValue(long, long)" map="F"/>
  <class name="org.joda.time.field.ImpreciseDateTimeField" map="E"/>
  <field class="org.joda.time.field.ImpreciseDateTimeField" name="iDurationField" map="l"/>
  <field class="org.joda.time.field.ImpreciseDateTimeField" name="iUnitMillis" map="m"/>
  <field class="org.joda.time.field.ImpreciseDateTimeField" name="serialVersionUID" map="n"/>
  <method class="org.joda.time.field.ImpreciseDateTimeField" name="org.joda.time.DurationField getDurationField()" map="H"/>
  <method class="org.joda.time.field.ImpreciseDateTimeField" name="long add(long, int)" map="B"/>
  <method class="org.joda.time.field.ImpreciseDateTimeField" name="long getDurationUnitMillis()" map="P"/>
  <method class="org.joda.time.field.ImpreciseDateTimeField" name="long set(long, int)" map="C"/>
  <method class="org.joda.time.field.ImpreciseDateTimeField" name="long add(long, long)" map="A"/>
  <method class="org.joda.time.field.ImpreciseDateTimeField" name="org.joda.time.DurationField getRangeDurationField()" map="A"/>
  <method class="org.joda.time.field.ImpreciseDateTimeField" name="long roundFloor(long)" map="A"/>
  <method class="org.joda.time.field.ImpreciseDateTimeField" name="long getDifferenceAsLong(long, long)" map="C"/>
  <method class="org.joda.time.field.ImpreciseDateTimeField" name="int getDifference(long, long)" map="B"/>
  <method class="org.joda.time.field.ImpreciseDateTimeField" name="int get(long)" map="E"/>
  <class name="org.joda.time.field.DecoratedDateTimeField" map="F"/>
  <field class="org.joda.time.field.DecoratedDateTimeField" name="iField" map="&#x00c7;"/>
  <field class="org.joda.time.field.DecoratedDateTimeField" name="serialVersionUID" map="&#x00c8;"/>
  <method class="org.joda.time.field.DecoratedDateTimeField" name="org.joda.time.DurationField getDurationField()" map="H"/>
  <method class="org.joda.time.field.DecoratedDateTimeField" name="long set(long, int)" map="C"/>
  <method class="org.joda.time.field.DecoratedDateTimeField" name="org.joda.time.DurationField getRangeDurationField()" map="A"/>
  <method class="org.joda.time.field.DecoratedDateTimeField" name="long roundFloor(long)" map="A"/>
  <method class="org.joda.time.field.DecoratedDateTimeField" name="int getMaximumValue()" map="F"/>
  <method class="org.joda.time.field.DecoratedDateTimeField" name="org.joda.time.DateTimeField getWrappedField()" map="Z"/>
  <method class="org.joda.time.field.DecoratedDateTimeField" name="boolean isLenient()" map="C"/>
  <method class="org.joda.time.field.DecoratedDateTimeField" name="int getMinimumValue()" map="D"/>
  <method class="org.joda.time.field.DecoratedDateTimeField" name="int get(long)" map="E"/>
  <class name="org.joda.time.field.ScaledDurationField" map="G"/>
  <field class="org.joda.time.field.ScaledDurationField" name="iScalar" map="U"/>
  <field class="org.joda.time.field.ScaledDurationField" name="serialVersionUID" map="V"/>
  <method class="org.joda.time.field.ScaledDurationField" name="long getMillis(long, long)" map="C"/>
  <method class="org.joda.time.field.ScaledDurationField" name="int getValue(long)" map="C"/>
  <method class="org.joda.time.field.ScaledDurationField" name="long add(long, int)" map="A"/>
  <method class="org.joda.time.field.ScaledDurationField" name="long getMillis(int)" map="A"/>
  <method class="org.joda.time.field.ScaledDurationField" name="int hashCode()" map="hashCode"/>
  <method class="org.joda.time.field.ScaledDurationField" name="boolean equals(java.lang.Object)" map="equals"/>
  <method class="org.joda.time.field.ScaledDurationField" name="long getUnitMillis()" map="E"/>
  <method class="org.joda.time.field.ScaledDurationField" name="long getMillis(int, long)" map="A"/>
  <method class="org.joda.time.field.ScaledDurationField" name="long add(long, long)" map="E"/>
  <method class="org.joda.time.field.ScaledDurationField" name="long getMillis(long)" map="B"/>
  <method class="org.joda.time.field.ScaledDurationField" name="long getValueAsLong(long, long)" map="A"/>
  <method class="org.joda.time.field.ScaledDurationField" name="int getScalar()" map="K"/>
  <method class="org.joda.time.field.ScaledDurationField" name="long getDifferenceAsLong(long, long)" map="B"/>
  <method class="org.joda.time.field.ScaledDurationField" name="int getDifference(long, long)" map="D"/>
  <method class="org.joda.time.field.ScaledDurationField" name="long getValueAsLong(long)" map="A"/>
  <method class="org.joda.time.field.ScaledDurationField" name="int getValue(long, long)" map="F"/>
  <class name="org.joda.time.field.UnsupportedDurationField" map="H"/>
  <field class="org.joda.time.field.UnsupportedDurationField" name="iType" map="D"/>
  <field class="org.joda.time.field.UnsupportedDurationField" name="cCache" map="E"/>
  <field class="org.joda.time.field.UnsupportedDurationField" name="serialVersionUID" map="F"/>
  <method class="org.joda.time.field.UnsupportedDurationField" name="java.lang.UnsupportedOperationException unsupported()" map="G"/>
  <method class="org.joda.time.field.UnsupportedDurationField" name="long getValueAsLong(long, long)" map="A"/>
  <method class="org.joda.time.field.UnsupportedDurationField" name="long getMillis(int, long)" map="A"/>
  <method class="org.joda.time.field.UnsupportedDurationField" name="long getValueAsLong(long)" map="A"/>
  <method class="org.joda.time.field.UnsupportedDurationField" name="long add(long, int)" map="A"/>
  <method class="org.joda.time.field.UnsupportedDurationField" name="boolean isPrecise()" map="A"/>
  <method class="org.joda.time.field.UnsupportedDurationField" name="boolean equals(java.lang.Object)" map="equals"/>
  <method class="org.joda.time.field.UnsupportedDurationField" name="long getDifferenceAsLong(long, long)" map="B"/>
  <method class="org.joda.time.field.UnsupportedDurationField" name="boolean isSupported()" map="B"/>
  <method class="org.joda.time.field.UnsupportedDurationField" name="long getMillis(long, long)" map="C"/>
  <method class="org.joda.time.field.UnsupportedDurationField" name="java.lang.String toString()" map="toString"/>
  <method class="org.joda.time.field.UnsupportedDurationField" name="long getMillis(int)" map="A"/>
  <method class="org.joda.time.field.UnsupportedDurationField" name="org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)" map="A"/>
  <method class="org.joda.time.field.UnsupportedDurationField" name="int hashCode()" map="hashCode"/>
  <method class="org.joda.time.field.UnsupportedDurationField" name="java.lang.Object readResolve()" map="H"/>
  <method class="org.joda.time.field.UnsupportedDurationField" name="java.lang.String getName()" map="C"/>
  <method class="org.joda.time.field.UnsupportedDurationField" name="int getDifference(long, long)" map="D"/>
  <method class="org.joda.time.field.UnsupportedDurationField" name="long add(long, long)" map="E"/>
  <method class="org.joda.time.field.UnsupportedDurationField" name="org.joda.time.DurationFieldType getType()" map="D"/>
  <method class="org.joda.time.field.UnsupportedDurationField" name="long getUnitMillis()" map="E"/>
  <method class="org.joda.time.field.UnsupportedDurationField" name="int compareTo(java.lang.Object)" map="compareTo"/>
  <method class="org.joda.time.field.UnsupportedDurationField" name="long getMillis(long)" map="B"/>
  <method class="org.joda.time.field.UnsupportedDurationField" name="int getValue(long)" map="C"/>
  <method class="org.joda.time.field.UnsupportedDurationField" name="int getValue(long, long)" map="F"/>
  <class name="org.joda.time.field.SkipUndoDateTimeField" map="I"/>
  <field class="org.joda.time.field.SkipUndoDateTimeField" name="iMinValue" map="D"/>
  <field class="org.joda.time.field.SkipUndoDateTimeField" name="iChronology" map="E"/>
  <field class="org.joda.time.field.SkipUndoDateTimeField" name="iSkip" map="F"/>
  <field class="org.joda.time.field.SkipUndoDateTimeField" name="serialVersionUID" map="G"/>
  <method class="org.joda.time.field.SkipUndoDateTimeField" name="java.lang.Object readResolve()" map="K"/>
  <method class="org.joda.time.field.SkipUndoDateTimeField" name="int getMinimumValue()" map="D"/>
  <method class="org.joda.time.field.SkipUndoDateTimeField" name="long set(long, int)" map="C"/>
  <method class="org.joda.time.field.SkipUndoDateTimeField" name="int get(long)" map="E"/>
  <class name="org.joda.time.field.AbstractReadableInstantFieldProperty" map="J"/>
  <field class="org.joda.time.field.AbstractReadableInstantFieldProperty" name="serialVersionUID" map="A"/>
  <method class="org.joda.time.field.AbstractReadableInstantFieldProperty" name="org.joda.time.DurationField getLeapDurationField()" map="A"/>
  <method class="org.joda.time.field.AbstractReadableInstantFieldProperty" name="int getMaximumValueOverall()" map="B"/>
  <method class="org.joda.time.field.AbstractReadableInstantFieldProperty" name="boolean isLeap()" map="C"/>
  <method class="org.joda.time.field.AbstractReadableInstantFieldProperty" name="int getLeapAmount()" map="D"/>
  <method class="org.joda.time.field.AbstractReadableInstantFieldProperty" name="long remainder()" map="E"/>
  <method class="org.joda.time.field.AbstractReadableInstantFieldProperty" name="org.joda.time.DateTimeFieldType getFieldType()" map="F"/>
  <method class="org.joda.time.field.AbstractReadableInstantFieldProperty" name="boolean equals(java.lang.Object)" map="equals"/>
  <method class="org.joda.time.field.AbstractReadableInstantFieldProperty" name="java.lang.String toString()" map="toString"/>
  <method class="org.joda.time.field.AbstractReadableInstantFieldProperty" name="int compareTo(org.joda.time.ReadablePartial)" map="A"/>
  <method class="org.joda.time.field.AbstractReadableInstantFieldProperty" name="int getMaximumTextLength(java.util.Locale)" map="A"/>
  <method class="org.joda.time.field.AbstractReadableInstantFieldProperty" name="org.joda.time.Chronology getChronology()" map="G"/>
  <method class="org.joda.time.field.AbstractReadableInstantFieldProperty" name="org.joda.time.DateTimeField getField()" map="H"/>
  <method class="org.joda.time.field.AbstractReadableInstantFieldProperty" name="int getMinimumValue()" map="I"/>
  <method class="org.joda.time.field.AbstractReadableInstantFieldProperty" name="int getDifference(org.joda.time.ReadableInstant)" map="A"/>
  <method class="org.joda.time.field.AbstractReadableInstantFieldProperty" name="org.joda.time.DurationField getDurationField()" map="J"/>
  <method class="org.joda.time.field.AbstractReadableInstantFieldProperty" name="int compareTo(org.joda.time.ReadableInstant)" map="B"/>
  <method class="org.joda.time.field.AbstractReadableInstantFieldProperty" name="org.joda.time.DurationField getRangeDurationField()" map="K"/>
  <method class="org.joda.time.field.AbstractReadableInstantFieldProperty" name="java.lang.String getAsString()" map="L"/>
  <method class="org.joda.time.field.AbstractReadableInstantFieldProperty" name="int hashCode()" map="hashCode"/>
  <method class="org.joda.time.field.AbstractReadableInstantFieldProperty" name="int getMaximumShortTextLength(java.util.Locale)" map="B"/>
  <method class="org.joda.time.field.AbstractReadableInstantFieldProperty" name="java.lang.String getName()" map="M"/>
  <method class="org.joda.time.field.AbstractReadableInstantFieldProperty" name="java.lang.String getAsShortText(java.util.Locale)" map="C"/>
  <method class="org.joda.time.field.AbstractReadableInstantFieldProperty" name="int getMaximumValue()" map="N"/>
  <method class="org.joda.time.field.AbstractReadableInstantFieldProperty" name="int get()" map="O"/>
  <method class="org.joda.time.field.AbstractReadableInstantFieldProperty" name="java.lang.String getAsText(java.util.Locale)" map="D"/>
  <method class="org.joda.time.field.AbstractReadableInstantFieldProperty" name="long getDifferenceAsLong(org.joda.time.ReadableInstant)" map="C"/>
  <method class="org.joda.time.field.AbstractReadableInstantFieldProperty" name="java.lang.String getAsText()" map="P"/>
  <method class="org.joda.time.field.AbstractReadableInstantFieldProperty" name="long getMillis()" map="Q"/>
  <method class="org.joda.time.field.AbstractReadableInstantFieldProperty" name="java.lang.String getAsShortText()" map="R"/>
  <method class="org.joda.time.field.AbstractReadableInstantFieldProperty" name="int getMinimumValueOverall()" map="S"/>
  <method class="org.joda.time.field.AbstractReadableInstantFieldProperty" name="org.joda.time.Interval toInterval()" map="T"/>
  <class name="org.joda.time.field.AbstractPartialFieldProperty" map="K"/>
  <method class="org.joda.time.field.AbstractPartialFieldProperty" name="int getMaximumValueOverall()" map="A"/>
  <method class="org.joda.time.field.AbstractPartialFieldProperty" name="org.joda.time.DateTimeFieldType getFieldType()" map="B"/>
  <method class="org.joda.time.field.AbstractPartialFieldProperty" name="boolean equals(java.lang.Object)" map="equals"/>
  <method class="org.joda.time.field.AbstractPartialFieldProperty" name="java.lang.String toString()" map="toString"/>
  <method class="org.joda.time.field.AbstractPartialFieldProperty" name="int compareTo(org.joda.time.ReadablePartial)" map="A"/>
  <method class="org.joda.time.field.AbstractPartialFieldProperty" name="int getMaximumTextLength(java.util.Locale)" map="A"/>
  <method class="org.joda.time.field.AbstractPartialFieldProperty" name="org.joda.time.DateTimeField getField()" map="C"/>
  <method class="org.joda.time.field.AbstractPartialFieldProperty" name="int getMinimumValue()" map="D"/>
  <method class="org.joda.time.field.AbstractPartialFieldProperty" name="org.joda.time.DurationField getDurationField()" map="E"/>
  <method class="org.joda.time.field.AbstractPartialFieldProperty" name="int compareTo(org.joda.time.ReadableInstant)" map="A"/>
  <method class="org.joda.time.field.AbstractPartialFieldProperty" name="org.joda.time.DurationField getRangeDurationField()" map="F"/>
  <method class="org.joda.time.field.AbstractPartialFieldProperty" name="java.lang.String getAsString()" map="G"/>
  <method class="org.joda.time.field.AbstractPartialFieldProperty" name="int hashCode()" map="hashCode"/>
  <method class="org.joda.time.field.AbstractPartialFieldProperty" name="int getMaximumShortTextLength(java.util.Locale)" map="B"/>
  <method class="org.joda.time.field.AbstractPartialFieldProperty" name="java.lang.String getName()" map="H"/>
  <method class="org.joda.time.field.AbstractPartialFieldProperty" name="java.lang.String getAsShortText(java.util.Locale)" map="C"/>
  <method class="org.joda.time.field.AbstractPartialFieldProperty" name="int getMaximumValue()" map="I"/>
  <method class="org.joda.time.field.AbstractPartialFieldProperty" name="int get()" map="J"/>
  <method class="org.joda.time.field.AbstractPartialFieldProperty" name="java.lang.String getAsText(java.util.Locale)" map="D"/>
  <method class="org.joda.time.field.AbstractPartialFieldProperty" name="java.lang.String getAsText()" map="K"/>
  <method class="org.joda.time.field.AbstractPartialFieldProperty" name="java.lang.String getAsShortText()" map="L"/>
  <method class="org.joda.time.field.AbstractPartialFieldProperty" name="int getMinimumValueOverall()" map="M"/>
  <method class="org.joda.time.field.AbstractPartialFieldProperty" name="org.joda.time.ReadablePartial getReadablePartial()" map="N"/>
  <class name="org.joda.time.field.DecoratedDurationField" map="L"/>
  <field class="org.joda.time.field.DecoratedDurationField" name="iField" map="R"/>
  <field class="org.joda.time.field.DecoratedDurationField" name="serialVersionUID" map="S"/>
  <method class="org.joda.time.field.DecoratedDurationField" name="long getMillis(long, long)" map="C"/>
  <method class="org.joda.time.field.DecoratedDurationField" name="boolean isPrecise()" map="A"/>
  <method class="org.joda.time.field.DecoratedDurationField" name="long add(long, int)" map="A"/>
  <method class="org.joda.time.field.DecoratedDurationField" name="long getUnitMillis()" map="E"/>
  <method class="org.joda.time.field.DecoratedDurationField" name="long getMillis(int, long)" map="A"/>
  <method class="org.joda.time.field.DecoratedDurationField" name="long add(long, long)" map="E"/>
  <method class="org.joda.time.field.DecoratedDurationField" name="long getValueAsLong(long, long)" map="A"/>
  <method class="org.joda.time.field.DecoratedDurationField" name="org.joda.time.DurationField getWrappedField()" map="J"/>
  <method class="org.joda.time.field.DecoratedDurationField" name="long getDifferenceAsLong(long, long)" map="B"/>
  <class name="org.joda.time.field.RemainderDateTimeField" map="M"/>
  <field class="org.joda.time.field.RemainderDateTimeField" name="iDivisor" map="&#x00d5;"/>
  <field class="org.joda.time.field.RemainderDateTimeField" name="iRangeField" map="&#x00d6;"/>
  <field class="org.joda.time.field.RemainderDateTimeField" name="serialVersionUID" map="&#x00d8;"/>
  <method class="org.joda.time.field.RemainderDateTimeField" name="int getDivisor()" map="b"/>
  <method class="org.joda.time.field.RemainderDateTimeField" name="long roundCeiling(long)" map="H"/>
  <method class="org.joda.time.field.RemainderDateTimeField" name="long set(long, int)" map="C"/>
  <method class="org.joda.time.field.RemainderDateTimeField" name="org.joda.time.DurationField getRangeDurationField()" map="A"/>
  <method class="org.joda.time.field.RemainderDateTimeField" name="long remainder(long)" map="D"/>
  <method class="org.joda.time.field.RemainderDateTimeField" name="long roundFloor(long)" map="A"/>
  <method class="org.joda.time.field.RemainderDateTimeField" name="int getMaximumValue()" map="F"/>
  <method class="org.joda.time.field.RemainderDateTimeField" name="long roundHalfCeiling(long)" map="I"/>
  <method class="org.joda.time.field.RemainderDateTimeField" name="long roundHalfEven(long)" map="K"/>
  <method class="org.joda.time.field.RemainderDateTimeField" name="int getMinimumValue()" map="D"/>
  <method class="org.joda.time.field.RemainderDateTimeField" name="int getDivided(int)" map="B"/>
  <method class="org.joda.time.field.RemainderDateTimeField" name="int get(long)" map="E"/>
  <method class="org.joda.time.field.RemainderDateTimeField" name="long addWrapField(long, int)" map="A"/>
  <method class="org.joda.time.field.RemainderDateTimeField" name="long roundHalfFloor(long)" map="F"/>
  <class name="org.joda.time.field.MillisDurationField" map="N"/>
  <field class="org.joda.time.field.MillisDurationField" name="INSTANCE" map="G"/>
  <field class="org.joda.time.field.MillisDurationField" name="serialVersionUID" map="H"/>
  <method class="org.joda.time.field.MillisDurationField" name="long getValueAsLong(long, long)" map="A"/>
  <method class="org.joda.time.field.MillisDurationField" name="long getMillis(int, long)" map="A"/>
  <method class="org.joda.time.field.MillisDurationField" name="long getValueAsLong(long)" map="A"/>
  <method class="org.joda.time.field.MillisDurationField" name="long add(long, int)" map="A"/>
  <method class="org.joda.time.field.MillisDurationField" name="boolean isPrecise()" map="A"/>
  <method class="org.joda.time.field.MillisDurationField" name="long getDifferenceAsLong(long, long)" map="B"/>
  <method class="org.joda.time.field.MillisDurationField" name="boolean isSupported()" map="B"/>
  <method class="org.joda.time.field.MillisDurationField" name="long getMillis(long, long)" map="C"/>
  <method class="org.joda.time.field.MillisDurationField" name="java.lang.String toString()" map="toString"/>
  <method class="org.joda.time.field.MillisDurationField" name="long getMillis(int)" map="A"/>
  <method class="org.joda.time.field.MillisDurationField" name="java.lang.Object readResolve()" map="I"/>
  <method class="org.joda.time.field.MillisDurationField" name="java.lang.String getName()" map="C"/>
  <method class="org.joda.time.field.MillisDurationField" name="int getDifference(long, long)" map="D"/>
  <method class="org.joda.time.field.MillisDurationField" name="long add(long, long)" map="E"/>
  <method class="org.joda.time.field.MillisDurationField" name="org.joda.time.DurationFieldType getType()" map="D"/>
  <method class="org.joda.time.field.MillisDurationField" name="long getUnitMillis()" map="E"/>
  <method class="org.joda.time.field.MillisDurationField" name="int compareTo(java.lang.Object)" map="compareTo"/>
  <method class="org.joda.time.field.MillisDurationField" name="long getMillis(long)" map="B"/>
  <method class="org.joda.time.field.MillisDurationField" name="int getValue(long)" map="C"/>
  <method class="org.joda.time.field.MillisDurationField" name="int getValue(long, long)" map="F"/>
  <class name="org.joda.time.field.StrictDateTimeField" map="O"/>
  <field class="org.joda.time.field.StrictDateTimeField" name="serialVersionUID" map="H"/>
  <method class="org.joda.time.field.StrictDateTimeField" name="org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField)" map="A"/>
  <method class="org.joda.time.field.StrictDateTimeField" name="long set(long, int)" map="C"/>
  <method class="org.joda.time.field.StrictDateTimeField" name="boolean isLenient()" map="C"/>
  <class name="org.joda.time.field.PreciseDurationDateTimeField" map="P"/>
  <field class="org.joda.time.field.PreciseDurationDateTimeField" name="iUnitField" map="z"/>
  <field class="org.joda.time.field.PreciseDurationDateTimeField" name="iUnitMillis" map="&#x00a2;"/>
  <field class="org.joda.time.field.PreciseDurationDateTimeField" name="serialVersionUID" map="&#x00a3;"/>
  <method class="org.joda.time.field.PreciseDurationDateTimeField" name="long roundCeiling(long)" map="H"/>
  <method class="org.joda.time.field.PreciseDurationDateTimeField" name="org.joda.time.DurationField getDurationField()" map="H"/>
  <method class="org.joda.time.field.PreciseDurationDateTimeField" name="long getUnitMillis()" map="T"/>
  <method class="org.joda.time.field.PreciseDurationDateTimeField" name="long set(long, int)" map="C"/>
  <method class="org.joda.time.field.PreciseDurationDateTimeField" name="long remainder(long)" map="D"/>
  <method class="org.joda.time.field.PreciseDurationDateTimeField" name="long roundFloor(long)" map="A"/>
  <method class="org.joda.time.field.PreciseDurationDateTimeField" name="int getMaximumValueForSet(long, int)" map="D"/>
  <method class="org.joda.time.field.PreciseDurationDateTimeField" name="boolean isLenient()" map="C"/>
  <method class="org.joda.time.field.PreciseDurationDateTimeField" name="int getMinimumValue()" map="D"/>
  <class name="org.joda.time.field.BaseDateTimeField" map="Q"/>
  <field class="org.joda.time.field.BaseDateTimeField" name="iType" map="S"/>
  <method class="org.joda.time.field.BaseDateTimeField" name="int[] set(org.joda.time.ReadablePartial, int, int[], java.lang.String, java.util.Locale)" map="A"/>
  <method class="org.joda.time.field.BaseDateTimeField" name="java.lang.String getAsText(long, java.util.Locale)" map="A"/>
  <method class="org.joda.time.field.BaseDateTimeField" name="java.lang.String getAsShortText(long, java.util.Locale)" map="B"/>
  <method class="org.joda.time.field.BaseDateTimeField" name="long roundFloor(long)" map="A"/>
  <method class="org.joda.time.field.BaseDateTimeField" name="org.joda.time.DurationField getRangeDurationField()" map="A"/>
  <method class="org.joda.time.field.BaseDateTimeField" name="long addWrapField(long, int)" map="A"/>
  <method class="org.joda.time.field.BaseDateTimeField" name="org.joda.time.DurationField getLeapDurationField()" map="B"/>
  <method class="org.joda.time.field.BaseDateTimeField" name="long add(long, long)" map="A"/>
  <method class="org.joda.time.field.BaseDateTimeField" name="int getMaximumTextLength(java.util.Locale)" map="A"/>
  <method class="org.joda.time.field.BaseDateTimeField" name="int[] set(org.joda.time.ReadablePartial, int, int[], int)" map="A"/>
  <method class="org.joda.time.field.BaseDateTimeField" name="long set(long, java.lang.String)" map="A"/>
  <method class="org.joda.time.field.BaseDateTimeField" name="java.lang.String getAsShortText(org.joda.time.ReadablePartial, int, java.util.Locale)" map="A"/>
  <method class="org.joda.time.field.BaseDateTimeField" name="int getLeapAmount(long)" map="B"/>
  <method class="org.joda.time.field.BaseDateTimeField" name="int getMinimumValue()" map="D"/>
  <method class="org.joda.time.field.BaseDateTimeField" name="boolean isSupported()" map="E"/>
  <method class="org.joda.time.field.BaseDateTimeField" name="long add(long, int)" map="B"/>
  <method class="org.joda.time.field.BaseDateTimeField" name="java.lang.String getAsShortText(long)" map="C"/>
  <method class="org.joda.time.field.BaseDateTimeField" name="long remainder(long)" map="D"/>
  <method class="org.joda.time.field.BaseDateTimeField" name="int get(long)" map="E"/>
  <method class="org.joda.time.field.BaseDateTimeField" name="int getDifference(long, long)" map="B"/>
  <method class="org.joda.time.field.BaseDateTimeField" name="int[] addWrapPartial(org.joda.time.ReadablePartial, int, int[], int)" map="B"/>
  <method class="org.joda.time.field.BaseDateTimeField" name="int getMaximumValue()" map="F"/>
  <method class="org.joda.time.field.BaseDateTimeField" name="long roundHalfFloor(long)" map="F"/>
  <method class="org.joda.time.field.BaseDateTimeField" name="int[] addWrapField(org.joda.time.ReadablePartial, int, int[], int)" map="C"/>
  <method class="org.joda.time.field.BaseDateTimeField" name="java.lang.String toString()" map="toString"/>
  <method class="org.joda.time.field.BaseDateTimeField" name="int[] add(org.joda.time.ReadablePartial, int, int[], int)" map="D"/>
  <method class="org.joda.time.field.BaseDateTimeField" name="java.lang.String getAsText(int, java.util.Locale)" map="A"/>
  <method class="org.joda.time.field.BaseDateTimeField" name="int getMinimumValue(long)" map="G"/>
  <method class="org.joda.time.field.BaseDateTimeField" name="java.lang.String getAsShortText(int, java.util.Locale)" map="B"/>
  <method class="org.joda.time.field.BaseDateTimeField" name="java.lang.String getName()" map="G"/>
  <method class="org.joda.time.field.BaseDateTimeField" name="long roundCeiling(long)" map="H"/>
  <method class="org.joda.time.field.BaseDateTimeField" name="long roundHalfCeiling(long)" map="I"/>
  <method class="org.joda.time.field.BaseDateTimeField" name="int getMinimumValue(org.joda.time.ReadablePartial)" map="A"/>
  <method class="org.joda.time.field.BaseDateTimeField" name="java.lang.String getAsText(long)" map="J"/>
  <method class="org.joda.time.field.BaseDateTimeField" name="java.lang.String getAsText(org.joda.time.ReadablePartial, int, java.util.Locale)" map="B"/>
  <method class="org.joda.time.field.BaseDateTimeField" name="long roundHalfEven(long)" map="K"/>
  <method class="org.joda.time.field.BaseDateTimeField" name="long getDifferenceAsLong(long, long)" map="C"/>
  <method class="org.joda.time.field.BaseDateTimeField" name="org.joda.time.DurationField getDurationField()" map="H"/>
  <method class="org.joda.time.field.BaseDateTimeField" name="java.lang.String getAsShortText(org.joda.time.ReadablePartial, java.util.Locale)" map="A"/>
  <method class="org.joda.time.field.BaseDateTimeField" name="org.joda.time.DateTimeFieldType getType()" map="I"/>
  <method class="org.joda.time.field.BaseDateTimeField" name="int getMaximumValue(org.joda.time.ReadablePartial, int[])" map="A"/>
  <method class="org.joda.time.field.BaseDateTimeField" name="long set(long, int)" map="C"/>
  <method class="org.joda.time.field.BaseDateTimeField" name="java.lang.String getAsText(org.joda.time.ReadablePartial, java.util.Locale)" map="B"/>
  <method class="org.joda.time.field.BaseDateTimeField" name="boolean isLeap(long)" map="L"/>
  <method class="org.joda.time.field.BaseDateTimeField" name="int getMaximumShortTextLength(java.util.Locale)" map="B"/>
  <method class="org.joda.time.field.BaseDateTimeField" name="int getMinimumValue(org.joda.time.ReadablePartial, int[])" map="B"/>
  <method class="org.joda.time.field.BaseDateTimeField" name="int convertText(java.lang.String, java.util.Locale)" map="A"/>
  <method class="org.joda.time.field.BaseDateTimeField" name="int getMaximumValue(long)" map="M"/>
  <method class="org.joda.time.field.BaseDateTimeField" name="long set(long, java.lang.String, java.util.Locale)" map="A"/>
  <method class="org.joda.time.field.BaseDateTimeField" name="int getMaximumValue(org.joda.time.ReadablePartial)" map="B"/>
  <class name="org.joda.time.field.PreciseDateTimeField" map="R"/>
  <field class="org.joda.time.field.PreciseDateTimeField" name="iRange" map="&#x00c3;"/>
  <field class="org.joda.time.field.PreciseDateTimeField" name="iRangeField" map="&#x00c4;"/>
  <field class="org.joda.time.field.PreciseDateTimeField" name="serialVersionUID" map="&#x00c5;"/>
  <method class="org.joda.time.field.PreciseDateTimeField" name="long set(long, int)" map="C"/>
  <method class="org.joda.time.field.PreciseDateTimeField" name="long addWrapField(long, int)" map="A"/>
  <method class="org.joda.time.field.PreciseDateTimeField" name="int get(long)" map="E"/>
  <method class="org.joda.time.field.PreciseDateTimeField" name="int getRange()" map="Y"/>
  <method class="org.joda.time.field.PreciseDateTimeField" name="int getMaximumValue()" map="F"/>
  <method class="org.joda.time.field.PreciseDateTimeField" name="org.joda.time.DurationField getRangeDurationField()" map="A"/>
  <class name="org.joda.time.field.DelegatedDateTimeField" map="S"/>
  <field class="org.joda.time.field.DelegatedDateTimeField" name="iType" map="A"/>
  <field class="org.joda.time.field.DelegatedDateTimeField" name="iField" map="B"/>
  <field class="org.joda.time.field.DelegatedDateTimeField" name="serialVersionUID" map="C"/>
  <method class="org.joda.time.field.DelegatedDateTimeField" name="int[] set(org.joda.time.ReadablePartial, int, int[], java.lang.String, java.util.Locale)" map="A"/>
  <method class="org.joda.time.field.DelegatedDateTimeField" name="java.lang.String getAsText(long, java.util.Locale)" map="A"/>
  <method class="org.joda.time.field.DelegatedDateTimeField" name="java.lang.String getAsShortText(long, java.util.Locale)" map="B"/>
  <method class="org.joda.time.field.DelegatedDateTimeField" name="long roundFloor(long)" map="A"/>
  <method class="org.joda.time.field.DelegatedDateTimeField" name="org.joda.time.DurationField getRangeDurationField()" map="A"/>
  <method class="org.joda.time.field.DelegatedDateTimeField" name="long addWrapField(long, int)" map="A"/>
  <method class="org.joda.time.field.DelegatedDateTimeField" name="org.joda.time.DurationField getLeapDurationField()" map="B"/>
  <method class="org.joda.time.field.DelegatedDateTimeField" name="long add(long, long)" map="A"/>
  <method class="org.joda.time.field.DelegatedDateTimeField" name="int getMaximumTextLength(java.util.Locale)" map="A"/>
  <method class="org.joda.time.field.DelegatedDateTimeField" name="boolean isLenient()" map="C"/>
  <method class="org.joda.time.field.DelegatedDateTimeField" name="int[] set(org.joda.time.ReadablePartial, int, int[], int)" map="A"/>
  <method class="org.joda.time.field.DelegatedDateTimeField" name="long set(long, java.lang.String)" map="A"/>
  <method class="org.joda.time.field.DelegatedDateTimeField" name="java.lang.String getAsShortText(org.joda.time.ReadablePartial, int, java.util.Locale)" map="A"/>
  <method class="org.joda.time.field.DelegatedDateTimeField" name="int getLeapAmount(long)" map="B"/>
  <method class="org.joda.time.field.DelegatedDateTimeField" name="int getMinimumValue()" map="D"/>
  <method class="org.joda.time.field.DelegatedDateTimeField" name="boolean isSupported()" map="E"/>
  <method class="org.joda.time.field.DelegatedDateTimeField" name="long add(long, int)" map="B"/>
  <method class="org.joda.time.field.DelegatedDateTimeField" name="java.lang.String getAsShortText(long)" map="C"/>
  <method class="org.joda.time.field.DelegatedDateTimeField" name="long remainder(long)" map="D"/>
  <method class="org.joda.time.field.DelegatedDateTimeField" name="int get(long)" map="E"/>
  <method class="org.joda.time.field.DelegatedDateTimeField" name="int getDifference(long, long)" map="B"/>
  <method class="org.joda.time.field.DelegatedDateTimeField" name="int[] addWrapPartial(org.joda.time.ReadablePartial, int, int[], int)" map="B"/>
  <method class="org.joda.time.field.DelegatedDateTimeField" name="int getMaximumValue()" map="F"/>
  <method class="org.joda.time.field.DelegatedDateTimeField" name="long roundHalfFloor(long)" map="F"/>
  <method class="org.joda.time.field.DelegatedDateTimeField" name="int[] addWrapField(org.joda.time.ReadablePartial, int, int[], int)" map="C"/>
  <method class="org.joda.time.field.DelegatedDateTimeField" name="java.lang.String toString()" map="toString"/>
  <method class="org.joda.time.field.DelegatedDateTimeField" name="int[] add(org.joda.time.ReadablePartial, int, int[], int)" map="D"/>
  <method class="org.joda.time.field.DelegatedDateTimeField" name="java.lang.String getAsText(int, java.util.Locale)" map="A"/>
  <method class="org.joda.time.field.DelegatedDateTimeField" name="int getMinimumValue(long)" map="G"/>
  <method class="org.joda.time.field.DelegatedDateTimeField" name="java.lang.String getAsShortText(int, java.util.Locale)" map="B"/>
  <method class="org.joda.time.field.DelegatedDateTimeField" name="java.lang.String getName()" map="G"/>
  <method class="org.joda.time.field.DelegatedDateTimeField" name="long roundCeiling(long)" map="H"/>
  <method class="org.joda.time.field.DelegatedDateTimeField" name="long roundHalfCeiling(long)" map="I"/>
  <method class="org.joda.time.field.DelegatedDateTimeField" name="int getMinimumValue(org.joda.time.ReadablePartial)" map="A"/>
  <method class="org.joda.time.field.DelegatedDateTimeField" name="java.lang.String getAsText(long)" map="J"/>
  <method class="org.joda.time.field.DelegatedDateTimeField" name="java.lang.String getAsText(org.joda.time.ReadablePartial, int, java.util.Locale)" map="B"/>
  <method class="org.joda.time.field.DelegatedDateTimeField" name="long roundHalfEven(long)" map="K"/>
  <method class="org.joda.time.field.DelegatedDateTimeField" name="org.joda.time.DateTimeField getWrappedField()" map="J"/>
  <method class="org.joda.time.field.DelegatedDateTimeField" name="long getDifferenceAsLong(long, long)" map="C"/>
  <method class="org.joda.time.field.DelegatedDateTimeField" name="org.joda.time.DurationField getDurationField()" map="H"/>
  <method class="org.joda.time.field.DelegatedDateTimeField" name="java.lang.String getAsShortText(org.joda.time.ReadablePartial, java.util.Locale)" map="A"/>
  <method class="org.joda.time.field.DelegatedDateTimeField" name="org.joda.time.DateTimeFieldType getType()" map="I"/>
  <method class="org.joda.time.field.DelegatedDateTimeField" name="int getMaximumValue(org.joda.time.ReadablePartial, int[])" map="A"/>
  <method class="org.joda.time.field.DelegatedDateTimeField" name="long set(long, int)" map="C"/>
  <method class="org.joda.time.field.DelegatedDateTimeField" name="java.lang.String getAsText(org.joda.time.ReadablePartial, java.util.Locale)" map="B"/>
  <method class="org.joda.time.field.DelegatedDateTimeField" name="boolean isLeap(long)" map="L"/>
  <method class="org.joda.time.field.DelegatedDateTimeField" name="int getMaximumShortTextLength(java.util.Locale)" map="B"/>
  <method class="org.joda.time.field.DelegatedDateTimeField" name="int getMinimumValue(org.joda.time.ReadablePartial, int[])" map="B"/>
  <method class="org.joda.time.field.DelegatedDateTimeField" name="int getMaximumValue(long)" map="M"/>
  <method class="org.joda.time.field.DelegatedDateTimeField" name="long set(long, java.lang.String, java.util.Locale)" map="A"/>
  <method class="org.joda.time.field.DelegatedDateTimeField" name="int getMaximumValue(org.joda.time.ReadablePartial)" map="B"/>
  <class name="org.joda.time.field.SkipDateTimeField" map="T"/>
  <field class="org.joda.time.field.SkipDateTimeField" name="iMinValue" map="I"/>
  <field class="org.joda.time.field.SkipDateTimeField" name="iChronology" map="J"/>
  <field class="org.joda.time.field.SkipDateTimeField" name="iSkip" map="K"/>
  <field class="org.joda.time.field.SkipDateTimeField" name="serialVersionUID" map="L"/>
  <method class="org.joda.time.field.SkipDateTimeField" name="java.lang.Object readResolve()" map="L"/>
  <method class="org.joda.time.field.SkipDateTimeField" name="int getMinimumValue()" map="D"/>
  <method class="org.joda.time.field.SkipDateTimeField" name="long set(long, int)" map="C"/>
  <method class="org.joda.time.field.SkipDateTimeField" name="int get(long)" map="E"/>
  <class name="org.joda.time.field.LenientDateTimeField" map="U"/>
  <field class="org.joda.time.field.LenientDateTimeField" name="iBase" map="M"/>
  <field class="org.joda.time.field.LenientDateTimeField" name="serialVersionUID" map="N"/>
  <method class="org.joda.time.field.LenientDateTimeField" name="long set(long, int)" map="C"/>
  <method class="org.joda.time.field.LenientDateTimeField" name="boolean isLenient()" map="C"/>
  <method class="org.joda.time.field.LenientDateTimeField" name="org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField, org.joda.time.Chronology)" map="A"/>
  <class name="org.joda.time.field.BaseDurationField" map="V"/>
  <field class="org.joda.time.field.BaseDurationField" name="iType" map="I"/>
  <field class="org.joda.time.field.BaseDurationField" name="serialVersionUID" map="J"/>
  <method class="org.joda.time.field.BaseDurationField" name="int getValue(long)" map="C"/>
  <method class="org.joda.time.field.BaseDurationField" name="long getMillis(int)" map="A"/>
  <method class="org.joda.time.field.BaseDurationField" name="long getMillis(long)" map="B"/>
  <method class="org.joda.time.field.BaseDurationField" name="org.joda.time.DurationFieldType getType()" map="D"/>
  <method class="org.joda.time.field.BaseDurationField" name="int getDifference(long, long)" map="D"/>
  <method class="org.joda.time.field.BaseDurationField" name="java.lang.String getName()" map="C"/>
  <method class="org.joda.time.field.BaseDurationField" name="long getValueAsLong(long)" map="A"/>
  <method class="org.joda.time.field.BaseDurationField" name="int getValue(long, long)" map="F"/>
  <method class="org.joda.time.field.BaseDurationField" name="java.lang.String toString()" map="toString"/>
  <method class="org.joda.time.field.BaseDurationField" name="int compareTo(java.lang.Object)" map="compareTo"/>
  <method class="org.joda.time.field.BaseDurationField" name="boolean isSupported()" map="B"/>
  <class name="org.joda.time.field.FieldUtils" map="W"/>
  <method class="org.joda.time.field.FieldUtils" name="boolean equals(java.lang.Object, java.lang.Object)" map="A"/>
  <method class="org.joda.time.field.FieldUtils" name="int safeAdd(int, int)" map="A"/>
  <method class="org.joda.time.field.FieldUtils" name="int safeMultiplyToInt(long, long)" map="A"/>
  <method class="org.joda.time.field.FieldUtils" name="long safeSubtract(long, long)" map="B"/>
  <method class="org.joda.time.field.FieldUtils" name="void verifyValueBounds(org.joda.time.DateTimeFieldType, int, int, int)" map="A"/>
  <method class="org.joda.time.field.FieldUtils" name="int getWrappedValue(int, int, int, int)" map="A"/>
  <method class="org.joda.time.field.FieldUtils" name="int safeNegate(int)" map="A"/>
  <method class="org.joda.time.field.FieldUtils" name="int safeToInt(long)" map="A"/>
  <method class="org.joda.time.field.FieldUtils" name="long safeMultiply(long, int)" map="A"/>
  <method class="org.joda.time.field.FieldUtils" name="long safeMultiply(long, long)" map="C"/>
  <method class="org.joda.time.field.FieldUtils" name="int safeMultiply(int, int)" map="B"/>
  <method class="org.joda.time.field.FieldUtils" name="void verifyValueBounds(java.lang.String, int, int, int)" map="A"/>
  <method class="org.joda.time.field.FieldUtils" name="int getWrappedValue(int, int, int)" map="A"/>
  <method class="org.joda.time.field.FieldUtils" name="void verifyValueBounds(org.joda.time.DateTimeField, int, int, int)" map="A"/>
  <method class="org.joda.time.field.FieldUtils" name="long safeAdd(long, long)" map="D"/>
  <class name="org.joda.time.field.OffsetDateTimeField" map="X"/>
  <field class="org.joda.time.field.OffsetDateTimeField" name="iMax" map="&#x00d9;"/>
  <field class="org.joda.time.field.OffsetDateTimeField" name="iMin" map="&#x00da;"/>
  <field class="org.joda.time.field.OffsetDateTimeField" name="iOffset" map="&#x00db;"/>
  <field class="org.joda.time.field.OffsetDateTimeField" name="serialVersionUID" map="&#x00dc;"/>
  <method class="org.joda.time.field.OffsetDateTimeField" name="long roundCeiling(long)" map="H"/>
  <method class="org.joda.time.field.OffsetDateTimeField" name="long add(long, int)" map="B"/>
  <method class="org.joda.time.field.OffsetDateTimeField" name="int getOffset()" map="c"/>
  <method class="org.joda.time.field.OffsetDateTimeField" name="int getLeapAmount(long)" map="B"/>
  <method class="org.joda.time.field.OffsetDateTimeField" name="long set(long, int)" map="C"/>
  <method class="org.joda.time.field.OffsetDateTimeField" name="long add(long, long)" map="A"/>
  <method class="org.joda.time.field.OffsetDateTimeField" name="long remainder(long)" map="D"/>
  <method class="org.joda.time.field.OffsetDateTimeField" name="long roundFloor(long)" map="A"/>
  <method class="org.joda.time.field.OffsetDateTimeField" name="boolean isLeap(long)" map="L"/>
  <method class="org.joda.time.field.OffsetDateTimeField" name="int getMaximumValue()" map="F"/>
  <method class="org.joda.time.field.OffsetDateTimeField" name="long roundHalfCeiling(long)" map="I"/>
  <method class="org.joda.time.field.OffsetDateTimeField" name="long roundHalfEven(long)" map="K"/>
  <method class="org.joda.time.field.OffsetDateTimeField" name="int getMinimumValue()" map="D"/>
  <method class="org.joda.time.field.OffsetDateTimeField" name="int get(long)" map="E"/>
  <method class="org.joda.time.field.OffsetDateTimeField" name="long addWrapField(long, int)" map="A"/>
  <method class="org.joda.time.field.OffsetDateTimeField" name="long roundHalfFloor(long)" map="F"/>
  <method class="org.joda.time.field.OffsetDateTimeField" name="org.joda.time.DurationField getLeapDurationField()" map="B"/>
  <class name="org.joda.time.field.UnsupportedDateTimeField" map="Y"/>
  <field class="org.joda.time.field.UnsupportedDateTimeField" name="iType" map="O"/>
  <field class="org.joda.time.field.UnsupportedDateTimeField" name="iDurationField" map="P"/>
  <field class="org.joda.time.field.UnsupportedDateTimeField" name="cCache" map="Q"/>
  <field class="org.joda.time.field.UnsupportedDateTimeField" name="serialVersionUID" map="R"/>
  <method class="org.joda.time.field.UnsupportedDateTimeField" name="int[] set(org.joda.time.ReadablePartial, int, int[], java.lang.String, java.util.Locale)" map="A"/>
  <method class="org.joda.time.field.UnsupportedDateTimeField" name="org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType, org.joda.time.DurationField)" map="A"/>
  <method class="org.joda.time.field.UnsupportedDateTimeField" name="java.lang.String getAsText(long, java.util.Locale)" map="A"/>
  <method class="org.joda.time.field.UnsupportedDateTimeField" name="java.lang.String getAsShortText(long, java.util.Locale)" map="B"/>
  <method class="org.joda.time.field.UnsupportedDateTimeField" name="long roundFloor(long)" map="A"/>
  <method class="org.joda.time.field.UnsupportedDateTimeField" name="org.joda.time.DurationField getRangeDurationField()" map="A"/>
  <method class="org.joda.time.field.UnsupportedDateTimeField" name="long addWrapField(long, int)" map="A"/>
  <method class="org.joda.time.field.UnsupportedDateTimeField" name="org.joda.time.DurationField getLeapDurationField()" map="B"/>
  <method class="org.joda.time.field.UnsupportedDateTimeField" name="long add(long, long)" map="A"/>
  <method class="org.joda.time.field.UnsupportedDateTimeField" name="int getMaximumTextLength(java.util.Locale)" map="A"/>
  <method class="org.joda.time.field.UnsupportedDateTimeField" name="boolean isLenient()" map="C"/>
  <method class="org.joda.time.field.UnsupportedDateTimeField" name="int[] set(org.joda.time.ReadablePartial, int, int[], int)" map="A"/>
  <method class="org.joda.time.field.UnsupportedDateTimeField" name="long set(long, java.lang.String)" map="A"/>
  <method class="org.joda.time.field.UnsupportedDateTimeField" name="java.lang.String getAsShortText(org.joda.time.ReadablePartial, int, java.util.Locale)" map="A"/>
  <method class="org.joda.time.field.UnsupportedDateTimeField" name="int getLeapAmount(long)" map="B"/>
  <method class="org.joda.time.field.UnsupportedDateTimeField" name="int getMinimumValue()" map="D"/>
  <method class="org.joda.time.field.UnsupportedDateTimeField" name="boolean isSupported()" map="E"/>
  <method class="org.joda.time.field.UnsupportedDateTimeField" name="long add(long, int)" map="B"/>
  <method class="org.joda.time.field.UnsupportedDateTimeField" name="java.lang.String getAsShortText(long)" map="C"/>
  <method class="org.joda.time.field.UnsupportedDateTimeField" name="long remainder(long)" map="D"/>
  <method class="org.joda.time.field.UnsupportedDateTimeField" name="int get(long)" map="E"/>
  <method class="org.joda.time.field.UnsupportedDateTimeField" name="int getDifference(long, long)" map="B"/>
  <method class="org.joda.time.field.UnsupportedDateTimeField" name="int[] addWrapPartial(org.joda.time.ReadablePartial, int, int[], int)" map="B"/>
  <method class="org.joda.time.field.UnsupportedDateTimeField" name="int getMaximumValue()" map="F"/>
  <method class="org.joda.time.field.UnsupportedDateTimeField" name="long roundHalfFloor(long)" map="F"/>
  <method class="org.joda.time.field.UnsupportedDateTimeField" name="java.lang.UnsupportedOperationException unsupported()" map="M"/>
  <method class="org.joda.time.field.UnsupportedDateTimeField" name="int[] addWrapField(org.joda.time.ReadablePartial, int, int[], int)" map="C"/>
  <method class="org.joda.time.field.UnsupportedDateTimeField" name="java.lang.String toString()" map="toString"/>
  <method class="org.joda.time.field.UnsupportedDateTimeField" name="int[] add(org.joda.time.ReadablePartial, int, int[], int)" map="D"/>
  <method class="org.joda.time.field.UnsupportedDateTimeField" name="java.lang.String getAsText(int, java.util.Locale)" map="A"/>
  <method class="org.joda.time.field.UnsupportedDateTimeField" name="int getMinimumValue(long)" map="G"/>
  <method class="org.joda.time.field.UnsupportedDateTimeField" name="java.lang.String getAsShortText(int, java.util.Locale)" map="B"/>
  <method class="org.joda.time.field.UnsupportedDateTimeField" name="java.lang.String getName()" map="G"/>
  <method class="org.joda.time.field.UnsupportedDateTimeField" name="long roundCeiling(long)" map="H"/>
  <method class="org.joda.time.field.UnsupportedDateTimeField" name="java.lang.Object readResolve()" map="N"/>
  <method class="org.joda.time.field.UnsupportedDateTimeField" name="long roundHalfCeiling(long)" map="I"/>
  <method class="org.joda.time.field.UnsupportedDateTimeField" name="int getMinimumValue(org.joda.time.ReadablePartial)" map="A"/>
  <method class="org.joda.time.field.UnsupportedDateTimeField" name="java.lang.String getAsText(long)" map="J"/>
  <method class="org.joda.time.field.UnsupportedDateTimeField" name="java.lang.String getAsText(org.joda.time.ReadablePartial, int, java.util.Locale)" map="B"/>
  <method class="org.joda.time.field.UnsupportedDateTimeField" name="long roundHalfEven(long)" map="K"/>
  <method class="org.joda.time.field.UnsupportedDateTimeField" name="long getDifferenceAsLong(long, long)" map="C"/>
  <method class="org.joda.time.field.UnsupportedDateTimeField" name="org.joda.time.DurationField getDurationField()" map="H"/>
  <method class="org.joda.time.field.UnsupportedDateTimeField" name="java.lang.String getAsShortText(org.joda.time.ReadablePartial, java.util.Locale)" map="A"/>
  <method class="org.joda.time.field.UnsupportedDateTimeField" name="org.joda.time.DateTimeFieldType getType()" map="I"/>
  <method class="org.joda.time.field.UnsupportedDateTimeField" name="int getMaximumValue(org.joda.time.ReadablePartial, int[])" map="A"/>
  <method class="org.joda.time.field.UnsupportedDateTimeField" name="long set(long, int)" map="C"/>
  <method class="org.joda.time.field.UnsupportedDateTimeField" name="java.lang.String getAsText(org.joda.time.ReadablePartial, java.util.Locale)" map="B"/>
  <method class="org.joda.time.field.UnsupportedDateTimeField" name="boolean isLeap(long)" map="L"/>
  <method class="org.joda.time.field.UnsupportedDateTimeField" name="int getMaximumShortTextLength(java.util.Locale)" map="B"/>
  <method class="org.joda.time.field.UnsupportedDateTimeField" name="int getMinimumValue(org.joda.time.ReadablePartial, int[])" map="B"/>
  <method class="org.joda.time.field.UnsupportedDateTimeField" name="int getMaximumValue(long)" map="M"/>
  <method class="org.joda.time.field.UnsupportedDateTimeField" name="long set(long, java.lang.String, java.util.Locale)" map="A"/>
  <method class="org.joda.time.field.UnsupportedDateTimeField" name="int getMaximumValue(org.joda.time.ReadablePartial)" map="B"/>
  <package name="org.joda.time.convert" map="E"/>
  <class name="org.joda.time.convert.AbstractConverter" map="A"/>
  <method class="org.joda.time.convert.AbstractConverter" name="int[] getPartialValues(org.joda.time.ReadablePartial, java.lang.Object, org.joda.time.Chronology, org.joda.time.format.DateTimeFormatter)" map="A"/>
  <method class="org.joda.time.convert.AbstractConverter" name="long getInstantMillis(java.lang.Object, org.joda.time.Chronology)" map="A"/>
  <method class="org.joda.time.convert.AbstractConverter" name="org.joda.time.PeriodType getPeriodType(java.lang.Object)" map="B"/>
  <method class="org.joda.time.convert.AbstractConverter" name="java.lang.String toString()" map="toString"/>
  <method class="org.joda.time.convert.AbstractConverter" name="int[] getPartialValues(org.joda.time.ReadablePartial, java.lang.Object, org.joda.time.Chronology)" map="A"/>
  <method class="org.joda.time.convert.AbstractConverter" name="boolean isReadableInterval(java.lang.Object, org.joda.time.Chronology)" map="B"/>
  <method class="org.joda.time.convert.AbstractConverter" name="org.joda.time.Chronology getChronology(java.lang.Object, org.joda.time.DateTimeZone)" map="A"/>
  <method class="org.joda.time.convert.AbstractConverter" name="org.joda.time.Chronology getChronology(java.lang.Object, org.joda.time.Chronology)" map="C"/>
  <class name="org.joda.time.convert.ReadablePartialConverter" map="B"/>
  <field class="org.joda.time.convert.ReadablePartialConverter" name="INSTANCE" map="J"/>
  <field class="org.joda.time.convert.ReadablePartialConverter" name="class$org$joda$time$ReadablePartial" map="class$A$A$A$B"/>
  <method class="org.joda.time.convert.ReadablePartialConverter" name="java.lang.Class getSupportedType()" map="A"/>
  <method class="org.joda.time.convert.ReadablePartialConverter" name="int[] getPartialValues(org.joda.time.ReadablePartial, java.lang.Object, org.joda.time.Chronology)" map="A"/>
  <method class="org.joda.time.convert.ReadablePartialConverter" name="java.lang.Class class$(java.lang.String)" map="class$"/>
  <method class="org.joda.time.convert.ReadablePartialConverter" name="org.joda.time.Chronology getChronology(java.lang.Object, org.joda.time.DateTimeZone)" map="A"/>
  <method class="org.joda.time.convert.ReadablePartialConverter" name="org.joda.time.Chronology getChronology(java.lang.Object, org.joda.time.Chronology)" map="C"/>
  <class name="org.joda.time.convert.DurationConverter" map="C"/>
  <method class="org.joda.time.convert.DurationConverter" name="long getDurationMillis(java.lang.Object)" map="A"/>
  <class name="org.joda.time.convert.InstantConverter" map="D"/>
  <method class="org.joda.time.convert.InstantConverter" name="long getInstantMillis(java.lang.Object, org.joda.time.Chronology)" map="A"/>
  <method class="org.joda.time.convert.InstantConverter" name="org.joda.time.Chronology getChronology(java.lang.Object, org.joda.time.DateTimeZone)" map="A"/>
  <method class="org.joda.time.convert.InstantConverter" name="org.joda.time.Chronology getChronology(java.lang.Object, org.joda.time.Chronology)" map="C"/>
  <class name="org.joda.time.convert.ConverterSet$Entry" map="_A"/>
  <field class="org.joda.time.convert.ConverterSet$Entry" name="iConverter" map="A"/>
  <field class="org.joda.time.convert.ConverterSet$Entry" name="iType" map="B"/>
  <class name="org.joda.time.convert.ConverterSet" map="E"/>
  <field class="org.joda.time.convert.ConverterSet" name="iConverters" map="A"/>
  <field class="org.joda.time.convert.ConverterSet" name="iSelectEntries" map="B"/>
  <method class="org.joda.time.convert.ConverterSet" name="org.joda.time.convert.ConverterSet remove(org.joda.time.convert.Converter, org.joda.time.convert.Converter[])" map="A"/>
  <method class="org.joda.time.convert.ConverterSet" name="void copyInto(org.joda.time.convert.Converter[])" map="A"/>
  <method class="org.joda.time.convert.ConverterSet" name="int size()" map="A"/>
  <method class="org.joda.time.convert.ConverterSet" name="org.joda.time.convert.Converter select(java.lang.Class)" map="A"/>
  <method class="org.joda.time.convert.ConverterSet" name="org.joda.time.convert.Converter selectSlow(org.joda.time.convert.ConverterSet, java.lang.Class)" map="A"/>
  <method class="org.joda.time.convert.ConverterSet" name="org.joda.time.convert.ConverterSet remove(int, org.joda.time.convert.Converter[])" map="A"/>
  <method class="org.joda.time.convert.ConverterSet" name="org.joda.time.convert.ConverterSet add(org.joda.time.convert.Converter, org.joda.time.convert.Converter[])" map="B"/>
  <class name="org.joda.time.convert.DateConverter" map="F"/>
  <field class="org.joda.time.convert.DateConverter" name="class$java$util$Date" map="class$java$util$Date"/>
  <field class="org.joda.time.convert.DateConverter" name="INSTANCE" map="I"/>
  <method class="org.joda.time.convert.DateConverter" name="long getInstantMillis(java.lang.Object, org.joda.time.Chronology)" map="A"/>
  <method class="org.joda.time.convert.DateConverter" name="java.lang.Class getSupportedType()" map="A"/>
  <method class="org.joda.time.convert.DateConverter" name="java.lang.Class class$(java.lang.String)" map="class$"/>
  <class name="org.joda.time.convert.NullConverter" map="G"/>
  <field class="org.joda.time.convert.NullConverter" name="INSTANCE" map="A"/>
  <method class="org.joda.time.convert.NullConverter" name="java.lang.Class getSupportedType()" map="A"/>
  <method class="org.joda.time.convert.NullConverter" name="void setInto(org.joda.time.ReadWritablePeriod, java.lang.Object, org.joda.time.Chronology)" map="A"/>
  <method class="org.joda.time.convert.NullConverter" name="long getDurationMillis(java.lang.Object)" map="A"/>
  <method class="org.joda.time.convert.NullConverter" name="void setInto(org.joda.time.ReadWritableInterval, java.lang.Object, org.joda.time.Chronology)" map="A"/>
  <class name="org.joda.time.convert.PeriodConverter" map="H"/>
  <method class="org.joda.time.convert.PeriodConverter" name="void setInto(org.joda.time.ReadWritablePeriod, java.lang.Object, org.joda.time.Chronology)" map="A"/>
  <method class="org.joda.time.convert.PeriodConverter" name="org.joda.time.PeriodType getPeriodType(java.lang.Object)" map="B"/>
  <class name="org.joda.time.convert.ReadableIntervalConverter" map="I"/>
  <field class="org.joda.time.convert.ReadableIntervalConverter" name="class$org$joda$time$ReadableInterval" map="class$A$A$A$P"/>
  <field class="org.joda.time.convert.ReadableIntervalConverter" name="INSTANCE" map="C"/>
  <method class="org.joda.time.convert.ReadableIntervalConverter" name="java.lang.Class getSupportedType()" map="A"/>
  <method class="org.joda.time.convert.ReadableIntervalConverter" name="void setInto(org.joda.time.ReadWritablePeriod, java.lang.Object, org.joda.time.Chronology)" map="A"/>
  <method class="org.joda.time.convert.ReadableIntervalConverter" name="long getDurationMillis(java.lang.Object)" map="A"/>
  <method class="org.joda.time.convert.ReadableIntervalConverter" name="void setInto(org.joda.time.ReadWritableInterval, java.lang.Object, org.joda.time.Chronology)" map="A"/>
  <method class="org.joda.time.convert.ReadableIntervalConverter" name="java.lang.Class class$(java.lang.String)" map="class$"/>
  <method class="org.joda.time.convert.ReadableIntervalConverter" name="boolean isReadableInterval(java.lang.Object, org.joda.time.Chronology)" map="B"/>
  <class name="org.joda.time.convert.StringConverter" map="J"/>
  <field class="org.joda.time.convert.StringConverter" name="class$java$lang$String" map="class$java$lang$String"/>
  <field class="org.joda.time.convert.StringConverter" name="INSTANCE" map="B"/>
  <method class="org.joda.time.convert.StringConverter" name="int[] getPartialValues(org.joda.time.ReadablePartial, java.lang.Object, org.joda.time.Chronology, org.joda.time.format.DateTimeFormatter)" map="A"/>
  <method class="org.joda.time.convert.StringConverter" name="long getInstantMillis(java.lang.Object, org.joda.time.Chronology)" map="A"/>
  <method class="org.joda.time.convert.StringConverter" name="java.lang.Class getSupportedType()" map="A"/>
  <method class="org.joda.time.convert.StringConverter" name="void setInto(org.joda.time.ReadWritablePeriod, java.lang.Object, org.joda.time.Chronology)" map="A"/>
  <method class="org.joda.time.convert.StringConverter" name="long getDurationMillis(java.lang.Object)" map="A"/>
  <method class="org.joda.time.convert.StringConverter" name="void setInto(org.joda.time.ReadWritableInterval, java.lang.Object, org.joda.time.Chronology)" map="A"/>
  <method class="org.joda.time.convert.StringConverter" name="java.lang.Class class$(java.lang.String)" map="class$"/>
  <class name="org.joda.time.convert.ReadableDurationConverter" map="K"/>
  <field class="org.joda.time.convert.ReadableDurationConverter" name="INSTANCE" map="D"/>
  <field class="org.joda.time.convert.ReadableDurationConverter" name="class$org$joda$time$ReadableDuration" map="class$A$A$A$f"/>
  <method class="org.joda.time.convert.ReadableDurationConverter" name="java.lang.Class getSupportedType()" map="A"/>
  <method class="org.joda.time.convert.ReadableDurationConverter" name="void setInto(org.joda.time.ReadWritablePeriod, java.lang.Object, org.joda.time.Chronology)" map="A"/>
  <method class="org.joda.time.convert.ReadableDurationConverter" name="long getDurationMillis(java.lang.Object)" map="A"/>
  <method class="org.joda.time.convert.ReadableDurationConverter" name="java.lang.Class class$(java.lang.String)" map="class$"/>
  <class name="org.joda.time.convert.CalendarConverter" map="L"/>
  <field class="org.joda.time.convert.CalendarConverter" name="class$java$util$Calendar" map="class$java$util$Calendar"/>
  <field class="org.joda.time.convert.CalendarConverter" name="INSTANCE" map="F"/>
  <method class="org.joda.time.convert.CalendarConverter" name="long getInstantMillis(java.lang.Object, org.joda.time.Chronology)" map="A"/>
  <method class="org.joda.time.convert.CalendarConverter" name="java.lang.Class getSupportedType()" map="A"/>
  <method class="org.joda.time.convert.CalendarConverter" name="java.lang.Class class$(java.lang.String)" map="class$"/>
  <method class="org.joda.time.convert.CalendarConverter" name="org.joda.time.Chronology getChronology(java.lang.Object, org.joda.time.DateTimeZone)" map="A"/>
  <method class="org.joda.time.convert.CalendarConverter" name="org.joda.time.Chronology getChronology(java.lang.Object, org.joda.time.Chronology)" map="C"/>
  <class name="org.joda.time.convert.IntervalConverter" map="M"/>
  <method class="org.joda.time.convert.IntervalConverter" name="void setInto(org.joda.time.ReadWritableInterval, java.lang.Object, org.joda.time.Chronology)" map="A"/>
  <method class="org.joda.time.convert.IntervalConverter" name="boolean isReadableInterval(java.lang.Object, org.joda.time.Chronology)" map="B"/>
  <class name="org.joda.time.convert.PartialConverter" map="N"/>
  <method class="org.joda.time.convert.PartialConverter" name="int[] getPartialValues(org.joda.time.ReadablePartial, java.lang.Object, org.joda.time.Chronology, org.joda.time.format.DateTimeFormatter)" map="A"/>
  <method class="org.joda.time.convert.PartialConverter" name="int[] getPartialValues(org.joda.time.ReadablePartial, java.lang.Object, org.joda.time.Chronology)" map="A"/>
  <method class="org.joda.time.convert.PartialConverter" name="org.joda.time.Chronology getChronology(java.lang.Object, org.joda.time.DateTimeZone)" map="A"/>
  <method class="org.joda.time.convert.PartialConverter" name="org.joda.time.Chronology getChronology(java.lang.Object, org.joda.time.Chronology)" map="C"/>
  <class name="org.joda.time.convert.ConverterManager" map="O"/>
  <field class="org.joda.time.convert.ConverterManager" name="iIntervalConverters" map="A"/>
  <field class="org.joda.time.convert.ConverterManager" name="iPartialConverters" map="B"/>
  <field class="org.joda.time.convert.ConverterManager" name="iPeriodConverters" map="C"/>
  <field class="org.joda.time.convert.ConverterManager" name="iInstantConverters" map="D"/>
  <field class="org.joda.time.convert.ConverterManager" name="INSTANCE" map="E"/>
  <field class="org.joda.time.convert.ConverterManager" name="iDurationConverters" map="F"/>
  <method class="org.joda.time.convert.ConverterManager" name="void checkAlterInstantConverters()" map="A"/>
  <method class="org.joda.time.convert.ConverterManager" name="org.joda.time.convert.PartialConverter[] getPartialConverters()" map="B"/>
  <method class="org.joda.time.convert.ConverterManager" name="org.joda.time.convert.PeriodConverter getPeriodConverter(java.lang.Object)" map="A"/>
  <method class="org.joda.time.convert.ConverterManager" name="org.joda.time.convert.IntervalConverter[] getIntervalConverters()" map="C"/>
  <method class="org.joda.time.convert.ConverterManager" name="org.joda.time.convert.DurationConverter getDurationConverter(java.lang.Object)" map="B"/>
  <method class="org.joda.time.convert.ConverterManager" name="org.joda.time.convert.IntervalConverter getIntervalConverter(java.lang.Object)" map="C"/>
  <method class="org.joda.time.convert.ConverterManager" name="org.joda.time.convert.InstantConverter getInstantConverter(java.lang.Object)" map="D"/>
  <method class="org.joda.time.convert.ConverterManager" name="org.joda.time.convert.InstantConverter[] getInstantConverters()" map="D"/>
  <method class="org.joda.time.convert.ConverterManager" name="java.lang.String toString()" map="toString"/>
  <method class="org.joda.time.convert.ConverterManager" name="void checkAlterIntervalConverters()" map="E"/>
  <method class="org.joda.time.convert.ConverterManager" name="org.joda.time.convert.DurationConverter removeDurationConverter(org.joda.time.convert.DurationConverter)" map="A"/>
  <method class="org.joda.time.convert.ConverterManager" name="org.joda.time.convert.DurationConverter addDurationConverter(org.joda.time.convert.DurationConverter)" map="B"/>
  <method class="org.joda.time.convert.ConverterManager" name="org.joda.time.convert.PeriodConverter removePeriodConverter(org.joda.time.convert.PeriodConverter)" map="A"/>
  <method class="org.joda.time.convert.ConverterManager" name="org.joda.time.convert.ConverterManager getInstance()" map="F"/>
  <method class="org.joda.time.convert.ConverterManager" name="void checkAlterPartialConverters()" map="G"/>
  <method class="org.joda.time.convert.ConverterManager" name="org.joda.time.convert.PartialConverter getPartialConverter(java.lang.Object)" map="E"/>
  <method class="org.joda.time.convert.ConverterManager" name="org.joda.time.convert.PeriodConverter[] getPeriodConverters()" map="H"/>
  <method class="org.joda.time.convert.ConverterManager" name="org.joda.time.convert.DurationConverter[] getDurationConverters()" map="I"/>
  <method class="org.joda.time.convert.ConverterManager" name="org.joda.time.convert.PeriodConverter addPeriodConverter(org.joda.time.convert.PeriodConverter)" map="B"/>
  <method class="org.joda.time.convert.ConverterManager" name="org.joda.time.convert.InstantConverter removeInstantConverter(org.joda.time.convert.InstantConverter)" map="A"/>
  <method class="org.joda.time.convert.ConverterManager" name="org.joda.time.convert.PartialConverter removePartialConverter(org.joda.time.convert.PartialConverter)" map="A"/>
  <method class="org.joda.time.convert.ConverterManager" name="void checkAlterPeriodConverters()" map="J"/>
  <method class="org.joda.time.convert.ConverterManager" name="void checkAlterDurationConverters()" map="K"/>
  <method class="org.joda.time.convert.ConverterManager" name="org.joda.time.convert.InstantConverter addInstantConverter(org.joda.time.convert.InstantConverter)" map="B"/>
  <method class="org.joda.time.convert.ConverterManager" name="org.joda.time.convert.PartialConverter addPartialConverter(org.joda.time.convert.PartialConverter)" map="B"/>
  <method class="org.joda.time.convert.ConverterManager" name="org.joda.time.convert.IntervalConverter removeIntervalConverter(org.joda.time.convert.IntervalConverter)" map="A"/>
  <method class="org.joda.time.convert.ConverterManager" name="org.joda.time.convert.IntervalConverter addIntervalConverter(org.joda.time.convert.IntervalConverter)" map="B"/>
  <class name="org.joda.time.convert.ReadablePeriodConverter" map="P"/>
  <field class="org.joda.time.convert.ReadablePeriodConverter" name="class$org$joda$time$ReadablePeriod" map="class$A$A$A$F"/>
  <field class="org.joda.time.convert.ReadablePeriodConverter" name="INSTANCE" map="E"/>
  <method class="org.joda.time.convert.ReadablePeriodConverter" name="java.lang.Class getSupportedType()" map="A"/>
  <method class="org.joda.time.convert.ReadablePeriodConverter" name="void setInto(org.joda.time.ReadWritablePeriod, java.lang.Object, org.joda.time.Chronology)" map="A"/>
  <method class="org.joda.time.convert.ReadablePeriodConverter" name="org.joda.time.PeriodType getPeriodType(java.lang.Object)" map="B"/>
  <method class="org.joda.time.convert.ReadablePeriodConverter" name="java.lang.Class class$(java.lang.String)" map="class$"/>
  <class name="org.joda.time.convert.LongConverter" map="Q"/>
  <field class="org.joda.time.convert.LongConverter" name="INSTANCE" map="G"/>
  <field class="org.joda.time.convert.LongConverter" name="class$java$lang$Long" map="class$java$lang$Long"/>
  <method class="org.joda.time.convert.LongConverter" name="long getInstantMillis(java.lang.Object, org.joda.time.Chronology)" map="A"/>
  <method class="org.joda.time.convert.LongConverter" name="java.lang.Class getSupportedType()" map="A"/>
  <method class="org.joda.time.convert.LongConverter" name="long getDurationMillis(java.lang.Object)" map="A"/>
  <method class="org.joda.time.convert.LongConverter" name="java.lang.Class class$(java.lang.String)" map="class$"/>
  <class name="org.joda.time.convert.Converter" map="R"/>
  <method class="org.joda.time.convert.Converter" name="java.lang.Class getSupportedType()" map="A"/>
  <class name="org.joda.time.convert.ReadableInstantConverter" map="S"/>
  <field class="org.joda.time.convert.ReadableInstantConverter" name="class$org$joda$time$ReadableInstant" map="class$A$A$A$D"/>
  <field class="org.joda.time.convert.ReadableInstantConverter" name="INSTANCE" map="H"/>
  <method class="org.joda.time.convert.ReadableInstantConverter" name="long getInstantMillis(java.lang.Object, org.joda.time.Chronology)" map="A"/>
  <method class="org.joda.time.convert.ReadableInstantConverter" name="java.lang.Class getSupportedType()" map="A"/>
  <method class="org.joda.time.convert.ReadableInstantConverter" name="java.lang.Class class$(java.lang.String)" map="class$"/>
  <method class="org.joda.time.convert.ReadableInstantConverter" name="org.joda.time.Chronology getChronology(java.lang.Object, org.joda.time.DateTimeZone)" map="A"/>
  <method class="org.joda.time.convert.ReadableInstantConverter" name="org.joda.time.Chronology getChronology(java.lang.Object, org.joda.time.Chronology)" map="C"/>
  <package name="org.joda.time.tz" map="F"/>
  <class name="org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone" map="_A"/>
  <field class="org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone" name="iNameKeys" map="W"/>
  <field class="org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone" name="iTransitions" map="X"/>
  <field class="org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone" name="iStandardOffsets" map="Y"/>
  <field class="org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone" name="iWallOffsets" map="Z"/>
  <field class="org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone" name="iTailZone" map="_"/>
  <field class="org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone" name="serialVersionUID" map="a"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone" name="int getStandardOffset(long)" map="J"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone" name="boolean equals(java.lang.Object)" map="equals"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone" name="boolean isCachable()" map="M"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone" name="int getOffset(long)" map="E"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone" name="java.lang.String getNameKey(long)" map="G"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone" name="org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput, java.lang.String)" map="B"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone" name="long previousTransition(long)" map="D"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone" name="void writeTo(java.io.DataOutput)" map="B"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone" name="org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String, boolean, java.util.ArrayList, org.joda.time.tz.DateTimeZoneBuilder$DSTZone)" map="A"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone" name="boolean isFixed()" map="J"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone" name="long nextTransition(long)" map="C"/>
  <class name="org.joda.time.tz.DateTimeZoneBuilder$Rule" map="_B"/>
  <field class="org.joda.time.tz.DateTimeZoneBuilder$Rule" name="iToYear" map="A"/>
  <field class="org.joda.time.tz.DateTimeZoneBuilder$Rule" name="iFromYear" map="B"/>
  <field class="org.joda.time.tz.DateTimeZoneBuilder$Rule" name="iRecurrence" map="C"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder$Rule" name="int getSaveMillis()" map="A"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder$Rule" name="long next(long, int, int)" map="A"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder$Rule" name="java.lang.String getNameKey()" map="B"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder$Rule" name="int getToYear()" map="C"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder$Rule" name="int getFromYear()" map="D"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder$Rule" name="org.joda.time.tz.DateTimeZoneBuilder$OfYear getOfYear()" map="E"/>
  <class name="org.joda.time.tz.DateTimeZoneBuilder$Transition" map="_C"/>
  <field class="org.joda.time.tz.DateTimeZoneBuilder$Transition" name="iMillis" map="A"/>
  <field class="org.joda.time.tz.DateTimeZoneBuilder$Transition" name="iStandardOffset" map="B"/>
  <field class="org.joda.time.tz.DateTimeZoneBuilder$Transition" name="iNameKey" map="C"/>
  <field class="org.joda.time.tz.DateTimeZoneBuilder$Transition" name="iWallOffset" map="D"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder$Transition" name="boolean isTransitionFrom(org.joda.time.tz.DateTimeZoneBuilder$Transition)" map="A"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder$Transition" name="int getSaveMillis()" map="A"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder$Transition" name="java.lang.String getNameKey()" map="B"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder$Transition" name="long getMillis()" map="C"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder$Transition" name="int getWallOffset()" map="D"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder$Transition" name="int getStandardOffset()" map="E"/>
  <class name="org.joda.time.tz.DateTimeZoneBuilder$RuleSet" map="_D"/>
  <field class="org.joda.time.tz.DateTimeZoneBuilder$RuleSet" name="iInitialSaveMillis" map="A"/>
  <field class="org.joda.time.tz.DateTimeZoneBuilder$RuleSet" name="iRules" map="B"/>
  <field class="org.joda.time.tz.DateTimeZoneBuilder$RuleSet" name="iInitialNameKey" map="C"/>
  <field class="org.joda.time.tz.DateTimeZoneBuilder$RuleSet" name="iStandardOffset" map="D"/>
  <field class="org.joda.time.tz.DateTimeZoneBuilder$RuleSet" name="YEAR_LIMIT" map="E"/>
  <field class="org.joda.time.tz.DateTimeZoneBuilder$RuleSet" name="iUpperYear" map="F"/>
  <field class="org.joda.time.tz.DateTimeZoneBuilder$RuleSet" name="iUpperOfYear" map="G"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder$RuleSet" name="void addRule(org.joda.time.tz.DateTimeZoneBuilder$Rule)" map="A"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder$RuleSet" name="org.joda.time.tz.DateTimeZoneBuilder$DSTZone buildTailZone(java.lang.String)" map="A"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder$RuleSet" name="org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long, int)" map="A"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder$RuleSet" name="long getUpperLimit(int)" map="A"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder$RuleSet" name="int getStandardOffset()" map="A"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder$RuleSet" name="void setUpperLimit(int, org.joda.time.tz.DateTimeZoneBuilder$OfYear)" map="A"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder$RuleSet" name="void setFixedSavings(java.lang.String, int)" map="A"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder$RuleSet" name="org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)" map="A"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder$RuleSet" name="void setStandardOffset(int)" map="B"/>
  <class name="org.joda.time.tz.DateTimeZoneBuilder$Recurrence" map="_E"/>
  <field class="org.joda.time.tz.DateTimeZoneBuilder$Recurrence" name="iSaveMillis" map="A"/>
  <field class="org.joda.time.tz.DateTimeZoneBuilder$Recurrence" name="iNameKey" map="B"/>
  <field class="org.joda.time.tz.DateTimeZoneBuilder$Recurrence" name="iOfYear" map="C"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder$Recurrence" name="java.lang.String getNameKey()" map="A"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder$Recurrence" name="boolean equals(java.lang.Object)" map="equals"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder$Recurrence" name="long next(long, int, int)" map="A"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder$Recurrence" name="int getSaveMillis()" map="B"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder$Recurrence" name="long previous(long, int, int)" map="B"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder$Recurrence" name="org.joda.time.tz.DateTimeZoneBuilder$Recurrence rename(java.lang.String)" map="A"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder$Recurrence" name="void writeTo(java.io.DataOutput)" map="A"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder$Recurrence" name="org.joda.time.tz.DateTimeZoneBuilder$Recurrence renameAppend(java.lang.String)" map="B"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder$Recurrence" name="org.joda.time.tz.DateTimeZoneBuilder$OfYear getOfYear()" map="C"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder$Recurrence" name="org.joda.time.tz.DateTimeZoneBuilder$Recurrence readFrom(java.io.DataInput)" map="A"/>
  <class name="org.joda.time.tz.DateTimeZoneBuilder$DSTZone" map="_F"/>
  <field class="org.joda.time.tz.DateTimeZoneBuilder$DSTZone" name="iStandardOffset" map="K"/>
  <field class="org.joda.time.tz.DateTimeZoneBuilder$DSTZone" name="iStartRecurrence" map="L"/>
  <field class="org.joda.time.tz.DateTimeZoneBuilder$DSTZone" name="iEndRecurrence" map="M"/>
  <field class="org.joda.time.tz.DateTimeZoneBuilder$DSTZone" name="serialVersionUID" map="N"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder$DSTZone" name="int getStandardOffset(long)" map="J"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder$DSTZone" name="boolean equals(java.lang.Object)" map="equals"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder$DSTZone" name="int getOffset(long)" map="E"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder$DSTZone" name="java.lang.String getNameKey(long)" map="G"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder$DSTZone" name="org.joda.time.tz.DateTimeZoneBuilder$Recurrence findMatchingRecurrence(long)" map="K"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder$DSTZone" name="long previousTransition(long)" map="D"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder$DSTZone" name="void writeTo(java.io.DataOutput)" map="A"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder$DSTZone" name="org.joda.time.tz.DateTimeZoneBuilder$DSTZone readFrom(java.io.DataInput, java.lang.String)" map="A"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder$DSTZone" name="boolean isFixed()" map="J"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder$DSTZone" name="long nextTransition(long)" map="C"/>
  <class name="org.joda.time.tz.DateTimeZoneBuilder$OfYear" map="_G"/>
  <field class="org.joda.time.tz.DateTimeZoneBuilder$OfYear" name="iDayOfMonth" map="A"/>
  <field class="org.joda.time.tz.DateTimeZoneBuilder$OfYear" name="iMonthOfYear" map="B"/>
  <field class="org.joda.time.tz.DateTimeZoneBuilder$OfYear" name="iMillisOfDay" map="C"/>
  <field class="org.joda.time.tz.DateTimeZoneBuilder$OfYear" name="iAdvance" map="D"/>
  <field class="org.joda.time.tz.DateTimeZoneBuilder$OfYear" name="iMode" map="E"/>
  <field class="org.joda.time.tz.DateTimeZoneBuilder$OfYear" name="iDayOfWeek" map="F"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder$OfYear" name="org.joda.time.tz.DateTimeZoneBuilder$OfYear readFrom(java.io.DataInput)" map="A"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder$OfYear" name="long setInstant(int, int, int)" map="A"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder$OfYear" name="boolean equals(java.lang.Object)" map="equals"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder$OfYear" name="long next(long, int, int)" map="A"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder$OfYear" name="long previous(long, int, int)" map="B"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder$OfYear" name="long setDayOfWeek(org.joda.time.Chronology, long)" map="A"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder$OfYear" name="void writeTo(java.io.DataOutput)" map="A"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder$OfYear" name="long setDayOfMonth(org.joda.time.Chronology, long)" map="B"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder$OfYear" name="long setDayOfMonthNext(org.joda.time.Chronology, long)" map="C"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder$OfYear" name="long setDayOfMonthPrevious(org.joda.time.Chronology, long)" map="D"/>
  <class name="org.joda.time.tz.DateTimeZoneBuilder" map="A"/>
  <field class="org.joda.time.tz.DateTimeZoneBuilder" name="iRuleSets" map="A"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder" name="void writeTo(java.lang.String, java.io.DataOutput)" map="A"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder" name="org.joda.time.tz.DateTimeZoneBuilder setStandardOffset(int)" map="A"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder" name="org.joda.time.tz.DateTimeZoneBuilder addCutover(int, char, int, int, int, boolean, int)" map="A"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder" name="org.joda.time.DateTimeZone buildFixedZone(java.lang.String, java.lang.String, int, int)" map="A"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder" name="long readMillis(java.io.DataInput)" map="A"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder" name="void writeMillis(java.io.DataOutput, long)" map="A"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder" name="boolean addTransition(java.util.ArrayList, org.joda.time.tz.DateTimeZoneBuilder$Transition)" map="A"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder" name="org.joda.time.tz.DateTimeZoneBuilder addRecurringSavings(java.lang.String, int, int, int, char, int, int, int, boolean, int)" map="A"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder" name="org.joda.time.tz.DateTimeZoneBuilder$RuleSet getLastRuleSet()" map="A"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder" name="org.joda.time.DateTimeZone readFrom(java.io.DataInput, java.lang.String)" map="A"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder" name="void writeTo(java.lang.String, java.io.OutputStream)" map="A"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder" name="org.joda.time.DateTimeZone readFrom(java.io.InputStream, java.lang.String)" map="A"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder" name="org.joda.time.DateTimeZone toDateTimeZone(java.lang.String, boolean)" map="A"/>
  <method class="org.joda.time.tz.DateTimeZoneBuilder" name="org.joda.time.tz.DateTimeZoneBuilder setFixedSavings(java.lang.String, int)" map="A"/>
  <class name="org.joda.time.tz.FixedDateTimeZone" map="B"/>
  <field class="org.joda.time.tz.FixedDateTimeZone" name="iStandardOffset" map="O"/>
  <field class="org.joda.time.tz.FixedDateTimeZone" name="iNameKey" map="P"/>
  <field class="org.joda.time.tz.FixedDateTimeZone" name="iWallOffset" map="Q"/>
  <field class="org.joda.time.tz.FixedDateTimeZone" name="serialVersionUID" map="R"/>
  <method class="org.joda.time.tz.FixedDateTimeZone" name="int getStandardOffset(long)" map="J"/>
  <method class="org.joda.time.tz.FixedDateTimeZone" name="int hashCode()" map="hashCode"/>
  <method class="org.joda.time.tz.FixedDateTimeZone" name="boolean equals(java.lang.Object)" map="equals"/>
  <method class="org.joda.time.tz.FixedDateTimeZone" name="java.util.TimeZone toTimeZone()" map="K"/>
  <method class="org.joda.time.tz.FixedDateTimeZone" name="int getOffset(long)" map="E"/>
  <method class="org.joda.time.tz.FixedDateTimeZone" name="java.lang.String getNameKey(long)" map="G"/>
  <method class="org.joda.time.tz.FixedDateTimeZone" name="long previousTransition(long)" map="D"/>
  <method class="org.joda.time.tz.FixedDateTimeZone" name="int getOffsetFromLocal(long)" map="B"/>
  <method class="org.joda.time.tz.FixedDateTimeZone" name="boolean isFixed()" map="J"/>
  <method class="org.joda.time.tz.FixedDateTimeZone" name="long nextTransition(long)" map="C"/>
  <class name="org.joda.time.tz.Provider" map="C"/>
  <method class="org.joda.time.tz.Provider" name="org.joda.time.DateTimeZone getZone(java.lang.String)" map="A"/>
  <method class="org.joda.time.tz.Provider" name="java.util.Set getAvailableIDs()" map="A"/>
  <class name="org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear" map="_A"/>
  <field class="org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear" name="iDayOfMonth" map="A"/>
  <field class="org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear" name="iAdvanceDayOfWeek" map="B"/>
  <field class="org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear" name="iZoneChar" map="C"/>
  <field class="org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear" name="iMonthOfYear" map="D"/>
  <field class="org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear" name="iMillisOfDay" map="E"/>
  <field class="org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear" name="iDayOfWeek" map="F"/>
  <method class="org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear" name="void addCutover(org.joda.time.tz.DateTimeZoneBuilder, int)" map="A"/>
  <method class="org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear" name="java.lang.String toString()" map="toString"/>
  <method class="org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear" name="void addRecurring(org.joda.time.tz.DateTimeZoneBuilder, java.lang.String, int, int, int)" map="A"/>
  <class name="org.joda.time.tz.ZoneInfoCompiler$Rule" map="_B"/>
  <field class="org.joda.time.tz.ZoneInfoCompiler$Rule" name="iLetterS" map="A"/>
  <field class="org.joda.time.tz.ZoneInfoCompiler$Rule" name="iSaveMillis" map="B"/>
  <field class="org.joda.time.tz.ZoneInfoCompiler$Rule" name="iToYear" map="C"/>
  <field class="org.joda.time.tz.ZoneInfoCompiler$Rule" name="iFromYear" map="D"/>
  <field class="org.joda.time.tz.ZoneInfoCompiler$Rule" name="iName" map="E"/>
  <field class="org.joda.time.tz.ZoneInfoCompiler$Rule" name="iType" map="F"/>
  <field class="org.joda.time.tz.ZoneInfoCompiler$Rule" name="iDateTimeOfYear" map="G"/>
  <method class="org.joda.time.tz.ZoneInfoCompiler$Rule" name="java.lang.String formatName(java.lang.String)" map="A"/>
  <method class="org.joda.time.tz.ZoneInfoCompiler$Rule" name="void addRecurring(org.joda.time.tz.DateTimeZoneBuilder, java.lang.String)" map="A"/>
  <method class="org.joda.time.tz.ZoneInfoCompiler$Rule" name="java.lang.String toString()" map="toString"/>
  <class name="org.joda.time.tz.ZoneInfoCompiler$RuleSet" map="_C"/>
  <field class="org.joda.time.tz.ZoneInfoCompiler$RuleSet" name="iRules" map="A"/>
  <method class="org.joda.time.tz.ZoneInfoCompiler$RuleSet" name="void addRecurring(org.joda.time.tz.DateTimeZoneBuilder, java.lang.String)" map="A"/>
  <method class="org.joda.time.tz.ZoneInfoCompiler$RuleSet" name="void addRule(org.joda.time.tz.ZoneInfoCompiler$Rule)" map="A"/>
  <class name="org.joda.time.tz.ZoneInfoCompiler$Zone" map="_D"/>
  <field class="org.joda.time.tz.ZoneInfoCompiler$Zone" name="iRules" map="A"/>
  <field class="org.joda.time.tz.ZoneInfoCompiler$Zone" name="iUntilYear" map="B"/>
  <field class="org.joda.time.tz.ZoneInfoCompiler$Zone" name="iName" map="C"/>
  <field class="org.joda.time.tz.ZoneInfoCompiler$Zone" name="iNext" map="D"/>
  <field class="org.joda.time.tz.ZoneInfoCompiler$Zone" name="iFormat" map="E"/>
  <field class="org.joda.time.tz.ZoneInfoCompiler$Zone" name="iOffsetMillis" map="F"/>
  <field class="org.joda.time.tz.ZoneInfoCompiler$Zone" name="iUntilDateTimeOfYear" map="G"/>
  <method class="org.joda.time.tz.ZoneInfoCompiler$Zone" name="void chain(java.util.StringTokenizer)" map="A"/>
  <method class="org.joda.time.tz.ZoneInfoCompiler$Zone" name="java.lang.String toString()" map="toString"/>
  <method class="org.joda.time.tz.ZoneInfoCompiler$Zone" name="void addToBuilder(org.joda.time.tz.DateTimeZoneBuilder, java.util.Map)" map="A"/>
  <method class="org.joda.time.tz.ZoneInfoCompiler$Zone" name="void addToBuilder(org.joda.time.tz.ZoneInfoCompiler$Zone, org.joda.time.tz.DateTimeZoneBuilder, java.util.Map)" map="A"/>
  <class name="org.joda.time.tz.ZoneInfoCompiler" map="D"/>
  <field class="org.joda.time.tz.ZoneInfoCompiler" name="cLenientISO" map="A"/>
  <field class="org.joda.time.tz.ZoneInfoCompiler" name="iZones" map="B"/>
  <field class="org.joda.time.tz.ZoneInfoCompiler" name="iLinks" map="C"/>
  <field class="org.joda.time.tz.ZoneInfoCompiler" name="cStartOfYear" map="D"/>
  <field class="org.joda.time.tz.ZoneInfoCompiler" name="iRuleSets" map="E"/>
  <method class="org.joda.time.tz.ZoneInfoCompiler" name="org.joda.time.Chronology getLenientISOChronology()" map="A"/>
  <method class="org.joda.time.tz.ZoneInfoCompiler" name="char parseZoneChar(char)" map="A"/>
  <method class="org.joda.time.tz.ZoneInfoCompiler" name="java.util.Map compile(java.io.File, java.io.File[])" map="A"/>
  <method class="org.joda.time.tz.ZoneInfoCompiler" name="int parseTime(java.lang.String)" map="A"/>
  <method class="org.joda.time.tz.ZoneInfoCompiler" name="void writeZoneInfoMap(java.io.DataOutputStream, java.util.Map)" map="A"/>
  <method class="org.joda.time.tz.ZoneInfoCompiler" name="java.lang.String parseOptional(java.lang.String)" map="B"/>
  <method class="org.joda.time.tz.ZoneInfoCompiler" name="void printUsage()" map="B"/>
  <method class="org.joda.time.tz.ZoneInfoCompiler" name="int parseYear(java.lang.String, int)" map="A"/>
  <method class="org.joda.time.tz.ZoneInfoCompiler" name="void main(java.lang.String[])" map="A"/>
  <method class="org.joda.time.tz.ZoneInfoCompiler" name="int parseDayOfWeek(java.lang.String)" map="C"/>
  <method class="org.joda.time.tz.ZoneInfoCompiler" name="boolean test(java.lang.String, org.joda.time.DateTimeZone)" map="A"/>
  <method class="org.joda.time.tz.ZoneInfoCompiler" name="void parseDataFile(java.io.BufferedReader)" map="A"/>
  <method class="org.joda.time.tz.ZoneInfoCompiler" name="int parseMonth(java.lang.String)" map="D"/>
  <method class="org.joda.time.tz.ZoneInfoCompiler" name="org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear getStartOfYear()" map="C"/>
  <class name="org.joda.time.tz.CachedDateTimeZone$Info" map="_A"/>
  <field class="org.joda.time.tz.CachedDateTimeZone$Info" name="iZoneRef" map="A"/>
  <field class="org.joda.time.tz.CachedDateTimeZone$Info" name="iPeriodStart" map="B"/>
  <field class="org.joda.time.tz.CachedDateTimeZone$Info" name="iStandardOffset" map="C"/>
  <field class="org.joda.time.tz.CachedDateTimeZone$Info" name="iOffset" map="D"/>
  <field class="org.joda.time.tz.CachedDateTimeZone$Info" name="iNameKey" map="E"/>
  <field class="org.joda.time.tz.CachedDateTimeZone$Info" name="iNextInfo" map="F"/>
  <method class="org.joda.time.tz.CachedDateTimeZone$Info" name="int getStandardOffset(long)" map="A"/>
  <method class="org.joda.time.tz.CachedDateTimeZone$Info" name="java.lang.String getNameKey(long)" map="B"/>
  <method class="org.joda.time.tz.CachedDateTimeZone$Info" name="int getOffset(long)" map="C"/>
  <class name="org.joda.time.tz.CachedDateTimeZone" map="E"/>
  <field class="org.joda.time.tz.CachedDateTimeZone" name="iZone" map="S"/>
  <field class="org.joda.time.tz.CachedDateTimeZone" name="cInfoCacheMask" map="T"/>
  <field class="org.joda.time.tz.CachedDateTimeZone" name="iInfoCache" map="U"/>
  <field class="org.joda.time.tz.CachedDateTimeZone" name="serialVersionUID" map="V"/>
  <method class="org.joda.time.tz.CachedDateTimeZone" name="void readObject(java.io.ObjectInputStream)" map="A"/>
  <method class="org.joda.time.tz.CachedDateTimeZone" name="int getStandardOffset(long)" map="J"/>
  <method class="org.joda.time.tz.CachedDateTimeZone" name="org.joda.time.tz.CachedDateTimeZone$Info getInfo(long)" map="L"/>
  <method class="org.joda.time.tz.CachedDateTimeZone" name="int hashCode()" map="hashCode"/>
  <method class="org.joda.time.tz.CachedDateTimeZone" name="boolean equals(java.lang.Object)" map="equals"/>
  <method class="org.joda.time.tz.CachedDateTimeZone" name="org.joda.time.tz.CachedDateTimeZone$Info createInfo(long)" map="M"/>
  <method class="org.joda.time.tz.CachedDateTimeZone" name="int getOffset(long)" map="E"/>
  <method class="org.joda.time.tz.CachedDateTimeZone" name="java.lang.String getNameKey(long)" map="G"/>
  <method class="org.joda.time.tz.CachedDateTimeZone" name="long previousTransition(long)" map="D"/>
  <method class="org.joda.time.tz.CachedDateTimeZone" name="org.joda.time.tz.CachedDateTimeZone forZone(org.joda.time.DateTimeZone)" map="B"/>
  <method class="org.joda.time.tz.CachedDateTimeZone" name="org.joda.time.DateTimeZone getUncachedZone()" map="L"/>
  <method class="org.joda.time.tz.CachedDateTimeZone" name="boolean isFixed()" map="J"/>
  <method class="org.joda.time.tz.CachedDateTimeZone" name="long nextTransition(long)" map="C"/>
  <class name="org.joda.time.tz.NameProvider" map="F"/>
  <method class="org.joda.time.tz.NameProvider" name="java.lang.String getShortName(java.util.Locale, java.lang.String, java.lang.String)" map="A"/>
  <method class="org.joda.time.tz.NameProvider" name="java.lang.String getName(java.util.Locale, java.lang.String, java.lang.String)" map="B"/>
  <class name="org.joda.time.tz.UTCProvider" map="G"/>
  <method class="org.joda.time.tz.UTCProvider" name="org.joda.time.DateTimeZone getZone(java.lang.String)" map="A"/>
  <method class="org.joda.time.tz.UTCProvider" name="java.util.Set getAvailableIDs()" map="A"/>
  <class name="org.joda.time.tz.DefaultNameProvider" map="H"/>
  <field class="org.joda.time.tz.DefaultNameProvider" name="iByLocaleCache" map="A"/>
  <method class="org.joda.time.tz.DefaultNameProvider" name="java.util.HashMap createCache()" map="A"/>
  <method class="org.joda.time.tz.DefaultNameProvider" name="java.lang.String[] getNameSet(java.util.Locale, java.lang.String, java.lang.String)" map="C"/>
  <method class="org.joda.time.tz.DefaultNameProvider" name="java.lang.String getShortName(java.util.Locale, java.lang.String, java.lang.String)" map="A"/>
  <method class="org.joda.time.tz.DefaultNameProvider" name="java.lang.String getName(java.util.Locale, java.lang.String, java.lang.String)" map="B"/>
  <class name="org.joda.time.tz.ZoneInfoProvider" map="I"/>
  <field class="org.joda.time.tz.ZoneInfoProvider" name="iZoneInfoMap" map="A"/>
  <field class="org.joda.time.tz.ZoneInfoProvider" name="iResourcePath" map="B"/>
  <field class="org.joda.time.tz.ZoneInfoProvider" name="iFileDir" map="C"/>
  <field class="org.joda.time.tz.ZoneInfoProvider" name="iLoader" map="D"/>
  <method class="org.joda.time.tz.ZoneInfoProvider" name="java.util.Map loadZoneInfoMap(java.io.InputStream)" map="A"/>
  <method class="org.joda.time.tz.ZoneInfoProvider" name="void uncaughtException(java.lang.Exception)" map="A"/>
  <method class="org.joda.time.tz.ZoneInfoProvider" name="org.joda.time.DateTimeZone getZone(java.lang.String)" map="A"/>
  <method class="org.joda.time.tz.ZoneInfoProvider" name="org.joda.time.DateTimeZone loadZoneData(java.lang.String)" map="B"/>
  <method class="org.joda.time.tz.ZoneInfoProvider" name="java.util.Set getAvailableIDs()" map="A"/>
  <method class="org.joda.time.tz.ZoneInfoProvider" name="java.io.InputStream openResource(java.lang.String)" map="C"/>
  <method class="org.joda.time.tz.ZoneInfoProvider" name="void readZoneInfoMap(java.io.DataInputStream, java.util.Map)" map="A"/>
  <class name="org.joda.time.Period" map="A"/>
  <field class="org.joda.time.Period" name="ZERO" map="D"/>
  <field class="org.joda.time.Period" name="serialVersionUID" map="E"/>
  <method class="org.joda.time.Period" name="int getDays()" map="G"/>
  <method class="org.joda.time.Period" name="org.joda.time.Period seconds(int)" map="C"/>
  <method class="org.joda.time.Period" name="org.joda.time.Period minus(org.joda.time.ReadablePeriod)" map="E"/>
  <method class="org.joda.time.Period" name="org.joda.time.Period minusSeconds(int)" map="D"/>
  <method class="org.joda.time.Period" name="org.joda.time.Period withYears(int)" map="E"/>
  <method class="org.joda.time.Period" name="org.joda.time.Period withSeconds(int)" map="F"/>
  <method class="org.joda.time.Period" name="org.joda.time.Hours toStandardHours()" map="H"/>
  <method class="org.joda.time.Period" name="org.joda.time.Period withWeeks(int)" map="G"/>
  <method class="org.joda.time.Period" name="org.joda.time.Period minusYears(int)" map="H"/>
  <method class="org.joda.time.Period" name="org.joda.time.Period withHours(int)" map="I"/>
  <method class="org.joda.time.Period" name="org.joda.time.Period minusWeeks(int)" map="J"/>
  <method class="org.joda.time.Period" name="int getMonths()" map="I"/>
  <method class="org.joda.time.Period" name="org.joda.time.Days toStandardDays()" map="J"/>
  <method class="org.joda.time.Period" name="org.joda.time.Period minusHours(int)" map="K"/>
  <method class="org.joda.time.Period" name="org.joda.time.Period plusSeconds(int)" map="L"/>
  <method class="org.joda.time.Period" name="org.joda.time.Period fieldDifference(org.joda.time.ReadablePartial, org.joda.time.ReadablePartial)" map="A"/>
  <method class="org.joda.time.Period" name="org.joda.time.Period normalizedStandard()" map="K"/>
  <method class="org.joda.time.Period" name="org.joda.time.Period withField(org.joda.time.DurationFieldType, int)" map="C"/>
  <method class="org.joda.time.Period" name="org.joda.time.Period plusDays(int)" map="M"/>
  <method class="org.joda.time.Period" name="org.joda.time.Period toPeriod()" map="B"/>
  <method class="org.joda.time.Period" name="org.joda.time.Period withFields(org.joda.time.ReadablePeriod)" map="F"/>
  <method class="org.joda.time.Period" name="int getMillis()" map="L"/>
  <method class="org.joda.time.Period" name="int getSeconds()" map="M"/>
  <method class="org.joda.time.Period" name="org.joda.time.Seconds toStandardSeconds()" map="N"/>
  <method class="org.joda.time.Period" name="org.joda.time.Period withMonths(int)" map="N"/>
  <method class="org.joda.time.Period" name="org.joda.time.Period plusMonths(int)" map="O"/>
  <method class="org.joda.time.Period" name="org.joda.time.Period withFieldAdded(org.joda.time.DurationFieldType, int)" map="D"/>
  <method class="org.joda.time.Period" name="org.joda.time.Duration toStandardDuration()" map="O"/>
  <method class="org.joda.time.Period" name="org.joda.time.Period withMillis(int)" map="P"/>
  <method class="org.joda.time.Period" name="int getMinutes()" map="P"/>
  <method class="org.joda.time.Period" name="org.joda.time.Period withDays(int)" map="Q"/>
  <method class="org.joda.time.Period" name="org.joda.time.Period minutes(int)" map="R"/>
  <method class="org.joda.time.Period" name="org.joda.time.Period plusMillis(int)" map="S"/>
  <method class="org.joda.time.Period" name="org.joda.time.Period minusMinutes(int)" map="T"/>
  <method class="org.joda.time.Period" name="org.joda.time.Period minusDays(int)" map="U"/>
  <method class="org.joda.time.Period" name="org.joda.time.Period withPeriodType(org.joda.time.PeriodType)" map="B"/>
  <method class="org.joda.time.Period" name="org.joda.time.Period withMinutes(int)" map="V"/>
  <method class="org.joda.time.Period" name="org.joda.time.Period plus(org.joda.time.ReadablePeriod)" map="G"/>
  <method class="org.joda.time.Period" name="int getWeeks()" map="Q"/>
  <method class="org.joda.time.Period" name="org.joda.time.Period normalizedStandard(org.joda.time.PeriodType)" map="C"/>
  <method class="org.joda.time.Period" name="org.joda.time.Period minusMonths(int)" map="W"/>
  <method class="org.joda.time.Period" name="org.joda.time.Period months(int)" map="X"/>
  <method class="org.joda.time.Period" name="org.joda.time.Period plusYears(int)" map="Y"/>
  <method class="org.joda.time.Period" name="org.joda.time.Period years(int)" map="Z"/>
  <method class="org.joda.time.Period" name="org.joda.time.Period plusMinutes(int)" map="_"/>
  <method class="org.joda.time.Period" name="org.joda.time.Period days(int)" map="a"/>
  <method class="org.joda.time.Period" name="org.joda.time.Weeks toStandardWeeks()" map="R"/>
  <method class="org.joda.time.Period" name="org.joda.time.Minutes toStandardMinutes()" map="S"/>
  <method class="org.joda.time.Period" name="org.joda.time.Period minusMillis(int)" map="b"/>
  <method class="org.joda.time.Period" name="org.joda.time.Period millis(int)" map="c"/>
  <method class="org.joda.time.Period" name="void checkYearsAndMonths(java.lang.String)" map="A"/>
  <method class="org.joda.time.Period" name="org.joda.time.Period weeks(int)" map="d"/>
  <method class="org.joda.time.Period" name="org.joda.time.Period plusWeeks(int)" map="e"/>
  <method class="org.joda.time.Period" name="org.joda.time.Period hours(int)" map="f"/>
  <method class="org.joda.time.Period" name="int getYears()" map="T"/>
  <method class="org.joda.time.Period" name="int getHours()" map="U"/>
  <method class="org.joda.time.Period" name="org.joda.time.Period plusHours(int)" map="g"/>
  <class name="org.joda.time.ReadablePartial" map="B"/>
  <method class="org.joda.time.ReadablePartial" name="org.joda.time.DateTime toDateTime(org.joda.time.ReadableInstant)" map="A"/>
  <method class="org.joda.time.ReadablePartial" name="int hashCode()" map="hashCode"/>
  <method class="org.joda.time.ReadablePartial" name="org.joda.time.DateTimeField getField(int)" map="A"/>
  <method class="org.joda.time.ReadablePartial" name="boolean equals(java.lang.Object)" map="equals"/>
  <method class="org.joda.time.ReadablePartial" name="int get(org.joda.time.DateTimeFieldType)" map="A"/>
  <method class="org.joda.time.ReadablePartial" name="org.joda.time.DateTimeFieldType getFieldType(int)" map="B"/>
  <method class="org.joda.time.ReadablePartial" name="boolean isSupported(org.joda.time.DateTimeFieldType)" map="B"/>
  <method class="org.joda.time.ReadablePartial" name="int size()" map="A"/>
  <method class="org.joda.time.ReadablePartial" name="java.lang.String toString()" map="toString"/>
  <method class="org.joda.time.ReadablePartial" name="int getValue(int)" map="C"/>
  <method class="org.joda.time.ReadablePartial" name="org.joda.time.Chronology getChronology()" map="B"/>
  <class name="org.joda.time.DateTimeComparator" map="C"/>
  <field class="org.joda.time.DateTimeComparator" name="DATE_INSTANCE" map="A"/>
  <field class="org.joda.time.DateTimeComparator" name="iUpperLimit" map="B"/>
  <field class="org.joda.time.DateTimeComparator" name="iLowerLimit" map="C"/>
  <field class="org.joda.time.DateTimeComparator" name="TIME_INSTANCE" map="D"/>
  <field class="org.joda.time.DateTimeComparator" name="ALL_INSTANCE" map="E"/>
  <field class="org.joda.time.DateTimeComparator" name="serialVersionUID" map="F"/>
  <method class="org.joda.time.DateTimeComparator" name="org.joda.time.DateTimeFieldType getLowerLimit()" map="A"/>
  <method class="org.joda.time.DateTimeComparator" name="org.joda.time.DateTimeComparator getInstance()" map="B"/>
  <method class="org.joda.time.DateTimeComparator" name="int compare(java.lang.Object, java.lang.Object)" map="compare"/>
  <method class="org.joda.time.DateTimeComparator" name="org.joda.time.DateTimeComparator getTimeOnlyInstance()" map="C"/>
  <method class="org.joda.time.DateTimeComparator" name="org.joda.time.DateTimeFieldType getUpperLimit()" map="D"/>
  <method class="org.joda.time.DateTimeComparator" name="int hashCode()" map="hashCode"/>
  <method class="org.joda.time.DateTimeComparator" name="boolean equals(java.lang.Object)" map="equals"/>
  <method class="org.joda.time.DateTimeComparator" name="org.joda.time.DateTimeComparator getInstance(org.joda.time.DateTimeFieldType)" map="A"/>
  <method class="org.joda.time.DateTimeComparator" name="org.joda.time.DateTimeComparator getDateOnlyInstance()" map="E"/>
  <method class="org.joda.time.DateTimeComparator" name="java.lang.String toString()" map="toString"/>
  <method class="org.joda.time.DateTimeComparator" name="java.lang.Object readResolve()" map="F"/>
  <method class="org.joda.time.DateTimeComparator" name="org.joda.time.DateTimeComparator getInstance(org.joda.time.DateTimeFieldType, org.joda.time.DateTimeFieldType)" map="A"/>
  <class name="org.joda.time.ReadableInstant" map="D"/>
  <method class="org.joda.time.ReadableInstant" name="int hashCode()" map="hashCode"/>
  <method class="org.joda.time.ReadableInstant" name="boolean equals(java.lang.Object)" map="equals"/>
  <method class="org.joda.time.ReadableInstant" name="int get(org.joda.time.DateTimeFieldType)" map="A"/>
  <method class="org.joda.time.ReadableInstant" name="boolean isEqual(org.joda.time.ReadableInstant)" map="A"/>
  <method class="org.joda.time.ReadableInstant" name="org.joda.time.Instant toInstant()" map="A"/>
  <method class="org.joda.time.ReadableInstant" name="boolean isBefore(org.joda.time.ReadableInstant)" map="B"/>
  <method class="org.joda.time.ReadableInstant" name="boolean isAfter(org.joda.time.ReadableInstant)" map="C"/>
  <method class="org.joda.time.ReadableInstant" name="boolean isSupported(org.joda.time.DateTimeFieldType)" map="B"/>
  <method class="org.joda.time.ReadableInstant" name="long getMillis()" map="B"/>
  <method class="org.joda.time.ReadableInstant" name="org.joda.time.DateTimeZone getZone()" map="C"/>
  <method class="org.joda.time.ReadableInstant" name="java.lang.String toString()" map="toString"/>
  <method class="org.joda.time.ReadableInstant" name="int compareTo(java.lang.Object)" map="compareTo"/>
  <method class="org.joda.time.ReadableInstant" name="org.joda.time.Chronology getChronology()" map="D"/>
  <class name="org.joda.time.ReadWritablePeriod" map="E"/>
  <method class="org.joda.time.ReadWritablePeriod" name="void setHours(int)" map="h"/>
  <method class="org.joda.time.ReadWritablePeriod" name="void addMonths(int)" map="i"/>
  <method class="org.joda.time.ReadWritablePeriod" name="void addSeconds(int)" map="j"/>
  <method class="org.joda.time.ReadWritablePeriod" name="void addWeeks(int)" map="k"/>
  <method class="org.joda.time.ReadWritablePeriod" name="void setMillis(int)" map="l"/>
  <method class="org.joda.time.ReadWritablePeriod" name="void addHours(int)" map="m"/>
  <method class="org.joda.time.ReadWritablePeriod" name="void add(org.joda.time.DurationFieldType, int)" map="E"/>
  <method class="org.joda.time.ReadWritablePeriod" name="void add(org.joda.time.ReadableInterval)" map="A"/>
  <method class="org.joda.time.ReadWritablePeriod" name="void setPeriod(org.joda.time.ReadableInterval)" map="B"/>
  <method class="org.joda.time.ReadWritablePeriod" name="void setPeriod(int, int, int, int, int, int, int, int)" map="B"/>
  <method class="org.joda.time.ReadWritablePeriod" name="void setPeriod(org.joda.time.ReadablePeriod)" map="C"/>
  <method class="org.joda.time.ReadWritablePeriod" name="void setMonths(int)" map="n"/>
  <method class="org.joda.time.ReadWritablePeriod" name="void setYears(int)" map="o"/>
  <method class="org.joda.time.ReadWritablePeriod" name="void setSeconds(int)" map="p"/>
  <method class="org.joda.time.ReadWritablePeriod" name="void setValue(int, int)" map="A"/>
  <method class="org.joda.time.ReadWritablePeriod" name="void set(org.joda.time.DurationFieldType, int)" map="F"/>
  <method class="org.joda.time.ReadWritablePeriod" name="void setDays(int)" map="q"/>
  <method class="org.joda.time.ReadWritablePeriod" name="void add(org.joda.time.ReadablePeriod)" map="H"/>
  <method class="org.joda.time.ReadWritablePeriod" name="void setMinutes(int)" map="r"/>
  <method class="org.joda.time.ReadWritablePeriod" name="void addDays(int)" map="s"/>
  <method class="org.joda.time.ReadWritablePeriod" name="void addMinutes(int)" map="t"/>
  <method class="org.joda.time.ReadWritablePeriod" name="void addYears(int)" map="u"/>
  <method class="org.joda.time.ReadWritablePeriod" name="void add(int, int, int, int, int, int, int, int)" map="C"/>
  <method class="org.joda.time.ReadWritablePeriod" name="void clear()" map="V"/>
  <method class="org.joda.time.ReadWritablePeriod" name="void addMillis(int)" map="v"/>
  <method class="org.joda.time.ReadWritablePeriod" name="void setWeeks(int)" map="w"/>
  <class name="org.joda.time.ReadablePeriod" map="F"/>
  <method class="org.joda.time.ReadablePeriod" name="org.joda.time.MutablePeriod toMutablePeriod()" map="A"/>
  <method class="org.joda.time.ReadablePeriod" name="org.joda.time.Period toPeriod()" map="B"/>
  <method class="org.joda.time.ReadablePeriod" name="int get(org.joda.time.DurationFieldType)" map="A"/>
  <method class="org.joda.time.ReadablePeriod" name="int hashCode()" map="hashCode"/>
  <method class="org.joda.time.ReadablePeriod" name="boolean equals(java.lang.Object)" map="equals"/>
  <method class="org.joda.time.ReadablePeriod" name="org.joda.time.PeriodType getPeriodType()" map="C"/>
  <method class="org.joda.time.ReadablePeriod" name="boolean isSupported(org.joda.time.DurationFieldType)" map="B"/>
  <method class="org.joda.time.ReadablePeriod" name="org.joda.time.DurationFieldType getFieldType(int)" map="A"/>
  <method class="org.joda.time.ReadablePeriod" name="int size()" map="D"/>
  <method class="org.joda.time.ReadablePeriod" name="java.lang.String toString()" map="toString"/>
  <method class="org.joda.time.ReadablePeriod" name="int getValue(int)" map="B"/>
  <class name="org.joda.time.Seconds" map="G"/>
  <field class="org.joda.time.Seconds" name="TWO" map="I"/>
  <field class="org.joda.time.Seconds" name="ZERO" map="J"/>
  <field class="org.joda.time.Seconds" name="ONE" map="K"/>
  <field class="org.joda.time.Seconds" name="THREE" map="L"/>
  <field class="org.joda.time.Seconds" name="MAX_VALUE" map="M"/>
  <field class="org.joda.time.Seconds" name="PARSER" map="N"/>
  <field class="org.joda.time.Seconds" name="MIN_VALUE" map="O"/>
  <field class="org.joda.time.Seconds" name="serialVersionUID" map="P"/>
  <method class="org.joda.time.Seconds" name="org.joda.time.Seconds seconds(int)" map="y"/>
  <method class="org.joda.time.Seconds" name="org.joda.time.Seconds plus(org.joda.time.Seconds)" map="A"/>
  <method class="org.joda.time.Seconds" name="org.joda.time.Seconds negated()" map="g"/>
  <method class="org.joda.time.Seconds" name="org.joda.time.Seconds plus(int)" map="z"/>
  <method class="org.joda.time.Seconds" name="org.joda.time.Seconds parseSeconds(java.lang.String)" map="B"/>
  <method class="org.joda.time.Seconds" name="org.joda.time.Seconds secondsBetween(org.joda.time.ReadableInstant, org.joda.time.ReadableInstant)" map="B"/>
  <method class="org.joda.time.Seconds" name="java.lang.String toString()" map="toString"/>
  <method class="org.joda.time.Seconds" name="org.joda.time.Seconds multipliedBy(int)" map="&#x00a2;"/>
  <method class="org.joda.time.Seconds" name="org.joda.time.Seconds secondsBetween(org.joda.time.ReadablePartial, org.joda.time.ReadablePartial)" map="B"/>
  <method class="org.joda.time.Seconds" name="org.joda.time.DurationFieldType getFieldType()" map="e"/>
  <method class="org.joda.time.Seconds" name="org.joda.time.Seconds secondsIn(org.joda.time.ReadableInterval)" map="C"/>
  <method class="org.joda.time.Seconds" name="org.joda.time.PeriodType getPeriodType()" map="C"/>
  <method class="org.joda.time.Seconds" name="int getSeconds()" map="h"/>
  <method class="org.joda.time.Seconds" name="org.joda.time.Hours toStandardHours()" map="i"/>
  <method class="org.joda.time.Seconds" name="org.joda.time.Seconds minus(org.joda.time.Seconds)" map="B"/>
  <method class="org.joda.time.Seconds" name="java.lang.Object readResolve()" map="j"/>
  <method class="org.joda.time.Seconds" name="org.joda.time.Days toStandardDays()" map="k"/>
  <method class="org.joda.time.Seconds" name="boolean isLessThan(org.joda.time.Seconds)" map="C"/>
  <method class="org.joda.time.Seconds" name="org.joda.time.Seconds standardSecondsIn(org.joda.time.ReadablePeriod)" map="I"/>
  <method class="org.joda.time.Seconds" name="org.joda.time.Minutes toStandardMinutes()" map="l"/>
  <method class="org.joda.time.Seconds" name="org.joda.time.Seconds minus(int)" map="&#x00a3;"/>
  <method class="org.joda.time.Seconds" name="org.joda.time.Weeks toStandardWeeks()" map="m"/>
  <method class="org.joda.time.Seconds" name="org.joda.time.Seconds dividedBy(int)" map="&#x00a4;"/>
  <method class="org.joda.time.Seconds" name="boolean isGreaterThan(org.joda.time.Seconds)" map="D"/>
  <method class="org.joda.time.Seconds" name="org.joda.time.Duration toStandardDuration()" map="n"/>
  <class name="org.joda.time.DurationFieldType$StandardDurationFieldType" map="_A"/>
  <field class="org.joda.time.DurationFieldType$StandardDurationFieldType" name="iOrdinal" map="_"/>
  <field class="org.joda.time.DurationFieldType$StandardDurationFieldType" name="serialVersionUID" map="a"/>
  <method class="org.joda.time.DurationFieldType$StandardDurationFieldType" name="java.lang.Object readResolve()" map="N"/>
  <method class="org.joda.time.DurationFieldType$StandardDurationFieldType" name="org.joda.time.DurationField getField(org.joda.time.Chronology)" map="B"/>
  <class name="org.joda.time.DurationFieldType" map="H"/>
  <field class="org.joda.time.DurationFieldType" name="iName" map="A"/>
  <field class="org.joda.time.DurationFieldType" name="WEEKS_TYPE" map="B"/>
  <field class="org.joda.time.DurationFieldType" name="DAYS_TYPE" map="C"/>
  <field class="org.joda.time.DurationFieldType" name="CENTURIES" map="D"/>
  <field class="org.joda.time.DurationFieldType" name="ERAS_TYPE" map="E"/>
  <field class="org.joda.time.DurationFieldType" name="CENTURIES_TYPE" map="F"/>
  <field class="org.joda.time.DurationFieldType" name="MINUTES_TYPE" map="G"/>
  <field class="org.joda.time.DurationFieldType" name="HALFDAYS" map="H"/>
  <field class="org.joda.time.DurationFieldType" name="HALFDAYS_TYPE" map="I"/>
  <field class="org.joda.time.DurationFieldType" name="YEARS" map="J"/>
  <field class="org.joda.time.DurationFieldType" name="HOURS_TYPE" map="K"/>
  <field class="org.joda.time.DurationFieldType" name="MINUTES" map="L"/>
  <field class="org.joda.time.DurationFieldType" name="serialVersionUID" map="M"/>
  <field class="org.joda.time.DurationFieldType" name="HOURS" map="N"/>
  <field class="org.joda.time.DurationFieldType" name="MILLIS_TYPE" map="O"/>
  <field class="org.joda.time.DurationFieldType" name="SECONDS" map="P"/>
  <field class="org.joda.time.DurationFieldType" name="WEEKYEARS_TYPE" map="Q"/>
  <field class="org.joda.time.DurationFieldType" name="SECONDS_TYPE" map="R"/>
  <field class="org.joda.time.DurationFieldType" name="DAYS" map="S"/>
  <field class="org.joda.time.DurationFieldType" name="WEEKYEARS" map="T"/>
  <field class="org.joda.time.DurationFieldType" name="MILLIS" map="U"/>
  <field class="org.joda.time.DurationFieldType" name="MONTHS" map="V"/>
  <field class="org.joda.time.DurationFieldType" name="WEEKS" map="W"/>
  <field class="org.joda.time.DurationFieldType" name="MONTHS_TYPE" map="X"/>
  <field class="org.joda.time.DurationFieldType" name="YEARS_TYPE" map="Y"/>
  <field class="org.joda.time.DurationFieldType" name="ERAS" map="Z"/>
  <method class="org.joda.time.DurationFieldType" name="boolean isSupported(org.joda.time.Chronology)" map="A"/>
  <method class="org.joda.time.DurationFieldType" name="org.joda.time.DurationFieldType months()" map="A"/>
  <method class="org.joda.time.DurationFieldType" name="org.joda.time.DurationFieldType eras()" map="B"/>
  <method class="org.joda.time.DurationFieldType" name="org.joda.time.DurationFieldType days()" map="C"/>
  <method class="org.joda.time.DurationFieldType" name="org.joda.time.DurationFieldType weeks()" map="D"/>
  <method class="org.joda.time.DurationFieldType" name="org.joda.time.DurationFieldType years()" map="E"/>
  <method class="org.joda.time.DurationFieldType" name="org.joda.time.DurationFieldType weekyears()" map="F"/>
  <method class="org.joda.time.DurationFieldType" name="org.joda.time.DurationFieldType hours()" map="G"/>
  <method class="org.joda.time.DurationFieldType" name="org.joda.time.DurationField getField(org.joda.time.Chronology)" map="B"/>
  <method class="org.joda.time.DurationFieldType" name="org.joda.time.DurationFieldType minutes()" map="H"/>
  <method class="org.joda.time.DurationFieldType" name="org.joda.time.DurationFieldType seconds()" map="I"/>
  <method class="org.joda.time.DurationFieldType" name="org.joda.time.DurationFieldType millis()" map="J"/>
  <method class="org.joda.time.DurationFieldType" name="java.lang.String getName()" map="K"/>
  <method class="org.joda.time.DurationFieldType" name="java.lang.String toString()" map="toString"/>
  <method class="org.joda.time.DurationFieldType" name="org.joda.time.DurationFieldType halfdays()" map="L"/>
  <method class="org.joda.time.DurationFieldType" name="org.joda.time.DurationFieldType centuries()" map="M"/>
  <class name="org.joda.time.JodaTimePermission" map="I"/>
  <field class="org.joda.time.JodaTimePermission" name="serialVersionUID" map="A"/>
  <class name="org.joda.time.MutablePeriod" map="J"/>
  <field class="org.joda.time.MutablePeriod" name="serialVersionUID" map="F"/>
  <method class="org.joda.time.MutablePeriod" name="void setValue(int, int)" map="A"/>
  <method class="org.joda.time.MutablePeriod" name="int getDays()" map="W"/>
  <method class="org.joda.time.MutablePeriod" name="void add(long)" map="A"/>
  <method class="org.joda.time.MutablePeriod" name="void setPeriod(org.joda.time.ReadableInterval)" map="B"/>
  <method class="org.joda.time.MutablePeriod" name="void setPeriod(long, org.joda.time.Chronology)" map="A"/>
  <method class="org.joda.time.MutablePeriod" name="void add(org.joda.time.ReadableInterval)" map="A"/>
  <method class="org.joda.time.MutablePeriod" name="void add(org.joda.time.DurationFieldType, int)" map="E"/>
  <method class="org.joda.time.MutablePeriod" name="void setMinutes(int)" map="r"/>
  <method class="org.joda.time.MutablePeriod" name="void mergePeriod(org.joda.time.ReadablePeriod)" map="A"/>
  <method class="org.joda.time.MutablePeriod" name="void setPeriod(org.joda.time.ReadablePeriod)" map="C"/>
  <method class="org.joda.time.MutablePeriod" name="void setYears(int)" map="o"/>
  <method class="org.joda.time.MutablePeriod" name="void add(int, int, int, int, int, int, int, int)" map="C"/>
  <method class="org.joda.time.MutablePeriod" name="void set(org.joda.time.DurationFieldType, int)" map="F"/>
  <method class="org.joda.time.MutablePeriod" name="int getMonths()" map="X"/>
  <method class="org.joda.time.MutablePeriod" name="void addWeeks(int)" map="k"/>
  <method class="org.joda.time.MutablePeriod" name="void setPeriod(long, long)" map="A"/>
  <method class="org.joda.time.MutablePeriod" name="void setSeconds(int)" map="p"/>
  <method class="org.joda.time.MutablePeriod" name="void addMillis(int)" map="v"/>
  <method class="org.joda.time.MutablePeriod" name="void addHours(int)" map="m"/>
  <method class="org.joda.time.MutablePeriod" name="int getMillis()" map="Y"/>
  <method class="org.joda.time.MutablePeriod" name="int getSeconds()" map="Z"/>
  <method class="org.joda.time.MutablePeriod" name="void clear()" map="V"/>
  <method class="org.joda.time.MutablePeriod" name="void setPeriod(org.joda.time.ReadableDuration)" map="A"/>
  <method class="org.joda.time.MutablePeriod" name="void setMillis(int)" map="l"/>
  <method class="org.joda.time.MutablePeriod" name="int getMinutes()" map="_"/>
  <method class="org.joda.time.MutablePeriod" name="void add(org.joda.time.ReadableDuration)" map="B"/>
  <method class="org.joda.time.MutablePeriod" name="void addMonths(int)" map="i"/>
  <method class="org.joda.time.MutablePeriod" name="void add(org.joda.time.ReadablePeriod)" map="H"/>
  <method class="org.joda.time.MutablePeriod" name="void setPeriod(long, long, org.joda.time.Chronology)" map="A"/>
  <method class="org.joda.time.MutablePeriod" name="int getWeeks()" map="a"/>
  <method class="org.joda.time.MutablePeriod" name="void add(long, org.joda.time.Chronology)" map="B"/>
  <method class="org.joda.time.MutablePeriod" name="void setMonths(int)" map="n"/>
  <method class="org.joda.time.MutablePeriod" name="void setPeriod(org.joda.time.ReadableDuration, org.joda.time.Chronology)" map="A"/>
  <method class="org.joda.time.MutablePeriod" name="void setWeeks(int)" map="w"/>
  <method class="org.joda.time.MutablePeriod" name="void addYears(int)" map="u"/>
  <method class="org.joda.time.MutablePeriod" name="void addMinutes(int)" map="t"/>
  <method class="org.joda.time.MutablePeriod" name="void setPeriod(org.joda.time.ReadableInstant, org.joda.time.ReadableInstant)" map="A"/>
  <method class="org.joda.time.MutablePeriod" name="void setDays(int)" map="q"/>
  <method class="org.joda.time.MutablePeriod" name="org.joda.time.MutablePeriod copy()" map="b"/>
  <method class="org.joda.time.MutablePeriod" name="void setHours(int)" map="h"/>
  <method class="org.joda.time.MutablePeriod" name="int getYears()" map="c"/>
  <method class="org.joda.time.MutablePeriod" name="int getHours()" map="d"/>
  <method class="org.joda.time.MutablePeriod" name="void addSeconds(int)" map="j"/>
  <method class="org.joda.time.MutablePeriod" name="void setPeriod(int, int, int, int, int, int, int, int)" map="B"/>
  <method class="org.joda.time.MutablePeriod" name="void addDays(int)" map="s"/>
  <method class="org.joda.time.MutablePeriod" name="java.lang.Object clone()" map="clone"/>
  <method class="org.joda.time.MutablePeriod" name="void setPeriod(long)" map="B"/>
  <class name="org.joda.time.DurationField" map="K"/>
  <method class="org.joda.time.DurationField" name="long getValueAsLong(long, long)" map="A"/>
  <method class="org.joda.time.DurationField" name="long getMillis(int, long)" map="A"/>
  <method class="org.joda.time.DurationField" name="long getValueAsLong(long)" map="A"/>
  <method class="org.joda.time.DurationField" name="long add(long, int)" map="A"/>
  <method class="org.joda.time.DurationField" name="boolean isPrecise()" map="A"/>
  <method class="org.joda.time.DurationField" name="long getDifferenceAsLong(long, long)" map="B"/>
  <method class="org.joda.time.DurationField" name="boolean isSupported()" map="B"/>
  <method class="org.joda.time.DurationField" name="long getMillis(long, long)" map="C"/>
  <method class="org.joda.time.DurationField" name="java.lang.String toString()" map="toString"/>
  <method class="org.joda.time.DurationField" name="long getMillis(int)" map="A"/>
  <method class="org.joda.time.DurationField" name="long subtract(long, int)" map="B"/>
  <method class="org.joda.time.DurationField" name="java.lang.String getName()" map="C"/>
  <method class="org.joda.time.DurationField" name="int getDifference(long, long)" map="D"/>
  <method class="org.joda.time.DurationField" name="long add(long, long)" map="E"/>
  <method class="org.joda.time.DurationField" name="org.joda.time.DurationFieldType getType()" map="D"/>
  <method class="org.joda.time.DurationField" name="long getUnitMillis()" map="E"/>
  <method class="org.joda.time.DurationField" name="int compareTo(java.lang.Object)" map="compareTo"/>
  <method class="org.joda.time.DurationField" name="long getMillis(long)" map="B"/>
  <method class="org.joda.time.DurationField" name="int getValue(long)" map="C"/>
  <method class="org.joda.time.DurationField" name="int getValue(long, long)" map="F"/>
  <method class="org.joda.time.DurationField" name="long subtract(long, long)" map="G"/>
  <class name="org.joda.time.ReadableDateTime" map="L"/>
  <method class="org.joda.time.ReadableDateTime" name="java.lang.String toString(java.lang.String, java.util.Locale)" map="A"/>
  <method class="org.joda.time.ReadableDateTime" name="int getWeekyear()" map="E"/>
  <method class="org.joda.time.ReadableDateTime" name="int getMinuteOfDay()" map="F"/>
  <method class="org.joda.time.ReadableDateTime" name="org.joda.time.DateTime toDateTime()" map="G"/>
  <method class="org.joda.time.ReadableDateTime" name="int getYearOfEra()" map="H"/>
  <method class="org.joda.time.ReadableDateTime" name="int getYear()" map="I"/>
  <method class="org.joda.time.ReadableDateTime" name="org.joda.time.MutableDateTime toMutableDateTime()" map="J"/>
  <method class="org.joda.time.ReadableDateTime" name="int getMinuteOfHour()" map="K"/>
  <method class="org.joda.time.ReadableDateTime" name="int getWeekOfWeekyear()" map="L"/>
  <method class="org.joda.time.ReadableDateTime" name="int getDayOfWeek()" map="M"/>
  <method class="org.joda.time.ReadableDateTime" name="int getMonthOfYear()" map="N"/>
  <method class="org.joda.time.ReadableDateTime" name="int getSecondOfDay()" map="O"/>
  <method class="org.joda.time.ReadableDateTime" name="int getEra()" map="P"/>
  <method class="org.joda.time.ReadableDateTime" name="int getDayOfMonth()" map="Q"/>
  <method class="org.joda.time.ReadableDateTime" name="int getHourOfDay()" map="R"/>
  <method class="org.joda.time.ReadableDateTime" name="int getSecondOfMinute()" map="S"/>
  <method class="org.joda.time.ReadableDateTime" name="int getDayOfYear()" map="T"/>
  <method class="org.joda.time.ReadableDateTime" name="int getMillisOfSecond()" map="U"/>
  <method class="org.joda.time.ReadableDateTime" name="int getMillisOfDay()" map="V"/>
  <method class="org.joda.time.ReadableDateTime" name="int getCenturyOfEra()" map="W"/>
  <method class="org.joda.time.ReadableDateTime" name="int getYearOfCentury()" map="X"/>
  <method class="org.joda.time.ReadableDateTime" name="java.lang.String toString(java.lang.String)" map="A"/>
  <class name="org.joda.time.Chronology" map="M"/>
  <method class="org.joda.time.Chronology" name="org.joda.time.Chronology getISO(org.joda.time.DateTimeZone)" map="A"/>
  <method class="org.joda.time.Chronology" name="org.joda.time.DateTimeField dayOfYear()" map="A"/>
  <method class="org.joda.time.Chronology" name="long getDateTimeMillis(int, int, int, int, int, int, int)" map="A"/>
  <method class="org.joda.time.Chronology" name="org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)" map="B"/>
  <method class="org.joda.time.Chronology" name="org.joda.time.Chronology withUTC()" map="B"/>
  <method class="org.joda.time.Chronology" name="org.joda.time.DateTimeField secondOfMinute()" map="C"/>
  <method class="org.joda.time.Chronology" name="org.joda.time.DateTimeZone getZone()" map="D"/>
  <method class="org.joda.time.Chronology" name="org.joda.time.DateTimeField hourOfHalfday()" map="E"/>
  <method class="org.joda.time.Chronology" name="org.joda.time.Chronology getBuddhist(org.joda.time.DateTimeZone)" map="C"/>
  <method class="org.joda.time.Chronology" name="org.joda.time.Chronology getJulian()" map="F"/>
  <method class="org.joda.time.Chronology" name="org.joda.time.Chronology getGregorian(org.joda.time.DateTimeZone)" map="D"/>
  <method class="org.joda.time.Chronology" name="org.joda.time.DateTimeField monthOfYear()" map="G"/>
  <method class="org.joda.time.Chronology" name="org.joda.time.Chronology getJulian(org.joda.time.DateTimeZone)" map="E"/>
  <method class="org.joda.time.Chronology" name="org.joda.time.DurationField minutes()" map="H"/>
  <method class="org.joda.time.Chronology" name="org.joda.time.DateTimeField minuteOfHour()" map="I"/>
  <method class="org.joda.time.Chronology" name="org.joda.time.DateTimeField millisOfDay()" map="J"/>
  <method class="org.joda.time.Chronology" name="org.joda.time.Chronology getISOUTC()" map="K"/>
  <method class="org.joda.time.Chronology" name="org.joda.time.DateTimeField weekyearOfCentury()" map="L"/>
  <method class="org.joda.time.Chronology" name="org.joda.time.DateTimeField yearOfCentury()" map="M"/>
  <method class="org.joda.time.Chronology" name="org.joda.time.DurationField halfdays()" map="N"/>
  <method class="org.joda.time.Chronology" name="long getDateTimeMillis(int, int, int, int)" map="A"/>
  <method class="org.joda.time.Chronology" name="org.joda.time.DurationField eras()" map="O"/>
  <method class="org.joda.time.Chronology" name="org.joda.time.Chronology getBuddhistUTC()" map="P"/>
  <method class="org.joda.time.Chronology" name="long set(org.joda.time.ReadablePartial, long)" map="A"/>
  <method class="org.joda.time.Chronology" name="org.joda.time.DurationField hours()" map="Q"/>
  <method class="org.joda.time.Chronology" name="org.joda.time.Chronology getBuddhist()" map="R"/>
  <method class="org.joda.time.Chronology" name="long add(org.joda.time.ReadablePeriod, long, int)" map="A"/>
  <method class="org.joda.time.Chronology" name="org.joda.time.DateTimeField clockhourOfDay()" map="S"/>
  <method class="org.joda.time.Chronology" name="java.lang.String toString()" map="toString"/>
  <method class="org.joda.time.Chronology" name="org.joda.time.Chronology getCopticUTC()" map="T"/>
  <method class="org.joda.time.Chronology" name="org.joda.time.DurationField centuries()" map="U"/>
  <method class="org.joda.time.Chronology" name="org.joda.time.DateTimeField hourOfDay()" map="V"/>
  <method class="org.joda.time.Chronology" name="org.joda.time.DateTimeField yearOfEra()" map="W"/>
  <method class="org.joda.time.Chronology" name="long add(long, long, int)" map="A"/>
  <method class="org.joda.time.Chronology" name="org.joda.time.DateTimeField centuryOfEra()" map="X"/>
  <method class="org.joda.time.Chronology" name="org.joda.time.DateTimeField dayOfMonth()" map="Y"/>
  <method class="org.joda.time.Chronology" name="org.joda.time.Chronology getGJ()" map="Z"/>
  <method class="org.joda.time.Chronology" name="org.joda.time.DateTimeField weekOfWeekyear()" map="_"/>
  <method class="org.joda.time.Chronology" name="void validate(org.joda.time.ReadablePartial, int[])" map="A"/>
  <method class="org.joda.time.Chronology" name="org.joda.time.DurationField months()" map="a"/>
  <method class="org.joda.time.Chronology" name="org.joda.time.DurationField years()" map="b"/>
  <method class="org.joda.time.Chronology" name="org.joda.time.DateTimeField clockhourOfHalfday()" map="c"/>
  <method class="org.joda.time.Chronology" name="long getDateTimeMillis(long, int, int, int, int)" map="A"/>
  <method class="org.joda.time.Chronology" name="org.joda.time.DurationField weeks()" map="d"/>
  <method class="org.joda.time.Chronology" name="org.joda.time.DateTimeField dayOfWeek()" map="e"/>
  <method class="org.joda.time.Chronology" name="org.joda.time.DurationField days()" map="f"/>
  <method class="org.joda.time.Chronology" name="org.joda.time.DurationField seconds()" map="g"/>
  <method class="org.joda.time.Chronology" name="org.joda.time.Chronology getGJ(org.joda.time.DateTimeZone)" map="F"/>
  <method class="org.joda.time.Chronology" name="int[] get(org.joda.time.ReadablePartial, long)" map="B"/>
  <method class="org.joda.time.Chronology" name="org.joda.time.DateTimeField era()" map="h"/>
  <method class="org.joda.time.Chronology" name="org.joda.time.DateTimeField millisOfSecond()" map="i"/>
  <method class="org.joda.time.Chronology" name="org.joda.time.Chronology getGJUTC()" map="j"/>
  <method class="org.joda.time.Chronology" name="org.joda.time.Chronology getGregorianUTC()" map="k"/>
  <method class="org.joda.time.Chronology" name="org.joda.time.DateTimeField year()" map="l"/>
  <method class="org.joda.time.Chronology" name="org.joda.time.DateTimeField secondOfDay()" map="m"/>
  <method class="org.joda.time.Chronology" name="org.joda.time.Chronology getGregorian()" map="n"/>
  <method class="org.joda.time.Chronology" name="org.joda.time.Chronology getCoptic()" map="o"/>
  <method class="org.joda.time.Chronology" name="org.joda.time.DateTimeField weekyear()" map="p"/>
  <method class="org.joda.time.Chronology" name="int[] get(org.joda.time.ReadablePeriod, long, long)" map="A"/>
  <method class="org.joda.time.Chronology" name="org.joda.time.DurationField weekyears()" map="q"/>
  <method class="org.joda.time.Chronology" name="org.joda.time.Chronology getISO()" map="r"/>
  <method class="org.joda.time.Chronology" name="int[] get(org.joda.time.ReadablePeriod, long)" map="A"/>
  <method class="org.joda.time.Chronology" name="org.joda.time.DurationField millis()" map="s"/>
  <method class="org.joda.time.Chronology" name="org.joda.time.Chronology getJulianUTC()" map="t"/>
  <method class="org.joda.time.Chronology" name="org.joda.time.DateTimeField minuteOfDay()" map="u"/>
  <method class="org.joda.time.Chronology" name="org.joda.time.DateTimeField halfdayOfDay()" map="v"/>
  <method class="org.joda.time.Chronology" name="org.joda.time.Chronology getCoptic(org.joda.time.DateTimeZone)" map="G"/>
  <class name="org.joda.time.Years" map="N"/>
  <field class="org.joda.time.Years" name="TWO" map="Q"/>
  <field class="org.joda.time.Years" name="ZERO" map="R"/>
  <field class="org.joda.time.Years" name="ONE" map="S"/>
  <field class="org.joda.time.Years" name="THREE" map="T"/>
  <field class="org.joda.time.Years" name="MAX_VALUE" map="U"/>
  <field class="org.joda.time.Years" name="PARSER" map="V"/>
  <field class="org.joda.time.Years" name="MIN_VALUE" map="W"/>
  <field class="org.joda.time.Years" name="serialVersionUID" map="X"/>
  <method class="org.joda.time.Years" name="org.joda.time.Years yearsBetween(org.joda.time.ReadableInstant, org.joda.time.ReadableInstant)" map="C"/>
  <method class="org.joda.time.Years" name="org.joda.time.Years years(int)" map="&#x00a5;"/>
  <method class="org.joda.time.Years" name="org.joda.time.Years minus(int)" map="&#x00aa;"/>
  <method class="org.joda.time.Years" name="int getYears()" map="o"/>
  <method class="org.joda.time.Years" name="org.joda.time.Years yearsIn(org.joda.time.ReadableInterval)" map="D"/>
  <method class="org.joda.time.Years" name="org.joda.time.Years dividedBy(int)" map="&#x00b5;"/>
  <method class="org.joda.time.Years" name="java.lang.String toString()" map="toString"/>
  <method class="org.joda.time.Years" name="org.joda.time.DurationFieldType getFieldType()" map="e"/>
  <method class="org.joda.time.Years" name="org.joda.time.Years multipliedBy(int)" map="&#x00ba;"/>
  <method class="org.joda.time.Years" name="org.joda.time.Years yearsBetween(org.joda.time.ReadablePartial, org.joda.time.ReadablePartial)" map="C"/>
  <method class="org.joda.time.Years" name="org.joda.time.Years plus(org.joda.time.Years)" map="A"/>
  <method class="org.joda.time.Years" name="org.joda.time.PeriodType getPeriodType()" map="C"/>
  <method class="org.joda.time.Years" name="java.lang.Object readResolve()" map="p"/>
  <method class="org.joda.time.Years" name="org.joda.time.Years parseYears(java.lang.String)" map="C"/>
  <method class="org.joda.time.Years" name="boolean isGreaterThan(org.joda.time.Years)" map="B"/>
  <method class="org.joda.time.Years" name="org.joda.time.Years plus(int)" map="&#x00c0;"/>
  <method class="org.joda.time.Years" name="org.joda.time.Years negated()" map="q"/>
  <method class="org.joda.time.Years" name="boolean isLessThan(org.joda.time.Years)" map="C"/>
  <method class="org.joda.time.Years" name="org.joda.time.Years minus(org.joda.time.Years)" map="D"/>
  <class name="org.joda.time.DateTime$Property" map="_A"/>
  <field class="org.joda.time.DateTime$Property" name="iInstant" map="B"/>
  <field class="org.joda.time.DateTime$Property" name="iField" map="C"/>
  <field class="org.joda.time.DateTime$Property" name="serialVersionUID" map="D"/>
  <method class="org.joda.time.DateTime$Property" name="org.joda.time.DateTime addToCopy(long)" map="A"/>
  <method class="org.joda.time.DateTime$Property" name="org.joda.time.DateTime roundHalfFloorCopy()" map="U"/>
  <method class="org.joda.time.DateTime$Property" name="org.joda.time.DateTime roundHalfCeilingCopy()" map="V"/>
  <method class="org.joda.time.DateTime$Property" name="org.joda.time.DateTime withMinimumValue()" map="W"/>
  <method class="org.joda.time.DateTime$Property" name="org.joda.time.DateTime setCopy(java.lang.String)" map="A"/>
  <method class="org.joda.time.DateTime$Property" name="org.joda.time.DateTime setCopy(java.lang.String, java.util.Locale)" map="A"/>
  <method class="org.joda.time.DateTime$Property" name="org.joda.time.DateTime addWrapFieldToCopy(int)" map="A"/>
  <method class="org.joda.time.DateTime$Property" name="org.joda.time.DateTime setCopy(int)" map="B"/>
  <method class="org.joda.time.DateTime$Property" name="org.joda.time.Chronology getChronology()" map="G"/>
  <method class="org.joda.time.DateTime$Property" name="org.joda.time.DateTimeField getField()" map="H"/>
  <method class="org.joda.time.DateTime$Property" name="org.joda.time.DateTime roundFloorCopy()" map="X"/>
  <method class="org.joda.time.DateTime$Property" name="void readObject(java.io.ObjectInputStream)" map="A"/>
  <method class="org.joda.time.DateTime$Property" name="org.joda.time.DateTime roundCeilingCopy()" map="Y"/>
  <method class="org.joda.time.DateTime$Property" name="org.joda.time.DateTime roundHalfEvenCopy()" map="Z"/>
  <method class="org.joda.time.DateTime$Property" name="org.joda.time.DateTime getDateTime()" map="_"/>
  <method class="org.joda.time.DateTime$Property" name="long getMillis()" map="Q"/>
  <method class="org.joda.time.DateTime$Property" name="org.joda.time.DateTime withMaximumValue()" map="a"/>
  <method class="org.joda.time.DateTime$Property" name="void writeObject(java.io.ObjectOutputStream)" map="A"/>
  <method class="org.joda.time.DateTime$Property" name="org.joda.time.DateTime addToCopy(int)" map="C"/>
  <class name="org.joda.time.DateTime" map="O"/>
  <field class="org.joda.time.DateTime" name="serialVersionUID" map="F"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime plus(org.joda.time.ReadablePeriod)" map="A"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime minus(long)" map="H"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime withMonthOfYear(int)" map="A"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime$Property yearOfEra()" map="e"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.YearMonthDay toYearMonthDay()" map="f"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime minusMinutes(int)" map="B"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime plusYears(int)" map="C"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime withWeekyear(int)" map="D"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime$Property millisOfDay()" map="g"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime$Property secondOfMinute()" map="h"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime$Property dayOfYear()" map="i"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime minusMonths(int)" map="E"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime withDate(int, int, int)" map="A"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime$Property minuteOfHour()" map="j"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime minusWeeks(int)" map="F"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime$Property weekOfWeekyear()" map="k"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime withWeekOfWeekyear(int)" map="G"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime plus(org.joda.time.ReadableDuration)" map="C"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime$Property weekyear()" map="l"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime minusMillis(int)" map="H"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime plusSeconds(int)" map="I"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime withDayOfWeek(int)" map="J"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime withHourOfDay(int)" map="K"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime$Property monthOfYear()" map="m"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime plusWeeks(int)" map="L"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.TimeOfDay toTimeOfDay()" map="n"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime$Property minuteOfDay()" map="o"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime minusHours(int)" map="M"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime withMillisOfDay(int)" map="N"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime withDurationAdded(org.joda.time.ReadableDuration, int)" map="B"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime withYear(int)" map="O"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime$Property dayOfMonth()" map="p"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime$Property yearOfCentury()" map="q"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime minusDays(int)" map="P"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime plusHours(int)" map="Q"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime minus(org.joda.time.ReadablePeriod)" map="B"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime withEra(int)" map="R"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime withZone(org.joda.time.DateTimeZone)" map="C"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateMidnight toDateMidnight()" map="r"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime toDateTime(org.joda.time.DateTimeZone)" map="A"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime plus(long)" map="I"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime withTime(int, int, int, int)" map="A"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime plusMinutes(int)" map="S"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime withMillis(long)" map="J"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime withPeriodAdded(org.joda.time.ReadablePeriod, int)" map="A"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime withDayOfMonth(int)" map="T"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime plusDays(int)" map="U"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime$Property millisOfSecond()" map="s"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime minusSeconds(int)" map="V"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.LocalDate toLocalDate()" map="t"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime toDateTime(org.joda.time.Chronology)" map="B"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime$Property property(org.joda.time.DateTimeFieldType)" map="C"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.LocalDateTime toLocalDateTime()" map="u"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime$Property hourOfDay()" map="v"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime withCenturyOfEra(int)" map="W"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime withDurationAdded(long, int)" map="B"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime toDateTimeISO()" map="b"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime withChronology(org.joda.time.Chronology)" map="E"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime withYearOfCentury(int)" map="X"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime withSecondOfMinute(int)" map="Y"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime withFieldAdded(org.joda.time.DurationFieldType, int)" map="A"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime$Property era()" map="w"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime plusMonths(int)" map="Z"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime withDayOfYear(int)" map="_"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime withField(org.joda.time.DateTimeFieldType, int)" map="A"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime$Property secondOfDay()" map="x"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.LocalTime toLocalTime()" map="y"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime withMinuteOfHour(int)" map="a"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime withMillisOfSecond(int)" map="b"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime minusYears(int)" map="c"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime$Property centuryOfEra()" map="z"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime$Property year()" map="&#x00a2;"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime withFields(org.joda.time.ReadablePartial)" map="A"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime withZoneRetainFields(org.joda.time.DateTimeZone)" map="D"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime withYearOfEra(int)" map="d"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime toDateTime()" map="G"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime$Property dayOfWeek()" map="&#x00a3;"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime minus(org.joda.time.ReadableDuration)" map="D"/>
  <method class="org.joda.time.DateTime" name="org.joda.time.DateTime plusMillis(int)" map="e"/>
  <class name="org.joda.time.ReadableInterval" map="P"/>
  <method class="org.joda.time.ReadableInterval" name="boolean isBefore(org.joda.time.ReadableInterval)" map="A"/>
  <method class="org.joda.time.ReadableInterval" name="boolean contains(org.joda.time.ReadableInterval)" map="B"/>
  <method class="org.joda.time.ReadableInterval" name="org.joda.time.Period toPeriod(org.joda.time.PeriodType)" map="A"/>
  <method class="org.joda.time.ReadableInterval" name="boolean equals(java.lang.Object)" map="equals"/>
  <method class="org.joda.time.ReadableInterval" name="java.lang.String toString()" map="toString"/>
  <method class="org.joda.time.ReadableInterval" name="org.joda.time.Period toPeriod()" map="A"/>
  <method class="org.joda.time.ReadableInterval" name="org.joda.time.DateTime getStart()" map="B"/>
  <method class="org.joda.time.ReadableInterval" name="org.joda.time.Chronology getChronology()" map="C"/>
  <method class="org.joda.time.ReadableInterval" name="boolean overlaps(org.joda.time.ReadableInterval)" map="C"/>
  <method class="org.joda.time.ReadableInterval" name="org.joda.time.Duration toDuration()" map="D"/>
  <method class="org.joda.time.ReadableInterval" name="boolean contains(org.joda.time.ReadableInstant)" map="A"/>
  <method class="org.joda.time.ReadableInterval" name="long getStartMillis()" map="E"/>
  <method class="org.joda.time.ReadableInterval" name="boolean isAfter(org.joda.time.ReadableInterval)" map="D"/>
  <method class="org.joda.time.ReadableInterval" name="int hashCode()" map="hashCode"/>
  <method class="org.joda.time.ReadableInterval" name="long toDurationMillis()" map="F"/>
  <method class="org.joda.time.ReadableInterval" name="org.joda.time.DateTime getEnd()" map="G"/>
  <method class="org.joda.time.ReadableInterval" name="org.joda.time.MutableInterval toMutableInterval()" map="H"/>
  <method class="org.joda.time.ReadableInterval" name="boolean isAfter(org.joda.time.ReadableInstant)" map="B"/>
  <method class="org.joda.time.ReadableInterval" name="boolean isBefore(org.joda.time.ReadableInstant)" map="C"/>
  <method class="org.joda.time.ReadableInterval" name="long getEndMillis()" map="I"/>
  <method class="org.joda.time.ReadableInterval" name="org.joda.time.Interval toInterval()" map="J"/>
  <class name="org.joda.time.LocalTime$Property" map="_A"/>
  <field class="org.joda.time.LocalTime$Property" name="iInstant" map="E"/>
  <field class="org.joda.time.LocalTime$Property" name="iField" map="F"/>
  <field class="org.joda.time.LocalTime$Property" name="serialVersionUID" map="G"/>
  <method class="org.joda.time.LocalTime$Property" name="org.joda.time.LocalTime getLocalTime()" map="b"/>
  <method class="org.joda.time.LocalTime$Property" name="org.joda.time.LocalTime withMaximumValue()" map="c"/>
  <method class="org.joda.time.LocalTime$Property" name="org.joda.time.LocalTime addCopy(long)" map="B"/>
  <method class="org.joda.time.LocalTime$Property" name="org.joda.time.LocalTime roundHalfFloorCopy()" map="d"/>
  <method class="org.joda.time.LocalTime$Property" name="org.joda.time.LocalTime withMinimumValue()" map="e"/>
  <method class="org.joda.time.LocalTime$Property" name="org.joda.time.LocalTime roundFloorCopy()" map="f"/>
  <method class="org.joda.time.LocalTime$Property" name="org.joda.time.LocalTime roundHalfCeilingCopy()" map="g"/>
  <method class="org.joda.time.LocalTime$Property" name="org.joda.time.Chronology getChronology()" map="G"/>
  <method class="org.joda.time.LocalTime$Property" name="org.joda.time.DateTimeField getField()" map="H"/>
  <method class="org.joda.time.LocalTime$Property" name="org.joda.time.LocalTime addWrapFieldToCopy(int)" map="D"/>
  <method class="org.joda.time.LocalTime$Property" name="org.joda.time.LocalTime roundHalfEvenCopy()" map="h"/>
  <method class="org.joda.time.LocalTime$Property" name="org.joda.time.LocalTime roundCeilingCopy()" map="i"/>
  <method class="org.joda.time.LocalTime$Property" name="void readObject(java.io.ObjectInputStream)" map="B"/>
  <method class="org.joda.time.LocalTime$Property" name="org.joda.time.LocalTime setCopy(java.lang.String)" map="B"/>
  <method class="org.joda.time.LocalTime$Property" name="org.joda.time.LocalTime setCopy(java.lang.String, java.util.Locale)" map="B"/>
  <method class="org.joda.time.LocalTime$Property" name="long getMillis()" map="Q"/>
  <method class="org.joda.time.LocalTime$Property" name="org.joda.time.LocalTime addCopy(int)" map="E"/>
  <method class="org.joda.time.LocalTime$Property" name="org.joda.time.LocalTime addNoWrapToCopy(int)" map="F"/>
  <method class="org.joda.time.LocalTime$Property" name="org.joda.time.LocalTime setCopy(int)" map="G"/>
  <method class="org.joda.time.LocalTime$Property" name="void writeObject(java.io.ObjectOutputStream)" map="B"/>
  <class name="org.joda.time.LocalTime" map="Q"/>
  <field class="org.joda.time.LocalTime" name="SECOND_OF_MINUTE" map="B"/>
  <field class="org.joda.time.LocalTime" name="serialVersionUID" map="C"/>
  <field class="org.joda.time.LocalTime" name="MINUTE_OF_HOUR" map="D"/>
  <field class="org.joda.time.LocalTime" name="TIME_DURATION_TYPES" map="E"/>
  <field class="org.joda.time.LocalTime" name="MIDNIGHT" map="F"/>
  <field class="org.joda.time.LocalTime" name="HOUR_OF_DAY" map="G"/>
  <field class="org.joda.time.LocalTime" name="iChronology" map="H"/>
  <field class="org.joda.time.LocalTime" name="MILLIS_OF_SECOND" map="I"/>
  <field class="org.joda.time.LocalTime" name="iLocalMillis" map="J"/>
  <method class="org.joda.time.LocalTime" name="org.joda.time.LocalTime minusSeconds(int)" map="D"/>
  <method class="org.joda.time.LocalTime" name="int compareTo(java.lang.Object)" map="compareTo"/>
  <method class="org.joda.time.LocalTime" name="org.joda.time.LocalTime minusMinutes(int)" map="E"/>
  <method class="org.joda.time.LocalTime" name="org.joda.time.LocalTime plusHours(int)" map="F"/>
  <method class="org.joda.time.LocalTime" name="org.joda.time.LocalTime withFieldAdded(org.joda.time.DurationFieldType, int)" map="A"/>
  <method class="org.joda.time.LocalTime" name="org.joda.time.LocalTime plus(org.joda.time.ReadablePeriod)" map="A"/>
  <method class="org.joda.time.LocalTime" name="org.joda.time.LocalTime withPeriodAdded(org.joda.time.ReadablePeriod, int)" map="A"/>
  <method class="org.joda.time.LocalTime" name="org.joda.time.LocalTime$Property secondOfMinute()" map="G"/>
  <method class="org.joda.time.LocalTime" name="org.joda.time.LocalTime fromCalendarFields(java.util.Calendar)" map="A"/>
  <method class="org.joda.time.LocalTime" name="org.joda.time.DateTime toDateTimeToday(org.joda.time.DateTimeZone)" map="A"/>
  <method class="org.joda.time.LocalTime" name="java.lang.String toString(java.lang.String)" map="A"/>
  <method class="org.joda.time.LocalTime" name="org.joda.time.LocalTime withSecondOfMinute(int)" map="G"/>
  <method class="org.joda.time.LocalTime" name="org.joda.time.LocalTime$Property millisOfSecond()" map="H"/>
  <method class="org.joda.time.LocalTime" name="int getMillisOfSecond()" map="I"/>
  <method class="org.joda.time.LocalTime" name="long getLocalMillis()" map="F"/>
  <method class="org.joda.time.LocalTime" name="org.joda.time.LocalTime$Property hourOfDay()" map="J"/>
  <method class="org.joda.time.LocalTime" name="org.joda.time.LocalTime withField(org.joda.time.DateTimeFieldType, int)" map="A"/>
  <method class="org.joda.time.LocalTime" name="org.joda.time.LocalTime withMinuteOfHour(int)" map="H"/>
  <method class="org.joda.time.LocalTime" name="org.joda.time.LocalTime minus(org.joda.time.ReadablePeriod)" map="B"/>
  <method class="org.joda.time.LocalTime" name="org.joda.time.DateTimeField getField(int, org.joda.time.Chronology)" map="A"/>
  <method class="org.joda.time.LocalTime" name="org.joda.time.LocalTime$Property minuteOfHour()" map="K"/>
  <method class="org.joda.time.LocalTime" name="java.lang.String toString()" map="toString"/>
  <method class="org.joda.time.LocalTime" name="org.joda.time.LocalTime minusHours(int)" map="I"/>
  <method class="org.joda.time.LocalTime" name="org.joda.time.LocalTime fromDateFields(java.util.Date)" map="A"/>
  <method class="org.joda.time.LocalTime" name="org.joda.time.LocalTime minusMillis(int)" map="J"/>
  <method class="org.joda.time.LocalTime" name="org.joda.time.LocalTime withFields(org.joda.time.ReadablePartial)" map="D"/>
  <method class="org.joda.time.LocalTime" name="boolean isSupported(org.joda.time.DateTimeFieldType)" map="B"/>
  <method class="org.joda.time.LocalTime" name="org.joda.time.LocalTime fromMillisOfDay(long, org.joda.time.Chronology)" map="A"/>
  <method class="org.joda.time.LocalTime" name="org.joda.time.LocalTime withLocalMillis(long)" map="A"/>
  <method class="org.joda.time.LocalTime" name="boolean isSupported(org.joda.time.DurationFieldType)" map="C"/>
  <method class="org.joda.time.LocalTime" name="org.joda.time.LocalTime withMillisOfSecond(int)" map="K"/>
  <method class="org.joda.time.LocalTime" name="org.joda.time.LocalTime plusSeconds(int)" map="L"/>
  <method class="org.joda.time.LocalTime" name="org.joda.time.LocalTime$Property property(org.joda.time.DateTimeFieldType)" map="E"/>
  <method class="org.joda.time.LocalTime" name="org.joda.time.LocalTime withHourOfDay(int)" map="M"/>
  <method class="org.joda.time.LocalTime" name="org.joda.time.LocalTime fromMillisOfDay(long)" map="B"/>
  <method class="org.joda.time.LocalTime" name="org.joda.time.LocalTime plusMinutes(int)" map="N"/>
  <method class="org.joda.time.LocalTime" name="int get(org.joda.time.DateTimeFieldType)" map="A"/>
  <method class="org.joda.time.LocalTime" name="int getValue(int)" map="C"/>
  <method class="org.joda.time.LocalTime" name="int getMinuteOfHour()" map="L"/>
  <method class="org.joda.time.LocalTime" name="int size()" map="A"/>
  <method class="org.joda.time.LocalTime" name="boolean equals(java.lang.Object)" map="equals"/>
  <method class="org.joda.time.LocalTime" name="org.joda.time.DateTime toDateTimeToday()" map="M"/>
  <method class="org.joda.time.LocalTime" name="org.joda.time.LocalTime withMillisOfDay(int)" map="O"/>
  <method class="org.joda.time.LocalTime" name="org.joda.time.LocalTime plusMillis(int)" map="P"/>
  <method class="org.joda.time.LocalTime" name="int getSecondOfMinute()" map="N"/>
  <method class="org.joda.time.LocalTime" name="org.joda.time.LocalTime$Property millisOfDay()" map="O"/>
  <method class="org.joda.time.LocalTime" name="java.lang.String toString(java.lang.String, java.util.Locale)" map="A"/>
  <method class="org.joda.time.LocalTime" name="int getMillisOfDay()" map="P"/>
  <method class="org.joda.time.LocalTime" name="int getHourOfDay()" map="Q"/>
  <method class="org.joda.time.LocalTime" name="org.joda.time.Chronology getChronology()" map="B"/>
  <class name="org.joda.time.Interval" map="R"/>
  <field class="org.joda.time.Interval" name="serialVersionUID" map="E"/>
  <method class="org.joda.time.Interval" name="org.joda.time.Interval withPeriodAfterStart(org.joda.time.ReadablePeriod)" map="A"/>
  <method class="org.joda.time.Interval" name="boolean abuts(org.joda.time.ReadableInterval)" map="E"/>
  <method class="org.joda.time.Interval" name="org.joda.time.Interval withPeriodBeforeEnd(org.joda.time.ReadablePeriod)" map="B"/>
  <method class="org.joda.time.Interval" name="org.joda.time.Interval withStart(org.joda.time.ReadableInstant)" map="D"/>
  <method class="org.joda.time.Interval" name="org.joda.time.Interval withStartMillis(long)" map="D"/>
  <method class="org.joda.time.Interval" name="org.joda.time.Interval withDurationAfterStart(org.joda.time.ReadableDuration)" map="A"/>
  <method class="org.joda.time.Interval" name="org.joda.time.Interval withEndMillis(long)" map="E"/>
  <method class="org.joda.time.Interval" name="org.joda.time.Interval overlap(org.joda.time.ReadableInterval)" map="F"/>
  <method class="org.joda.time.Interval" name="org.joda.time.Interval withEnd(org.joda.time.ReadableInstant)" map="E"/>
  <method class="org.joda.time.Interval" name="org.joda.time.Interval withDurationBeforeEnd(org.joda.time.ReadableDuration)" map="B"/>
  <method class="org.joda.time.Interval" name="org.joda.time.Interval withChronology(org.joda.time.Chronology)" map="A"/>
  <method class="org.joda.time.Interval" name="org.joda.time.Interval toInterval()" map="J"/>
  <method class="org.joda.time.Interval" name="org.joda.time.Interval gap(org.joda.time.ReadableInterval)" map="G"/>
  <class name="org.joda.time.DateTimeConstants" map="S"/>
  <field class="org.joda.time.DateTimeConstants" name="SEPTEMBER" map="A"/>
  <field class="org.joda.time.DateTimeConstants" name="WEDNESDAY" map="B"/>
  <field class="org.joda.time.DateTimeConstants" name="JANUARY" map="C"/>
  <field class="org.joda.time.DateTimeConstants" name="AD" map="D"/>
  <field class="org.joda.time.DateTimeConstants" name="PM" map="E"/>
  <field class="org.joda.time.DateTimeConstants" name="MONDAY" map="F"/>
  <field class="org.joda.time.DateTimeConstants" name="SECONDS_PER_HOUR" map="G"/>
  <field class="org.joda.time.DateTimeConstants" name="OCTOBER" map="H"/>
  <field class="org.joda.time.DateTimeConstants" name="TUESDAY" map="I"/>
  <field class="org.joda.time.DateTimeConstants" name="THURSDAY" map="J"/>
  <field class="org.joda.time.DateTimeConstants" name="MILLIS_PER_WEEK" map="K"/>
  <field class="org.joda.time.DateTimeConstants" name="HOURS_PER_DAY" map="L"/>
  <field class="org.joda.time.DateTimeConstants" name="JUNE" map="M"/>
  <field class="org.joda.time.DateTimeConstants" name="HOURS_PER_WEEK" map="N"/>
  <field class="org.joda.time.DateTimeConstants" name="MINUTES_PER_WEEK" map="O"/>
  <field class="org.joda.time.DateTimeConstants" name="SATURDAY" map="P"/>
  <field class="org.joda.time.DateTimeConstants" name="NOVEMBER" map="Q"/>
  <field class="org.joda.time.DateTimeConstants" name="CE" map="R"/>
  <field class="org.joda.time.DateTimeConstants" name="DAYS_PER_WEEK" map="S"/>
  <field class="org.joda.time.DateTimeConstants" name="MARCH" map="T"/>
  <field class="org.joda.time.DateTimeConstants" name="SUNDAY" map="U"/>
  <field class="org.joda.time.DateTimeConstants" name="AUGUST" map="V"/>
  <field class="org.joda.time.DateTimeConstants" name="MILLIS_PER_MINUTE" map="W"/>
  <field class="org.joda.time.DateTimeConstants" name="FRIDAY" map="X"/>
  <field class="org.joda.time.DateTimeConstants" name="SECONDS_PER_MINUTE" map="Y"/>
  <field class="org.joda.time.DateTimeConstants" name="MILLIS_PER_HOUR" map="Z"/>
  <field class="org.joda.time.DateTimeConstants" name="BC" map="_"/>
  <field class="org.joda.time.DateTimeConstants" name="BCE" map="a"/>
  <field class="org.joda.time.DateTimeConstants" name="DECEMBER" map="b"/>
  <field class="org.joda.time.DateTimeConstants" name="MILLIS_PER_DAY" map="c"/>
  <field class="org.joda.time.DateTimeConstants" name="MINUTES_PER_HOUR" map="d"/>
  <field class="org.joda.time.DateTimeConstants" name="SECONDS_PER_WEEK" map="e"/>
  <field class="org.joda.time.DateTimeConstants" name="JULY" map="f"/>
  <field class="org.joda.time.DateTimeConstants" name="MAY" map="g"/>
  <field class="org.joda.time.DateTimeConstants" name="MILLIS_PER_SECOND" map="h"/>
  <field class="org.joda.time.DateTimeConstants" name="APRIL" map="i"/>
  <field class="org.joda.time.DateTimeConstants" name="MINUTES_PER_DAY" map="j"/>
  <field class="org.joda.time.DateTimeConstants" name="SECONDS_PER_DAY" map="k"/>
  <field class="org.joda.time.DateTimeConstants" name="FEBRUARY" map="l"/>
  <field class="org.joda.time.DateTimeConstants" name="AM" map="m"/>
  <class name="org.joda.time.LocalDate$Property" map="_A"/>
  <field class="org.joda.time.LocalDate$Property" name="iInstant" map="H"/>
  <field class="org.joda.time.LocalDate$Property" name="iField" map="I"/>
  <field class="org.joda.time.LocalDate$Property" name="serialVersionUID" map="J"/>
  <method class="org.joda.time.LocalDate$Property" name="org.joda.time.LocalDate withMinimumValue()" map="j"/>
  <method class="org.joda.time.LocalDate$Property" name="org.joda.time.LocalDate roundFloorCopy()" map="k"/>
  <method class="org.joda.time.LocalDate$Property" name="org.joda.time.LocalDate roundHalfCeilingCopy()" map="l"/>
  <method class="org.joda.time.LocalDate$Property" name="org.joda.time.LocalDate addWrapFieldToCopy(int)" map="H"/>
  <method class="org.joda.time.LocalDate$Property" name="org.joda.time.LocalDate roundHalfEvenCopy()" map="m"/>
  <method class="org.joda.time.LocalDate$Property" name="org.joda.time.LocalDate roundCeilingCopy()" map="n"/>
  <method class="org.joda.time.LocalDate$Property" name="org.joda.time.LocalDate setCopy(java.lang.String)" map="C"/>
  <method class="org.joda.time.LocalDate$Property" name="org.joda.time.Chronology getChronology()" map="G"/>
  <method class="org.joda.time.LocalDate$Property" name="org.joda.time.DateTimeField getField()" map="H"/>
  <method class="org.joda.time.LocalDate$Property" name="org.joda.time.LocalDate addToCopy(int)" map="I"/>
  <method class="org.joda.time.LocalDate$Property" name="void readObject(java.io.ObjectInputStream)" map="C"/>
  <method class="org.joda.time.LocalDate$Property" name="org.joda.time.LocalDate setCopy(java.lang.String, java.util.Locale)" map="C"/>
  <method class="org.joda.time.LocalDate$Property" name="org.joda.time.LocalDate roundHalfFloorCopy()" map="o"/>
  <method class="org.joda.time.LocalDate$Property" name="org.joda.time.LocalDate setCopy(int)" map="J"/>
  <method class="org.joda.time.LocalDate$Property" name="long getMillis()" map="Q"/>
  <method class="org.joda.time.LocalDate$Property" name="void writeObject(java.io.ObjectOutputStream)" map="C"/>
  <method class="org.joda.time.LocalDate$Property" name="org.joda.time.LocalDate withMaximumValue()" map="p"/>
  <method class="org.joda.time.LocalDate$Property" name="org.joda.time.LocalDate getLocalDate()" map="q"/>
  <class name="org.joda.time.LocalDate" map="T"/>
  <field class="org.joda.time.LocalDate" name="iLocalMillis" map="K"/>
  <field class="org.joda.time.LocalDate" name="DAY_OF_MONTH" map="L"/>
  <field class="org.joda.time.LocalDate" name="DATE_DURATION_TYPES" map="M"/>
  <field class="org.joda.time.LocalDate" name="iChronology" map="N"/>
  <field class="org.joda.time.LocalDate" name="MONTH_OF_YEAR" map="O"/>
  <field class="org.joda.time.LocalDate" name="YEAR" map="P"/>
  <field class="org.joda.time.LocalDate" name="serialVersionUID" map="Q"/>
  <method class="org.joda.time.LocalDate" name="org.joda.time.DateTimeField getField(int, org.joda.time.Chronology)" map="A"/>
  <method class="org.joda.time.LocalDate" name="org.joda.time.LocalDate plusMonths(int)" map="Q"/>
  <method class="org.joda.time.LocalDate" name="org.joda.time.LocalDate withYearOfCentury(int)" map="R"/>
  <method class="org.joda.time.LocalDate" name="org.joda.time.LocalDate withCenturyOfEra(int)" map="S"/>
  <method class="org.joda.time.LocalDate" name="org.joda.time.LocalDate$Property monthOfYear()" map="R"/>
  <method class="org.joda.time.LocalDate" name="org.joda.time.LocalDate withDayOfYear(int)" map="T"/>
  <method class="org.joda.time.LocalDate" name="org.joda.time.LocalDate$Property dayOfMonth()" map="S"/>
  <method class="org.joda.time.LocalDate" name="org.joda.time.DateTime toDateTimeAtStartOfDay()" map="T"/>
  <method class="org.joda.time.LocalDate" name="org.joda.time.LocalDate minusYears(int)" map="U"/>
  <method class="org.joda.time.LocalDate" name="org.joda.time.LocalDate plusWeeks(int)" map="V"/>
  <method class="org.joda.time.LocalDate" name="org.joda.time.LocalDate$Property centuryOfEra()" map="U"/>
  <method class="org.joda.time.LocalDate" name="org.joda.time.Interval toInterval(org.joda.time.DateTimeZone)" map="B"/>
  <method class="org.joda.time.LocalDate" name="int getValue(int)" map="C"/>
  <method class="org.joda.time.LocalDate" name="org.joda.time.LocalDate$Property yearOfEra()" map="V"/>
  <method class="org.joda.time.LocalDate" name="boolean isSupported(org.joda.time.DateTimeFieldType)" map="B"/>
  <method class="org.joda.time.LocalDate" name="org.joda.time.LocalDate withWeekyear(int)" map="W"/>
  <method class="org.joda.time.LocalDate" name="int getEra()" map="W"/>
  <method class="org.joda.time.LocalDate" name="org.joda.time.LocalDate$Property property(org.joda.time.DateTimeFieldType)" map="F"/>
  <method class="org.joda.time.LocalDate" name="int get(org.joda.time.DateTimeFieldType)" map="A"/>
  <method class="org.joda.time.LocalDate" name="org.joda.time.LocalDate withDayOfWeek(int)" map="X"/>
  <method class="org.joda.time.LocalDate" name="int getDayOfYear()" map="X"/>
  <method class="org.joda.time.LocalDate" name="org.joda.time.LocalDate plus(org.joda.time.ReadablePeriod)" map="C"/>
  <method class="org.joda.time.LocalDate" name="org.joda.time.LocalDate$Property dayOfYear()" map="Y"/>
  <method class="org.joda.time.LocalDate" name="boolean isSupported(org.joda.time.DurationFieldType)" map="D"/>
  <method class="org.joda.time.LocalDate" name="int size()" map="A"/>
  <method class="org.joda.time.LocalDate" name="int getYear()" map="Z"/>
  <method class="org.joda.time.LocalDate" name="org.joda.time.LocalDate$Property year()" map="_"/>
  <method class="org.joda.time.LocalDate" name="org.joda.time.LocalDate withPeriodAdded(org.joda.time.ReadablePeriod, int)" map="B"/>
  <method class="org.joda.time.LocalDate" name="org.joda.time.LocalDate minusWeeks(int)" map="Y"/>
  <method class="org.joda.time.LocalDate" name="org.joda.time.LocalDate$Property weekyear()" map="a"/>
  <method class="org.joda.time.LocalDate" name="org.joda.time.LocalDate withWeekOfWeekyear(int)" map="Z"/>
  <method class="org.joda.time.LocalDate" name="int getDayOfMonth()" map="b"/>
  <method class="org.joda.time.LocalDate" name="boolean equals(java.lang.Object)" map="equals"/>
  <method class="org.joda.time.LocalDate" name="java.lang.String toString(java.lang.String, java.util.Locale)" map="B"/>
  <method class="org.joda.time.LocalDate" name="org.joda.time.LocalDate withLocalMillis(long)" map="C"/>
  <method class="org.joda.time.LocalDate" name="org.joda.time.LocalDate withField(org.joda.time.DateTimeFieldType, int)" map="B"/>
  <method class="org.joda.time.LocalDate" name="org.joda.time.LocalDate withEra(int)" map="_"/>
  <method class="org.joda.time.LocalDate" name="java.lang.String toString(java.lang.String)" map="B"/>
  <method class="org.joda.time.LocalDate" name="org.joda.time.LocalDate minusMonths(int)" map="a"/>
  <method class="org.joda.time.LocalDate" name="org.joda.time.DateTime toDateTimeAtCurrentTime()" map="c"/>
  <method class="org.joda.time.LocalDate" name="long getLocalMillis()" map="F"/>
  <method class="org.joda.time.LocalDate" name="org.joda.time.LocalDate withFieldAdded(org.joda.time.DurationFieldType, int)" map="B"/>
  <method class="org.joda.time.LocalDate" name="org.joda.time.DateMidnight toDateMidnight()" map="d"/>
  <method class="org.joda.time.LocalDate" name="int getDayOfWeek()" map="e"/>
  <method class="org.joda.time.LocalDate" name="org.joda.time.DateTime toDateTimeAtStartOfDay(org.joda.time.DateTimeZone)" map="C"/>
  <method class="org.joda.time.LocalDate" name="org.joda.time.LocalDate$Property weekOfWeekyear()" map="f"/>
  <method class="org.joda.time.LocalDate" name="org.joda.time.LocalDate minusDays(int)" map="b"/>
  <method class="org.joda.time.LocalDate" name="int getYearOfCentury()" map="g"/>
  <method class="org.joda.time.LocalDate" name="org.joda.time.LocalDate fromCalendarFields(java.util.Calendar)" map="B"/>
  <method class="org.joda.time.LocalDate" name="int getWeekOfWeekyear()" map="h"/>
  <method class="org.joda.time.LocalDate" name="int compareTo(java.lang.Object)" map="compareTo"/>
  <method class="org.joda.time.LocalDate" name="int getCenturyOfEra()" map="i"/>
  <method class="org.joda.time.LocalDate" name="org.joda.time.DateTime toDateTime(org.joda.time.LocalTime, org.joda.time.DateTimeZone)" map="A"/>
  <method class="org.joda.time.LocalDate" name="int getMonthOfYear()" map="j"/>
  <method class="org.joda.time.LocalDate" name="org.joda.time.LocalDate plusYears(int)" map="c"/>
  <method class="org.joda.time.LocalDate" name="org.joda.time.DateTime toDateTimeAtCurrentTime(org.joda.time.DateTimeZone)" map="D"/>
  <method class="org.joda.time.LocalDate" name="org.joda.time.LocalDate withMonthOfYear(int)" map="d"/>
  <method class="org.joda.time.LocalDate" name="org.joda.time.Interval toInterval()" map="k"/>
  <method class="org.joda.time.LocalDate" name="org.joda.time.DateMidnight toDateMidnight(org.joda.time.DateTimeZone)" map="E"/>
  <method class="org.joda.time.LocalDate" name="org.joda.time.LocalDate withDayOfMonth(int)" map="e"/>
  <method class="org.joda.time.LocalDate" name="org.joda.time.LocalDateTime toLocalDateTime(org.joda.time.LocalTime)" map="A"/>
  <method class="org.joda.time.LocalDate" name="org.joda.time.LocalDate plusDays(int)" map="f"/>
  <method class="org.joda.time.LocalDate" name="org.joda.time.DateTime toDateTimeAtMidnight(org.joda.time.DateTimeZone)" map="F"/>
  <method class="org.joda.time.LocalDate" name="org.joda.time.LocalDate fromDateFields(java.util.Date)" map="B"/>
  <method class="org.joda.time.LocalDate" name="org.joda.time.LocalDate withFields(org.joda.time.ReadablePartial)" map="E"/>
  <method class="org.joda.time.LocalDate" name="org.joda.time.LocalDate minus(org.joda.time.ReadablePeriod)" map="D"/>
  <method class="org.joda.time.LocalDate" name="org.joda.time.LocalDate withYear(int)" map="g"/>
  <method class="org.joda.time.LocalDate" name="int getWeekyear()" map="l"/>
  <method class="org.joda.time.LocalDate" name="org.joda.time.LocalDate withYearOfEra(int)" map="h"/>
  <method class="org.joda.time.LocalDate" name="int getYearOfEra()" map="m"/>
  <method class="org.joda.time.LocalDate" name="org.joda.time.LocalDate$Property dayOfWeek()" map="n"/>
  <method class="org.joda.time.LocalDate" name="java.lang.String toString()" map="toString"/>
  <method class="org.joda.time.LocalDate" name="org.joda.time.LocalDate$Property yearOfCentury()" map="o"/>
  <method class="org.joda.time.LocalDate" name="org.joda.time.Chronology getChronology()" map="B"/>
  <method class="org.joda.time.LocalDate" name="org.joda.time.DateTime toDateTime(org.joda.time.LocalTime)" map="B"/>
  <method class="org.joda.time.LocalDate" name="org.joda.time.LocalDate$Property era()" map="p"/>
  <method class="org.joda.time.LocalDate" name="org.joda.time.DateTime toDateTimeAtMidnight()" map="q"/>
  <class name="org.joda.time.PeriodType" map="U"/>
  <field class="org.joda.time.PeriodType" name="iName" map="A"/>
  <field class="org.joda.time.PeriodType" name="cYears" map="B"/>
  <field class="org.joda.time.PeriodType" name="HOUR_INDEX" map="C"/>
  <field class="org.joda.time.PeriodType" name="cHours" map="D"/>
  <field class="org.joda.time.PeriodType" name="cYWD" map="E"/>
  <field class="org.joda.time.PeriodType" name="MILLI_INDEX" map="F"/>
  <field class="org.joda.time.PeriodType" name="MONTH_INDEX" map="G"/>
  <field class="org.joda.time.PeriodType" name="cMinutes" map="H"/>
  <field class="org.joda.time.PeriodType" name="YEAR_INDEX" map="I"/>
  <field class="org.joda.time.PeriodType" name="iIndices" map="J"/>
  <field class="org.joda.time.PeriodType" name="serialVersionUID" map="K"/>
  <field class="org.joda.time.PeriodType" name="WEEK_INDEX" map="L"/>
  <field class="org.joda.time.PeriodType" name="DAY_INDEX" map="M"/>
  <field class="org.joda.time.PeriodType" name="cYDTime" map="N"/>
  <field class="org.joda.time.PeriodType" name="cSeconds" map="O"/>
  <field class="org.joda.time.PeriodType" name="cYMDTime" map="P"/>
  <field class="org.joda.time.PeriodType" name="MINUTE_INDEX" map="Q"/>
  <field class="org.joda.time.PeriodType" name="cStandard" map="R"/>
  <field class="org.joda.time.PeriodType" name="iTypes" map="S"/>
  <field class="org.joda.time.PeriodType" name="cDTime" map="T"/>
  <field class="org.joda.time.PeriodType" name="cDays" map="U"/>
  <field class="org.joda.time.PeriodType" name="cYD" map="V"/>
  <field class="org.joda.time.PeriodType" name="cTime" map="W"/>
  <field class="org.joda.time.PeriodType" name="cWeeks" map="X"/>
  <field class="org.joda.time.PeriodType" name="cYMD" map="Y"/>
  <field class="org.joda.time.PeriodType" name="cYWDTime" map="Z"/>
  <field class="org.joda.time.PeriodType" name="cTypes" map="_"/>
  <field class="org.joda.time.PeriodType" name="cMillis" map="a"/>
  <field class="org.joda.time.PeriodType" name="SECOND_INDEX" map="b"/>
  <field class="org.joda.time.PeriodType" name="cMonths" map="c"/>
  <method class="org.joda.time.PeriodType" name="org.joda.time.PeriodType withMillisRemoved()" map="A"/>
  <method class="org.joda.time.PeriodType" name="org.joda.time.PeriodType yearDayTime()" map="B"/>
  <method class="org.joda.time.PeriodType" name="org.joda.time.PeriodType years()" map="C"/>
  <method class="org.joda.time.PeriodType" name="org.joda.time.PeriodType months()" map="D"/>
  <method class="org.joda.time.PeriodType" name="org.joda.time.PeriodType withSecondsRemoved()" map="E"/>
  <method class="org.joda.time.PeriodType" name="org.joda.time.PeriodType yearWeekDayTime()" map="F"/>
  <method class="org.joda.time.PeriodType" name="org.joda.time.DurationFieldType getFieldType(int)" map="A"/>
  <method class="org.joda.time.PeriodType" name="org.joda.time.PeriodType yearDay()" map="G"/>
  <method class="org.joda.time.PeriodType" name="org.joda.time.PeriodType withMinutesRemoved()" map="H"/>
  <method class="org.joda.time.PeriodType" name="org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])" map="A"/>
  <method class="org.joda.time.PeriodType" name="org.joda.time.PeriodType millis()" map="I"/>
  <method class="org.joda.time.PeriodType" name="org.joda.time.PeriodType yearWeekDay()" map="J"/>
  <method class="org.joda.time.PeriodType" name="boolean addIndexedField(org.joda.time.ReadablePeriod, int, int[], int)" map="A"/>
  <method class="org.joda.time.PeriodType" name="int hashCode()" map="hashCode"/>
  <method class="org.joda.time.PeriodType" name="org.joda.time.PeriodType days()" map="K"/>
  <method class="org.joda.time.PeriodType" name="org.joda.time.PeriodType weeks()" map="L"/>
  <method class="org.joda.time.PeriodType" name="org.joda.time.PeriodType hours()" map="M"/>
  <method class="org.joda.time.PeriodType" name="org.joda.time.PeriodType standard()" map="N"/>
  <method class="org.joda.time.PeriodType" name="org.joda.time.PeriodType withMonthsRemoved()" map="O"/>
  <method class="org.joda.time.PeriodType" name="java.lang.String toString()" map="toString"/>
  <method class="org.joda.time.PeriodType" name="org.joda.time.PeriodType yearMonthDayTime()" map="P"/>
  <method class="org.joda.time.PeriodType" name="org.joda.time.PeriodType dayTime()" map="Q"/>
  <method class="org.joda.time.PeriodType" name="org.joda.time.PeriodType time()" map="R"/>
  <method class="org.joda.time.PeriodType" name="int indexOf(org.joda.time.DurationFieldType)" map="A"/>
  <method class="org.joda.time.PeriodType" name="boolean isSupported(org.joda.time.DurationFieldType)" map="B"/>
  <method class="org.joda.time.PeriodType" name="org.joda.time.PeriodType withFieldRemoved(int, java.lang.String)" map="A"/>
  <method class="org.joda.time.PeriodType" name="org.joda.time.PeriodType withHoursRemoved()" map="S"/>
  <method class="org.joda.time.PeriodType" name="java.lang.String getName()" map="T"/>
  <method class="org.joda.time.PeriodType" name="org.joda.time.PeriodType seconds()" map="U"/>
  <method class="org.joda.time.PeriodType" name="org.joda.time.PeriodType withWeeksRemoved()" map="V"/>
  <method class="org.joda.time.PeriodType" name="boolean setIndexedField(org.joda.time.ReadablePeriod, int, int[], int)" map="B"/>
  <method class="org.joda.time.PeriodType" name="org.joda.time.PeriodType withYearsRemoved()" map="W"/>
  <method class="org.joda.time.PeriodType" name="boolean equals(java.lang.Object)" map="equals"/>
  <method class="org.joda.time.PeriodType" name="int size()" map="X"/>
  <method class="org.joda.time.PeriodType" name="org.joda.time.PeriodType withDaysRemoved()" map="Y"/>
  <method class="org.joda.time.PeriodType" name="org.joda.time.PeriodType minutes()" map="Z"/>
  <method class="org.joda.time.PeriodType" name="org.joda.time.PeriodType yearMonthDay()" map="_"/>
  <method class="org.joda.time.PeriodType" name="int getIndexedField(org.joda.time.ReadablePeriod, int)" map="A"/>
  <class name="org.joda.time.DateTimeZone$1" map="1"/>
  <method class="org.joda.time.DateTimeZone$1" name="org.joda.time.DateTimeZone getZone()" map="D"/>
  <method class="org.joda.time.DateTimeZone$1" name="org.joda.time.Chronology withUTC()" map="B"/>
  <method class="org.joda.time.DateTimeZone$1" name="java.lang.String toString()" map="toString"/>
  <method class="org.joda.time.DateTimeZone$1" name="org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)" map="B"/>
  <class name="org.joda.time.DateTimeZone$Stub" map="_A"/>
  <field class="org.joda.time.DateTimeZone$Stub" name="iID" map="A"/>
  <field class="org.joda.time.DateTimeZone$Stub" name="serialVersionUID" map="B"/>
  <method class="org.joda.time.DateTimeZone$Stub" name="void writeObject(java.io.ObjectOutputStream)" map="A"/>
  <method class="org.joda.time.DateTimeZone$Stub" name="java.lang.Object readResolve()" map="A"/>
  <method class="org.joda.time.DateTimeZone$Stub" name="void readObject(java.io.ObjectInputStream)" map="A"/>
  <class name="org.joda.time.DateTimeZone" map="V"/>
  <field class="org.joda.time.DateTimeZone" name="serialVersionUID" map="A"/>
  <field class="org.joda.time.DateTimeZone" name="UTC" map="B"/>
  <field class="org.joda.time.DateTimeZone" name="cProvider" map="C"/>
  <field class="org.joda.time.DateTimeZone" name="iID" map="D"/>
  <field class="org.joda.time.DateTimeZone" name="cZoneIdConversion" map="E"/>
  <field class="org.joda.time.DateTimeZone" name="cNameProvider" map="F"/>
  <field class="org.joda.time.DateTimeZone" name="cAvailableIDs" map="G"/>
  <field class="org.joda.time.DateTimeZone" name="cDefault" map="H"/>
  <field class="org.joda.time.DateTimeZone" name="iFixedOffsetCache" map="I"/>
  <field class="org.joda.time.DateTimeZone" name="cOffsetFormatter" map="J"/>
  <method class="org.joda.time.DateTimeZone" name="boolean isStandardOffset(long)" map="A"/>
  <method class="org.joda.time.DateTimeZone" name="int getOffsetFromLocal(long)" map="B"/>
  <method class="org.joda.time.DateTimeZone" name="org.joda.time.DateTimeZone forID(java.lang.String)" map="A"/>
  <method class="org.joda.time.DateTimeZone" name="org.joda.time.tz.Provider getDefaultProvider()" map="A"/>
  <method class="org.joda.time.DateTimeZone" name="boolean isLocalDateTimeGap(org.joda.time.LocalDateTime)" map="A"/>
  <method class="org.joda.time.DateTimeZone" name="void setNameProvider0(org.joda.time.tz.NameProvider)" map="A"/>
  <method class="org.joda.time.DateTimeZone" name="org.joda.time.DateTimeZone getDefault()" map="B"/>
  <method class="org.joda.time.DateTimeZone" name="java.util.Set getAvailableIDs()" map="C"/>
  <method class="org.joda.time.DateTimeZone" name="int parseOffset(java.lang.String)" map="B"/>
  <method class="org.joda.time.DateTimeZone" name="long convertLocalToUTC(long, boolean)" map="A"/>
  <method class="org.joda.time.DateTimeZone" name="void setProvider(org.joda.time.tz.Provider)" map="A"/>
  <method class="org.joda.time.DateTimeZone" name="void setNameProvider(org.joda.time.tz.NameProvider)" map="B"/>
  <method class="org.joda.time.DateTimeZone" name="long getMillisKeepLocal(org.joda.time.DateTimeZone, long)" map="A"/>
  <method class="org.joda.time.DateTimeZone" name="void setDefault(org.joda.time.DateTimeZone)" map="A"/>
  <method class="org.joda.time.DateTimeZone" name="org.joda.time.format.DateTimeFormatter offsetFormatter()" map="D"/>
  <method class="org.joda.time.DateTimeZone" name="long nextTransition(long)" map="C"/>
  <method class="org.joda.time.DateTimeZone" name="java.lang.String getName(long, java.util.Locale)" map="A"/>
  <method class="org.joda.time.DateTimeZone" name="org.joda.time.tz.NameProvider getNameProvider()" map="E"/>
  <method class="org.joda.time.DateTimeZone" name="java.lang.String getConvertedId(java.lang.String)" map="C"/>
  <method class="org.joda.time.DateTimeZone" name="java.lang.String getID()" map="F"/>
  <method class="org.joda.time.DateTimeZone" name="long previousTransition(long)" map="D"/>
  <method class="org.joda.time.DateTimeZone" name="int hashCode()" map="hashCode"/>
  <method class="org.joda.time.DateTimeZone" name="org.joda.time.DateTimeZone fixedOffsetZone(java.lang.String, int)" map="A"/>
  <method class="org.joda.time.DateTimeZone" name="org.joda.time.DateTimeZone forOffsetHoursMinutes(int, int)" map="A"/>
  <method class="org.joda.time.DateTimeZone" name="int getOffset(long)" map="E"/>
  <method class="org.joda.time.DateTimeZone" name="java.lang.String toString()" map="toString"/>
  <method class="org.joda.time.DateTimeZone" name="java.lang.String printOffset(int)" map="A"/>
  <method class="org.joda.time.DateTimeZone" name="org.joda.time.tz.Provider getProvider()" map="G"/>
  <method class="org.joda.time.DateTimeZone" name="int getOffset(org.joda.time.ReadableInstant)" map="A"/>
  <method class="org.joda.time.DateTimeZone" name="java.lang.Object writeReplace()" map="H"/>
  <method class="org.joda.time.DateTimeZone" name="org.joda.time.DateTimeZone forOffsetMillis(int)" map="B"/>
  <method class="org.joda.time.DateTimeZone" name="void setProvider0(org.joda.time.tz.Provider)" map="B"/>
  <method class="org.joda.time.DateTimeZone" name="long convertUTCToLocal(long)" map="F"/>
  <method class="org.joda.time.DateTimeZone" name="org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)" map="A"/>
  <method class="org.joda.time.DateTimeZone" name="java.lang.String getShortName(long, java.util.Locale)" map="B"/>
  <method class="org.joda.time.DateTimeZone" name="java.lang.String getNameKey(long)" map="G"/>
  <method class="org.joda.time.DateTimeZone" name="boolean equals(java.lang.Object)" map="equals"/>
  <method class="org.joda.time.DateTimeZone" name="java.lang.String getShortName(long)" map="H"/>
  <method class="org.joda.time.DateTimeZone" name="org.joda.time.tz.NameProvider getDefaultNameProvider()" map="I"/>
  <method class="org.joda.time.DateTimeZone" name="java.lang.String getName(long)" map="I"/>
  <method class="org.joda.time.DateTimeZone" name="boolean isFixed()" map="J"/>
  <method class="org.joda.time.DateTimeZone" name="java.util.TimeZone toTimeZone()" map="K"/>
  <method class="org.joda.time.DateTimeZone" name="int getStandardOffset(long)" map="J"/>
  <method class="org.joda.time.DateTimeZone" name="org.joda.time.DateTimeZone forOffsetHours(int)" map="C"/>
  <class name="org.joda.time.ReadWritableDateTime" map="W"/>
  <method class="org.joda.time.ReadWritableDateTime" name="void setWeekOfWeekyear(int)" map="f"/>
  <method class="org.joda.time.ReadWritableDateTime" name="void setDayOfMonth(int)" map="g"/>
  <method class="org.joda.time.ReadWritableDateTime" name="void addMonths(int)" map="h"/>
  <method class="org.joda.time.ReadWritableDateTime" name="void setYear(int)" map="i"/>
  <method class="org.joda.time.ReadWritableDateTime" name="void addSeconds(int)" map="j"/>
  <method class="org.joda.time.ReadWritableDateTime" name="void setMonthOfYear(int)" map="k"/>
  <method class="org.joda.time.ReadWritableDateTime" name="void addWeeks(int)" map="l"/>
  <method class="org.joda.time.ReadWritableDateTime" name="void addHours(int)" map="m"/>
  <method class="org.joda.time.ReadWritableDateTime" name="void setWeekyear(int)" map="n"/>
  <method class="org.joda.time.ReadWritableDateTime" name="void setDayOfWeek(int)" map="o"/>
  <method class="org.joda.time.ReadWritableDateTime" name="void setMinuteOfHour(int)" map="p"/>
  <method class="org.joda.time.ReadWritableDateTime" name="void setMinuteOfDay(int)" map="q"/>
  <method class="org.joda.time.ReadWritableDateTime" name="void setMillisOfSecond(int)" map="r"/>
  <method class="org.joda.time.ReadWritableDateTime" name="void setSecondOfMinute(int)" map="s"/>
  <method class="org.joda.time.ReadWritableDateTime" name="void setDayOfYear(int)" map="t"/>
  <method class="org.joda.time.ReadWritableDateTime" name="void setHourOfDay(int)" map="u"/>
  <method class="org.joda.time.ReadWritableDateTime" name="void addDays(int)" map="v"/>
  <method class="org.joda.time.ReadWritableDateTime" name="void setMillisOfDay(int)" map="w"/>
  <method class="org.joda.time.ReadWritableDateTime" name="void addMinutes(int)" map="x"/>
  <method class="org.joda.time.ReadWritableDateTime" name="void addYears(int)" map="y"/>
  <method class="org.joda.time.ReadWritableDateTime" name="void setSecondOfDay(int)" map="z"/>
  <method class="org.joda.time.ReadWritableDateTime" name="void setTime(int, int, int, int)" map="B"/>
  <method class="org.joda.time.ReadWritableDateTime" name="void setDateTime(int, int, int, int, int, int, int)" map="A"/>
  <method class="org.joda.time.ReadWritableDateTime" name="void setDate(int, int, int)" map="B"/>
  <method class="org.joda.time.ReadWritableDateTime" name="void addMillis(int)" map="&#x00a2;"/>
  <method class="org.joda.time.ReadWritableDateTime" name="void addWeekyears(int)" map="&#x00a3;"/>
  <class name="org.joda.time.DateTimeUtils$FixedMillisProvider" map="_A"/>
  <field class="org.joda.time.DateTimeUtils$FixedMillisProvider" name="iMillis" map="B"/>
  <method class="org.joda.time.DateTimeUtils$FixedMillisProvider" name="long getMillis()" map="A"/>
  <class name="org.joda.time.DateTimeUtils$OffsetMillisProvider" map="_B"/>
  <field class="org.joda.time.DateTimeUtils$OffsetMillisProvider" name="iMillis" map="A"/>
  <method class="org.joda.time.DateTimeUtils$OffsetMillisProvider" name="long getMillis()" map="A"/>
  <class name="org.joda.time.DateTimeUtils$MillisProvider" map="_C"/>
  <method class="org.joda.time.DateTimeUtils$MillisProvider" name="long getMillis()" map="A"/>
  <class name="org.joda.time.DateTimeUtils$SystemMillisProvider" map="_D"/>
  <method class="org.joda.time.DateTimeUtils$SystemMillisProvider" name="long getMillis()" map="A"/>
  <class name="org.joda.time.DateTimeUtils" map="X"/>
  <field class="org.joda.time.DateTimeUtils" name="cMillisProvider" map="A"/>
  <field class="org.joda.time.DateTimeUtils" name="SYSTEM_MILLIS_PROVIDER" map="B"/>
  <method class="org.joda.time.DateTimeUtils" name="long getDurationMillis(org.joda.time.ReadableDuration)" map="A"/>
  <method class="org.joda.time.DateTimeUtils" name="long currentTimeMillis()" map="A"/>
  <method class="org.joda.time.DateTimeUtils" name="org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)" map="A"/>
  <method class="org.joda.time.DateTimeUtils" name="long getInstantMillis(org.joda.time.ReadableInstant)" map="B"/>
  <method class="org.joda.time.DateTimeUtils" name="org.joda.time.Chronology getIntervalChronology(org.joda.time.ReadableInterval)" map="A"/>
  <method class="org.joda.time.DateTimeUtils" name="org.joda.time.PeriodType getPeriodType(org.joda.time.PeriodType)" map="A"/>
  <method class="org.joda.time.DateTimeUtils" name="void setCurrentMillisOffset(long)" map="A"/>
  <method class="org.joda.time.DateTimeUtils" name="void checkPermission()" map="B"/>
  <method class="org.joda.time.DateTimeUtils" name="org.joda.time.Chronology getIntervalChronology(org.joda.time.ReadableInstant, org.joda.time.ReadableInstant)" map="A"/>
  <method class="org.joda.time.DateTimeUtils" name="org.joda.time.ReadableInterval getReadableInterval(org.joda.time.ReadableInterval)" map="B"/>
  <method class="org.joda.time.DateTimeUtils" name="void setCurrentMillisFixed(long)" map="B"/>
  <method class="org.joda.time.DateTimeUtils" name="boolean isContiguous(org.joda.time.ReadablePartial)" map="A"/>
  <method class="org.joda.time.DateTimeUtils" name="void setCurrentMillisSystem()" map="C"/>
  <method class="org.joda.time.DateTimeUtils" name="org.joda.time.Chronology getChronology(org.joda.time.Chronology)" map="A"/>
  <method class="org.joda.time.DateTimeUtils" name="org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)" map="A"/>
  <class name="org.joda.time.Minutes" map="Y"/>
  <field class="org.joda.time.Minutes" name="TWO" map="Y"/>
  <field class="org.joda.time.Minutes" name="ZERO" map="Z"/>
  <field class="org.joda.time.Minutes" name="ONE" map="_"/>
  <field class="org.joda.time.Minutes" name="THREE" map="a"/>
  <field class="org.joda.time.Minutes" name="MAX_VALUE" map="b"/>
  <field class="org.joda.time.Minutes" name="PARSER" map="c"/>
  <field class="org.joda.time.Minutes" name="MIN_VALUE" map="d"/>
  <field class="org.joda.time.Minutes" name="serialVersionUID" map="e"/>
  <method class="org.joda.time.Minutes" name="org.joda.time.Minutes parseMinutes(java.lang.String)" map="D"/>
  <method class="org.joda.time.Minutes" name="boolean isLessThan(org.joda.time.Minutes)" map="A"/>
  <method class="org.joda.time.Minutes" name="org.joda.time.Minutes minutesBetween(org.joda.time.ReadableInstant, org.joda.time.ReadableInstant)" map="D"/>
  <method class="org.joda.time.Minutes" name="java.lang.String toString()" map="toString"/>
  <method class="org.joda.time.Minutes" name="boolean isGreaterThan(org.joda.time.Minutes)" map="B"/>
  <method class="org.joda.time.Minutes" name="org.joda.time.DurationFieldType getFieldType()" map="e"/>
  <method class="org.joda.time.Minutes" name="org.joda.time.Minutes minus(org.joda.time.Minutes)" map="C"/>
  <method class="org.joda.time.Minutes" name="org.joda.time.Minutes minutes(int)" map="&#x00c1;"/>
  <method class="org.joda.time.Minutes" name="org.joda.time.PeriodType getPeriodType()" map="C"/>
  <method class="org.joda.time.Minutes" name="org.joda.time.Hours toStandardHours()" map="r"/>
  <method class="org.joda.time.Minutes" name="java.lang.Object readResolve()" map="s"/>
  <method class="org.joda.time.Minutes" name="org.joda.time.Minutes standardMinutesIn(org.joda.time.ReadablePeriod)" map="J"/>
  <method class="org.joda.time.Minutes" name="org.joda.time.Minutes minus(int)" map="&#x00c2;"/>
  <method class="org.joda.time.Minutes" name="org.joda.time.Minutes dividedBy(int)" map="&#x00c3;"/>
  <method class="org.joda.time.Minutes" name="org.joda.time.Minutes minutesIn(org.joda.time.ReadableInterval)" map="E"/>
  <method class="org.joda.time.Minutes" name="org.joda.time.Minutes multipliedBy(int)" map="&#x00c4;"/>
  <method class="org.joda.time.Minutes" name="org.joda.time.Days toStandardDays()" map="t"/>
  <method class="org.joda.time.Minutes" name="org.joda.time.Weeks toStandardWeeks()" map="u"/>
  <method class="org.joda.time.Minutes" name="org.joda.time.Minutes negated()" map="v"/>
  <method class="org.joda.time.Minutes" name="org.joda.time.Minutes plus(int)" map="&#x00c5;"/>
  <method class="org.joda.time.Minutes" name="org.joda.time.Minutes plus(org.joda.time.Minutes)" map="D"/>
  <method class="org.joda.time.Minutes" name="org.joda.time.Seconds toStandardSeconds()" map="w"/>
  <method class="org.joda.time.Minutes" name="org.joda.time.Duration toStandardDuration()" map="x"/>
  <method class="org.joda.time.Minutes" name="org.joda.time.Minutes minutesBetween(org.joda.time.ReadablePartial, org.joda.time.ReadablePartial)" map="D"/>
  <method class="org.joda.time.Minutes" name="int getMinutes()" map="y"/>
  <class name="org.joda.time.Partial$Property" map="_A"/>
  <field class="org.joda.time.Partial$Property" name="iPartial" map="A"/>
  <field class="org.joda.time.Partial$Property" name="iFieldIndex" map="B"/>
  <field class="org.joda.time.Partial$Property" name="serialVersionUID" map="C"/>
  <method class="org.joda.time.Partial$Property" name="org.joda.time.Partial setCopy(java.lang.String)" map="A"/>
  <method class="org.joda.time.Partial$Property" name="org.joda.time.Partial setCopy(java.lang.String, java.util.Locale)" map="A"/>
  <method class="org.joda.time.Partial$Property" name="org.joda.time.ReadablePartial getReadablePartial()" map="N"/>
  <method class="org.joda.time.Partial$Property" name="org.joda.time.Partial setCopy(int)" map="A"/>
  <method class="org.joda.time.Partial$Property" name="org.joda.time.Partial withMaximumValue()" map="O"/>
  <method class="org.joda.time.Partial$Property" name="org.joda.time.Partial addToCopy(int)" map="B"/>
  <method class="org.joda.time.Partial$Property" name="org.joda.time.Partial getPartial()" map="P"/>
  <method class="org.joda.time.Partial$Property" name="int get()" map="J"/>
  <method class="org.joda.time.Partial$Property" name="org.joda.time.Partial withMinimumValue()" map="Q"/>
  <method class="org.joda.time.Partial$Property" name="org.joda.time.Partial addWrapFieldToCopy(int)" map="C"/>
  <method class="org.joda.time.Partial$Property" name="org.joda.time.DateTimeField getField()" map="C"/>
  <class name="org.joda.time.Partial" map="Z"/>
  <field class="org.joda.time.Partial" name="iValues" map="Y"/>
  <field class="org.joda.time.Partial" name="iFormatter" map="Z"/>
  <field class="org.joda.time.Partial" name="iChronology" map="_"/>
  <field class="org.joda.time.Partial" name="iTypes" map="a"/>
  <field class="org.joda.time.Partial" name="serialVersionUID" map="b"/>
  <method class="org.joda.time.Partial" name="java.lang.String toStringList()" map="&#x00d3;"/>
  <method class="org.joda.time.Partial" name="java.lang.String toString(java.lang.String, java.util.Locale)" map="D"/>
  <method class="org.joda.time.Partial" name="org.joda.time.DateTimeField getField(int, org.joda.time.Chronology)" map="A"/>
  <method class="org.joda.time.Partial" name="org.joda.time.Partial withField(org.joda.time.DateTimeFieldType, int)" map="D"/>
  <method class="org.joda.time.Partial" name="org.joda.time.DateTimeFieldType getFieldType(int)" map="B"/>
  <method class="org.joda.time.Partial" name="org.joda.time.Partial with(org.joda.time.DateTimeFieldType, int)" map="E"/>
  <method class="org.joda.time.Partial" name="org.joda.time.Partial withFieldAddWrapped(org.joda.time.DurationFieldType, int)" map="D"/>
  <method class="org.joda.time.Partial" name="java.lang.String toString()" map="toString"/>
  <method class="org.joda.time.Partial" name="org.joda.time.DateTimeFieldType[] getFieldTypes()" map="C"/>
  <method class="org.joda.time.Partial" name="org.joda.time.Partial withPeriodAdded(org.joda.time.ReadablePeriod, int)" map="D"/>
  <method class="org.joda.time.Partial" name="org.joda.time.Chronology getChronology()" map="B"/>
  <method class="org.joda.time.Partial" name="int getValue(int)" map="C"/>
  <method class="org.joda.time.Partial" name="org.joda.time.Partial withFieldAdded(org.joda.time.DurationFieldType, int)" map="E"/>
  <method class="org.joda.time.Partial" name="org.joda.time.Partial minus(org.joda.time.ReadablePeriod)" map="G"/>
  <method class="org.joda.time.Partial" name="org.joda.time.Partial withChronologyRetainFields(org.joda.time.Chronology)" map="A"/>
  <method class="org.joda.time.Partial" name="org.joda.time.format.DateTimeFormatter getFormatter()" map="&#x00d4;"/>
  <method class="org.joda.time.Partial" name="boolean isMatch(org.joda.time.ReadablePartial)" map="G"/>
  <method class="org.joda.time.Partial" name="org.joda.time.Partial without(org.joda.time.DateTimeFieldType)" map="H"/>
  <method class="org.joda.time.Partial" name="int size()" map="A"/>
  <method class="org.joda.time.Partial" name="org.joda.time.Partial plus(org.joda.time.ReadablePeriod)" map="H"/>
  <method class="org.joda.time.Partial" name="boolean isMatch(org.joda.time.ReadableInstant)" map="B"/>
  <method class="org.joda.time.Partial" name="int[] getValues()" map="E"/>
  <method class="org.joda.time.Partial" name="java.lang.String toString(java.lang.String)" map="D"/>
  <method class="org.joda.time.Partial" name="org.joda.time.Partial$Property property(org.joda.time.DateTimeFieldType)" map="I"/>
  <class name="org.joda.time.MutableDateTime$Property" map="_A"/>
  <field class="org.joda.time.MutableDateTime$Property" name="iInstant" map="K"/>
  <field class="org.joda.time.MutableDateTime$Property" name="iField" map="L"/>
  <field class="org.joda.time.MutableDateTime$Property" name="serialVersionUID" map="M"/>
  <method class="org.joda.time.MutableDateTime$Property" name="void readObject(java.io.ObjectInputStream)" map="D"/>
  <method class="org.joda.time.MutableDateTime$Property" name="org.joda.time.MutableDateTime roundHalfEven()" map="r"/>
  <method class="org.joda.time.MutableDateTime$Property" name="org.joda.time.MutableDateTime set(java.lang.String)" map="D"/>
  <method class="org.joda.time.MutableDateTime$Property" name="org.joda.time.MutableDateTime roundHalfFloor()" map="s"/>
  <method class="org.joda.time.MutableDateTime$Property" name="org.joda.time.MutableDateTime addWrapField(int)" map="K"/>
  <method class="org.joda.time.MutableDateTime$Property" name="org.joda.time.MutableDateTime add(long)" map="C"/>
  <method class="org.joda.time.MutableDateTime$Property" name="org.joda.time.MutableDateTime roundCeiling()" map="t"/>
  <method class="org.joda.time.MutableDateTime$Property" name="org.joda.time.MutableDateTime add(int)" map="L"/>
  <method class="org.joda.time.MutableDateTime$Property" name="org.joda.time.MutableDateTime set(int)" map="M"/>
  <method class="org.joda.time.MutableDateTime$Property" name="void writeObject(java.io.ObjectOutputStream)" map="D"/>
  <method class="org.joda.time.MutableDateTime$Property" name="long getMillis()" map="Q"/>
  <method class="org.joda.time.MutableDateTime$Property" name="org.joda.time.MutableDateTime roundHalfCeiling()" map="u"/>
  <method class="org.joda.time.MutableDateTime$Property" name="org.joda.time.MutableDateTime roundFloor()" map="v"/>
  <method class="org.joda.time.MutableDateTime$Property" name="org.joda.time.DateTimeField getField()" map="H"/>
  <method class="org.joda.time.MutableDateTime$Property" name="org.joda.time.MutableDateTime getMutableDateTime()" map="w"/>
  <method class="org.joda.time.MutableDateTime$Property" name="org.joda.time.Chronology getChronology()" map="G"/>
  <method class="org.joda.time.MutableDateTime$Property" name="org.joda.time.MutableDateTime set(java.lang.String, java.util.Locale)" map="D"/>
  <class name="org.joda.time.MutableDateTime" map="_"/>
  <field class="org.joda.time.MutableDateTime" name="ROUND_FLOOR" map="G"/>
  <field class="org.joda.time.MutableDateTime" name="iRoundingField" map="H"/>
  <field class="org.joda.time.MutableDateTime" name="serialVersionUID" map="I"/>
  <field class="org.joda.time.MutableDateTime" name="ROUND_HALF_EVEN" map="J"/>
  <field class="org.joda.time.MutableDateTime" name="ROUND_NONE" map="K"/>
  <field class="org.joda.time.MutableDateTime" name="ROUND_CEILING" map="L"/>
  <field class="org.joda.time.MutableDateTime" name="iRoundingMode" map="M"/>
  <field class="org.joda.time.MutableDateTime" name="ROUND_HALF_FLOOR" map="N"/>
  <field class="org.joda.time.MutableDateTime" name="ROUND_HALF_CEILING" map="O"/>
  <method class="org.joda.time.MutableDateTime" name="void setTime(int, int, int, int)" map="B"/>
  <method class="org.joda.time.MutableDateTime" name="void setMillisOfSecond(int)" map="r"/>
  <method class="org.joda.time.MutableDateTime" name="void setTime(org.joda.time.ReadableInstant)" map="E"/>
  <method class="org.joda.time.MutableDateTime" name="void add(long)" map="K"/>
  <method class="org.joda.time.MutableDateTime" name="org.joda.time.MutableDateTime$Property minuteOfDay()" map="&#x00a4;"/>
  <method class="org.joda.time.MutableDateTime" name="void setZoneRetainFields(org.joda.time.DateTimeZone)" map="F"/>
  <method class="org.joda.time.MutableDateTime" name="org.joda.time.MutableDateTime$Property millisOfSecond()" map="&#x00a5;"/>
  <method class="org.joda.time.MutableDateTime" name="org.joda.time.MutableDateTime$Property weekOfWeekyear()" map="&#x00aa;"/>
  <method class="org.joda.time.MutableDateTime" name="void setWeekyear(int)" map="n"/>
  <method class="org.joda.time.MutableDateTime" name="void setDayOfWeek(int)" map="o"/>
  <method class="org.joda.time.MutableDateTime" name="void setWeekOfWeekyear(int)" map="f"/>
  <method class="org.joda.time.MutableDateTime" name="void setMonthOfYear(int)" map="k"/>
  <method class="org.joda.time.MutableDateTime" name="org.joda.time.MutableDateTime$Property weekyear()" map="&#x00b5;"/>
  <method class="org.joda.time.MutableDateTime" name="void add(org.joda.time.ReadableDuration, int)" map="C"/>
  <method class="org.joda.time.MutableDateTime" name="void setMillis(org.joda.time.ReadableInstant)" map="D"/>
  <method class="org.joda.time.MutableDateTime" name="void add(org.joda.time.DurationFieldType, int)" map="B"/>
  <method class="org.joda.time.MutableDateTime" name="org.joda.time.MutableDateTime$Property hourOfDay()" map="&#x00ba;"/>
  <method class="org.joda.time.MutableDateTime" name="org.joda.time.MutableDateTime$Property secondOfDay()" map="&#x00c0;"/>
  <method class="org.joda.time.MutableDateTime" name="void setMillisOfDay(int)" map="w"/>
  <method class="org.joda.time.MutableDateTime" name="void setZone(org.joda.time.DateTimeZone)" map="E"/>
  <method class="org.joda.time.MutableDateTime" name="void setRounding(org.joda.time.DateTimeField)" map="B"/>
  <method class="org.joda.time.MutableDateTime" name="org.joda.time.MutableDateTime$Property yearOfCentury()" map="&#x00c1;"/>
  <method class="org.joda.time.MutableDateTime" name="org.joda.time.MutableDateTime$Property property(org.joda.time.DateTimeFieldType)" map="D"/>
  <method class="org.joda.time.MutableDateTime" name="void setDayOfYear(int)" map="t"/>
  <method class="org.joda.time.MutableDateTime" name="void setSecondOfDay(int)" map="z"/>
  <method class="org.joda.time.MutableDateTime" name="void add(org.joda.time.ReadablePeriod, int)" map="B"/>
  <method class="org.joda.time.MutableDateTime" name="void setDate(int, int, int)" map="B"/>
  <method class="org.joda.time.MutableDateTime" name="void addWeeks(int)" map="l"/>
  <method class="org.joda.time.MutableDateTime" name="void setMinuteOfDay(int)" map="q"/>
  <method class="org.joda.time.MutableDateTime" name="void setHourOfDay(int)" map="u"/>
  <method class="org.joda.time.MutableDateTime" name="void set(org.joda.time.DateTimeFieldType, int)" map="B"/>
  <method class="org.joda.time.MutableDateTime" name="void addMillis(int)" map="&#x00a2;"/>
  <method class="org.joda.time.MutableDateTime" name="void setYear(int)" map="i"/>
  <method class="org.joda.time.MutableDateTime" name="void setChronology(org.joda.time.Chronology)" map="C"/>
  <method class="org.joda.time.MutableDateTime" name="org.joda.time.MutableDateTime$Property year()" map="&#x00c2;"/>
  <method class="org.joda.time.MutableDateTime" name="void addHours(int)" map="m"/>
  <method class="org.joda.time.MutableDateTime" name="void setMillis(long)" map="G"/>
  <method class="org.joda.time.MutableDateTime" name="org.joda.time.MutableDateTime copy()" map="&#x00c3;"/>
  <method class="org.joda.time.MutableDateTime" name="void setDateTime(int, int, int, int, int, int, int)" map="A"/>
  <method class="org.joda.time.MutableDateTime" name="org.joda.time.MutableDateTime$Property era()" map="&#x00c4;"/>
  <method class="org.joda.time.MutableDateTime" name="org.joda.time.DateTimeField getRoundingField()" map="&#x00c5;"/>
  <method class="org.joda.time.MutableDateTime" name="void setRounding(org.joda.time.DateTimeField, int)" map="A"/>
  <method class="org.joda.time.MutableDateTime" name="java.lang.String toString()" map="toString"/>
  <method class="org.joda.time.MutableDateTime" name="org.joda.time.MutableDateTime$Property dayOfMonth()" map="&#x00c6;"/>
  <method class="org.joda.time.MutableDateTime" name="org.joda.time.MutableDateTime$Property minuteOfHour()" map="&#x00c7;"/>
  <method class="org.joda.time.MutableDateTime" name="void add(org.joda.time.ReadableDuration)" map="E"/>
  <method class="org.joda.time.MutableDateTime" name="org.joda.time.MutableDateTime$Property yearOfEra()" map="&#x00c8;"/>
  <method class="org.joda.time.MutableDateTime" name="org.joda.time.MutableDateTime$Property millisOfDay()" map="&#x00c9;"/>
  <method class="org.joda.time.MutableDateTime" name="void addMonths(int)" map="h"/>
  <method class="org.joda.time.MutableDateTime" name="void setTime(long)" map="L"/>
  <method class="org.joda.time.MutableDateTime" name="void add(org.joda.time.ReadablePeriod)" map="C"/>
  <method class="org.joda.time.MutableDateTime" name="org.joda.time.MutableDateTime$Property dayOfWeek()" map="&#x00ca;"/>
  <method class="org.joda.time.MutableDateTime" name="void setMinuteOfHour(int)" map="p"/>
  <method class="org.joda.time.MutableDateTime" name="org.joda.time.MutableDateTime$Property dayOfYear()" map="&#x00cb;"/>
  <method class="org.joda.time.MutableDateTime" name="org.joda.time.MutableDateTime$Property centuryOfEra()" map="&#x00cc;"/>
  <method class="org.joda.time.MutableDateTime" name="void addWeekyears(int)" map="&#x00a3;"/>
  <method class="org.joda.time.MutableDateTime" name="int getRoundingMode()" map="&#x00cd;"/>
  <method class="org.joda.time.MutableDateTime" name="org.joda.time.MutableDateTime$Property monthOfYear()" map="&#x00ce;"/>
  <method class="org.joda.time.MutableDateTime" name="void setDate(org.joda.time.ReadableInstant)" map="F"/>
  <method class="org.joda.time.MutableDateTime" name="void addYears(int)" map="y"/>
  <method class="org.joda.time.MutableDateTime" name="void addMinutes(int)" map="x"/>
  <method class="org.joda.time.MutableDateTime" name="void addSeconds(int)" map="j"/>
  <method class="org.joda.time.MutableDateTime" name="void addDays(int)" map="v"/>
  <method class="org.joda.time.MutableDateTime" name="void setDate(long)" map="M"/>
  <method class="org.joda.time.MutableDateTime" name="void setSecondOfMinute(int)" map="s"/>
  <method class="org.joda.time.MutableDateTime" name="void setDayOfMonth(int)" map="g"/>
  <method class="org.joda.time.MutableDateTime" name="java.lang.Object clone()" map="clone"/>
  <method class="org.joda.time.MutableDateTime" name="org.joda.time.MutableDateTime$Property secondOfMinute()" map="&#x00cf;"/>
  <class name="org.joda.time.Instant" map="a"/>
  <field class="org.joda.time.Instant" name="iMillis" map="A"/>
  <field class="org.joda.time.Instant" name="serialVersionUID" map="B"/>
  <method class="org.joda.time.Instant" name="org.joda.time.DateTime toDateTimeISO()" map="b"/>
  <method class="org.joda.time.Instant" name="org.joda.time.MutableDateTime toMutableDateTimeISO()" map="Y"/>
  <method class="org.joda.time.Instant" name="org.joda.time.Instant plus(org.joda.time.ReadableDuration)" map="A"/>
  <method class="org.joda.time.Instant" name="org.joda.time.Instant plus(long)" map="D"/>
  <method class="org.joda.time.Instant" name="org.joda.time.Instant minus(org.joda.time.ReadableDuration)" map="B"/>
  <method class="org.joda.time.Instant" name="org.joda.time.Instant toInstant()" map="A"/>
  <method class="org.joda.time.Instant" name="long getMillis()" map="B"/>
  <method class="org.joda.time.Instant" name="org.joda.time.Instant withDurationAdded(org.joda.time.ReadableDuration, int)" map="A"/>
  <method class="org.joda.time.Instant" name="org.joda.time.MutableDateTime toMutableDateTime()" map="J"/>
  <method class="org.joda.time.Instant" name="org.joda.time.DateTime toDateTime()" map="G"/>
  <method class="org.joda.time.Instant" name="org.joda.time.Instant withDurationAdded(long, int)" map="A"/>
  <method class="org.joda.time.Instant" name="org.joda.time.Instant minus(long)" map="E"/>
  <method class="org.joda.time.Instant" name="org.joda.time.Chronology getChronology()" map="D"/>
  <method class="org.joda.time.Instant" name="org.joda.time.Instant withMillis(long)" map="F"/>
  <class name="org.joda.time.ReadWritableInterval" map="b"/>
  <method class="org.joda.time.ReadWritableInterval" name="void setStartMillis(long)" map="F"/>
  <method class="org.joda.time.ReadWritableInterval" name="void setDurationAfterStart(org.joda.time.ReadableDuration)" map="C"/>
  <method class="org.joda.time.ReadWritableInterval" name="void setChronology(org.joda.time.Chronology)" map="B"/>
  <method class="org.joda.time.ReadWritableInterval" name="void setPeriodBeforeEnd(org.joda.time.ReadablePeriod)" map="C"/>
  <method class="org.joda.time.ReadWritableInterval" name="void setInterval(long, long)" map="B"/>
  <method class="org.joda.time.ReadWritableInterval" name="void setEnd(org.joda.time.ReadableInstant)" map="F"/>
  <method class="org.joda.time.ReadWritableInterval" name="void setEndMillis(long)" map="G"/>
  <method class="org.joda.time.ReadWritableInterval" name="void setStart(org.joda.time.ReadableInstant)" map="G"/>
  <method class="org.joda.time.ReadWritableInterval" name="void setInterval(org.joda.time.ReadableInstant, org.joda.time.ReadableInstant)" map="A"/>
  <method class="org.joda.time.ReadWritableInterval" name="void setPeriodAfterStart(org.joda.time.ReadablePeriod)" map="D"/>
  <method class="org.joda.time.ReadWritableInterval" name="void setInterval(org.joda.time.ReadableInterval)" map="H"/>
  <method class="org.joda.time.ReadWritableInterval" name="void setDurationBeforeEnd(org.joda.time.ReadableDuration)" map="D"/>
  <class name="org.joda.time.MutableInterval" map="c"/>
  <field class="org.joda.time.MutableInterval" name="serialVersionUID" map="F"/>
  <method class="org.joda.time.MutableInterval" name="void setStartMillis(long)" map="F"/>
  <method class="org.joda.time.MutableInterval" name="void setDurationAfterStart(org.joda.time.ReadableDuration)" map="C"/>
  <method class="org.joda.time.MutableInterval" name="void setChronology(org.joda.time.Chronology)" map="B"/>
  <method class="org.joda.time.MutableInterval" name="void setPeriodBeforeEnd(org.joda.time.ReadablePeriod)" map="C"/>
  <method class="org.joda.time.MutableInterval" name="org.joda.time.MutableInterval copy()" map="N"/>
  <method class="org.joda.time.MutableInterval" name="void setInterval(long, long)" map="B"/>
  <method class="org.joda.time.MutableInterval" name="void setDurationBeforeEnd(long)" map="H"/>
  <method class="org.joda.time.MutableInterval" name="void setEnd(org.joda.time.ReadableInstant)" map="F"/>
  <method class="org.joda.time.MutableInterval" name="void setEndMillis(long)" map="G"/>
  <method class="org.joda.time.MutableInterval" name="void setStart(org.joda.time.ReadableInstant)" map="G"/>
  <method class="org.joda.time.MutableInterval" name="void setInterval(org.joda.time.ReadableInstant, org.joda.time.ReadableInstant)" map="A"/>
  <method class="org.joda.time.MutableInterval" name="void setPeriodAfterStart(org.joda.time.ReadablePeriod)" map="D"/>
  <method class="org.joda.time.MutableInterval" name="java.lang.Object clone()" map="clone"/>
  <method class="org.joda.time.MutableInterval" name="void setDurationAfterStart(long)" map="I"/>
  <method class="org.joda.time.MutableInterval" name="void setInterval(org.joda.time.ReadableInterval)" map="H"/>
  <method class="org.joda.time.MutableInterval" name="void setDurationBeforeEnd(org.joda.time.ReadableDuration)" map="D"/>
  <class name="org.joda.time.Weeks" map="d"/>
  <field class="org.joda.time.Weeks" name="TWO" map="f"/>
  <field class="org.joda.time.Weeks" name="ZERO" map="g"/>
  <field class="org.joda.time.Weeks" name="ONE" map="h"/>
  <field class="org.joda.time.Weeks" name="THREE" map="i"/>
  <field class="org.joda.time.Weeks" name="MAX_VALUE" map="j"/>
  <field class="org.joda.time.Weeks" name="PARSER" map="k"/>
  <field class="org.joda.time.Weeks" name="MIN_VALUE" map="l"/>
  <field class="org.joda.time.Weeks" name="serialVersionUID" map="m"/>
  <method class="org.joda.time.Weeks" name="boolean isLessThan(org.joda.time.Weeks)" map="A"/>
  <method class="org.joda.time.Weeks" name="org.joda.time.Weeks plus(int)" map="&#x00c6;"/>
  <method class="org.joda.time.Weeks" name="boolean isGreaterThan(org.joda.time.Weeks)" map="B"/>
  <method class="org.joda.time.Weeks" name="org.joda.time.Weeks negated()" map="z"/>
  <method class="org.joda.time.Weeks" name="org.joda.time.Weeks plus(org.joda.time.Weeks)" map="C"/>
  <method class="org.joda.time.Weeks" name="java.lang.String toString()" map="toString"/>
  <method class="org.joda.time.Weeks" name="org.joda.time.Weeks standardWeeksIn(org.joda.time.ReadablePeriod)" map="K"/>
  <method class="org.joda.time.Weeks" name="org.joda.time.Weeks weeksBetween(org.joda.time.ReadableInstant, org.joda.time.ReadableInstant)" map="E"/>
  <method class="org.joda.time.Weeks" name="org.joda.time.DurationFieldType getFieldType()" map="e"/>
  <method class="org.joda.time.Weeks" name="int getWeeks()" map="&#x00a2;"/>
  <method class="org.joda.time.Weeks" name="org.joda.time.PeriodType getPeriodType()" map="C"/>
  <method class="org.joda.time.Weeks" name="org.joda.time.Hours toStandardHours()" map="&#x00a3;"/>
  <method class="org.joda.time.Weeks" name="org.joda.time.Weeks minus(int)" map="&#x00c7;"/>
  <method class="org.joda.time.Weeks" name="java.lang.Object readResolve()" map="&#x00a4;"/>
  <method class="org.joda.time.Weeks" name="org.joda.time.Weeks parseWeeks(java.lang.String)" map="E"/>
  <method class="org.joda.time.Weeks" name="org.joda.time.Weeks weeksIn(org.joda.time.ReadableInterval)" map="F"/>
  <method class="org.joda.time.Weeks" name="org.joda.time.Weeks minus(org.joda.time.Weeks)" map="D"/>
  <method class="org.joda.time.Weeks" name="org.joda.time.Weeks weeks(int)" map="&#x00c8;"/>
  <method class="org.joda.time.Weeks" name="org.joda.time.Days toStandardDays()" map="&#x00a5;"/>
  <method class="org.joda.time.Weeks" name="org.joda.time.Weeks dividedBy(int)" map="&#x00c9;"/>
  <method class="org.joda.time.Weeks" name="org.joda.time.Weeks weeksBetween(org.joda.time.ReadablePartial, org.joda.time.ReadablePartial)" map="E"/>
  <method class="org.joda.time.Weeks" name="org.joda.time.Minutes toStandardMinutes()" map="&#x00aa;"/>
  <method class="org.joda.time.Weeks" name="org.joda.time.Weeks multipliedBy(int)" map="&#x00ca;"/>
  <method class="org.joda.time.Weeks" name="org.joda.time.Seconds toStandardSeconds()" map="&#x00b5;"/>
  <method class="org.joda.time.Weeks" name="org.joda.time.Duration toStandardDuration()" map="&#x00ba;"/>
  <class name="org.joda.time.TimeOfDay$Property" map="_A"/>
  <field class="org.joda.time.TimeOfDay$Property" name="iTimeOfDay" map="D"/>
  <field class="org.joda.time.TimeOfDay$Property" name="iFieldIndex" map="E"/>
  <field class="org.joda.time.TimeOfDay$Property" name="serialVersionUID" map="F"/>
  <method class="org.joda.time.TimeOfDay$Property" name="org.joda.time.TimeOfDay withMinimumValue()" map="R"/>
  <method class="org.joda.time.TimeOfDay$Property" name="org.joda.time.ReadablePartial getReadablePartial()" map="N"/>
  <method class="org.joda.time.TimeOfDay$Property" name="org.joda.time.TimeOfDay setCopy(java.lang.String, java.util.Locale)" map="B"/>
  <method class="org.joda.time.TimeOfDay$Property" name="org.joda.time.TimeOfDay addWrapFieldToCopy(int)" map="D"/>
  <method class="org.joda.time.TimeOfDay$Property" name="org.joda.time.TimeOfDay setCopy(java.lang.String)" map="B"/>
  <method class="org.joda.time.TimeOfDay$Property" name="org.joda.time.TimeOfDay getTimeOfDay()" map="S"/>
  <method class="org.joda.time.TimeOfDay$Property" name="int get()" map="J"/>
  <method class="org.joda.time.TimeOfDay$Property" name="org.joda.time.TimeOfDay addToCopy(int)" map="E"/>
  <method class="org.joda.time.TimeOfDay$Property" name="org.joda.time.TimeOfDay addNoWrapToCopy(int)" map="F"/>
  <method class="org.joda.time.TimeOfDay$Property" name="org.joda.time.DateTimeField getField()" map="C"/>
  <method class="org.joda.time.TimeOfDay$Property" name="org.joda.time.TimeOfDay withMaximumValue()" map="T"/>
  <method class="org.joda.time.TimeOfDay$Property" name="org.joda.time.TimeOfDay setCopy(int)" map="G"/>
  <class name="org.joda.time.TimeOfDay" map="e"/>
  <field class="org.joda.time.TimeOfDay" name="HOUR_OF_DAY" map="f"/>
  <field class="org.joda.time.TimeOfDay" name="FIELD_TYPES" map="g"/>
  <field class="org.joda.time.TimeOfDay" name="MIDNIGHT" map="h"/>
  <field class="org.joda.time.TimeOfDay" name="SECOND_OF_MINUTE" map="i"/>
  <field class="org.joda.time.TimeOfDay" name="MINUTE_OF_HOUR" map="j"/>
  <field class="org.joda.time.TimeOfDay" name="MILLIS_OF_SECOND" map="k"/>
  <field class="org.joda.time.TimeOfDay" name="serialVersionUID" map="l"/>
  <method class="org.joda.time.TimeOfDay" name="org.joda.time.TimeOfDay minus(org.joda.time.ReadablePeriod)" map="I"/>
  <method class="org.joda.time.TimeOfDay" name="org.joda.time.LocalTime toLocalTime()" map="&#x00d5;"/>
  <method class="org.joda.time.TimeOfDay" name="org.joda.time.TimeOfDay$Property property(org.joda.time.DateTimeFieldType)" map="J"/>
  <method class="org.joda.time.TimeOfDay" name="org.joda.time.TimeOfDay minusMillis(int)" map="&#x00c7;"/>
  <method class="org.joda.time.TimeOfDay" name="org.joda.time.DateTime toDateTimeToday(org.joda.time.DateTimeZone)" map="H"/>
  <method class="org.joda.time.TimeOfDay" name="org.joda.time.TimeOfDay minusHours(int)" map="&#x00c8;"/>
  <method class="org.joda.time.TimeOfDay" name="org.joda.time.TimeOfDay fromDateFields(java.util.Date)" map="D"/>
  <method class="org.joda.time.TimeOfDay" name="int getMillisOfSecond()" map="&#x00d6;"/>
  <method class="org.joda.time.TimeOfDay" name="org.joda.time.TimeOfDay fromMillisOfDay(long, org.joda.time.Chronology)" map="B"/>
  <method class="org.joda.time.TimeOfDay" name="org.joda.time.TimeOfDay plusSeconds(int)" map="&#x00c9;"/>
  <method class="org.joda.time.TimeOfDay" name="org.joda.time.TimeOfDay withMillisOfSecond(int)" map="&#x00ca;"/>
  <method class="org.joda.time.TimeOfDay" name="org.joda.time.TimeOfDay fromMillisOfDay(long)" map="E"/>
  <method class="org.joda.time.TimeOfDay" name="org.joda.time.TimeOfDay withHourOfDay(int)" map="&#x00cb;"/>
  <method class="org.joda.time.TimeOfDay" name="org.joda.time.TimeOfDay plusMinutes(int)" map="&#x00cc;"/>
  <method class="org.joda.time.TimeOfDay" name="org.joda.time.DateTimeField getField(int, org.joda.time.Chronology)" map="A"/>
  <method class="org.joda.time.TimeOfDay" name="org.joda.time.DateTimeFieldType getFieldType(int)" map="B"/>
  <method class="org.joda.time.TimeOfDay" name="java.lang.String toString()" map="toString"/>
  <method class="org.joda.time.TimeOfDay" name="org.joda.time.TimeOfDay plusMillis(int)" map="&#x00cd;"/>
  <method class="org.joda.time.TimeOfDay" name="org.joda.time.TimeOfDay$Property secondOfMinute()" map="&#x00d8;"/>
  <method class="org.joda.time.TimeOfDay" name="org.joda.time.DateTimeFieldType[] getFieldTypes()" map="C"/>
  <method class="org.joda.time.TimeOfDay" name="org.joda.time.TimeOfDay$Property millisOfSecond()" map="&#x00d9;"/>
  <method class="org.joda.time.TimeOfDay" name="org.joda.time.TimeOfDay minusSeconds(int)" map="&#x00ce;"/>
  <method class="org.joda.time.TimeOfDay" name="org.joda.time.TimeOfDay$Property hourOfDay()" map="&#x00da;"/>
  <method class="org.joda.time.TimeOfDay" name="int getMinuteOfHour()" map="&#x00db;"/>
  <method class="org.joda.time.TimeOfDay" name="int size()" map="A"/>
  <method class="org.joda.time.TimeOfDay" name="org.joda.time.TimeOfDay plusHours(int)" map="&#x00cf;"/>
  <method class="org.joda.time.TimeOfDay" name="org.joda.time.DateTime toDateTimeToday()" map="&#x00dc;"/>
  <method class="org.joda.time.TimeOfDay" name="org.joda.time.TimeOfDay minusMinutes(int)" map="&#x00d0;"/>
  <method class="org.joda.time.TimeOfDay" name="org.joda.time.TimeOfDay withFieldAdded(org.joda.time.DurationFieldType, int)" map="F"/>
  <method class="org.joda.time.TimeOfDay" name="org.joda.time.TimeOfDay plus(org.joda.time.ReadablePeriod)" map="J"/>
  <method class="org.joda.time.TimeOfDay" name="org.joda.time.TimeOfDay withChronologyRetainFields(org.joda.time.Chronology)" map="B"/>
  <method class="org.joda.time.TimeOfDay" name="org.joda.time.TimeOfDay withPeriodAdded(org.joda.time.ReadablePeriod, int)" map="E"/>
  <method class="org.joda.time.TimeOfDay" name="org.joda.time.TimeOfDay fromCalendarFields(java.util.Calendar)" map="D"/>
  <method class="org.joda.time.TimeOfDay" name="int getSecondOfMinute()" map="&#x00dd;"/>
  <method class="org.joda.time.TimeOfDay" name="org.joda.time.TimeOfDay withSecondOfMinute(int)" map="&#x00d1;"/>
  <method class="org.joda.time.TimeOfDay" name="org.joda.time.TimeOfDay$Property minuteOfHour()" map="&#x00de;"/>
  <method class="org.joda.time.TimeOfDay" name="int getHourOfDay()" map="&#x00df;"/>
  <method class="org.joda.time.TimeOfDay" name="org.joda.time.TimeOfDay withMinuteOfHour(int)" map="&#x00d2;"/>
  <method class="org.joda.time.TimeOfDay" name="org.joda.time.TimeOfDay withField(org.joda.time.DateTimeFieldType, int)" map="F"/>
  <class name="org.joda.time.ReadableDuration" map="f"/>
  <method class="org.joda.time.ReadableDuration" name="org.joda.time.Period toPeriod()" map="A"/>
  <method class="org.joda.time.ReadableDuration" name="int hashCode()" map="hashCode"/>
  <method class="org.joda.time.ReadableDuration" name="boolean isLongerThan(org.joda.time.ReadableDuration)" map="A"/>
  <method class="org.joda.time.ReadableDuration" name="boolean equals(java.lang.Object)" map="equals"/>
  <method class="org.joda.time.ReadableDuration" name="boolean isShorterThan(org.joda.time.ReadableDuration)" map="B"/>
  <method class="org.joda.time.ReadableDuration" name="long getMillis()" map="B"/>
  <method class="org.joda.time.ReadableDuration" name="boolean isEqual(org.joda.time.ReadableDuration)" map="C"/>
  <method class="org.joda.time.ReadableDuration" name="java.lang.String toString()" map="toString"/>
  <method class="org.joda.time.ReadableDuration" name="org.joda.time.Duration toDuration()" map="C"/>
  <method class="org.joda.time.ReadableDuration" name="int compareTo(java.lang.Object)" map="compareTo"/>
  <class name="org.joda.time.Hours" map="g"/>
  <field class="org.joda.time.Hours" name="PARSER" map="n"/>
  <field class="org.joda.time.Hours" name="MIN_VALUE" map="o"/>
  <field class="org.joda.time.Hours" name="ONE" map="p"/>
  <field class="org.joda.time.Hours" name="SEVEN" map="q"/>
  <field class="org.joda.time.Hours" name="serialVersionUID" map="r"/>
  <field class="org.joda.time.Hours" name="ZERO" map="s"/>
  <field class="org.joda.time.Hours" name="TWO" map="t"/>
  <field class="org.joda.time.Hours" name="EIGHT" map="u"/>
  <field class="org.joda.time.Hours" name="FIVE" map="v"/>
  <field class="org.joda.time.Hours" name="THREE" map="w"/>
  <field class="org.joda.time.Hours" name="FOUR" map="x"/>
  <field class="org.joda.time.Hours" name="SIX" map="y"/>
  <field class="org.joda.time.Hours" name="MAX_VALUE" map="z"/>
  <method class="org.joda.time.Hours" name="org.joda.time.Hours minus(int)" map="&#x00cb;"/>
  <method class="org.joda.time.Hours" name="org.joda.time.Hours hoursBetween(org.joda.time.ReadableInstant, org.joda.time.ReadableInstant)" map="F"/>
  <method class="org.joda.time.Hours" name="int getHours()" map="&#x00c0;"/>
  <method class="org.joda.time.Hours" name="org.joda.time.Hours hoursIn(org.joda.time.ReadableInterval)" map="G"/>
  <method class="org.joda.time.Hours" name="org.joda.time.Hours dividedBy(int)" map="&#x00cc;"/>
  <method class="org.joda.time.Hours" name="org.joda.time.Hours hours(int)" map="&#x00cd;"/>
  <method class="org.joda.time.Hours" name="java.lang.String toString()" map="toString"/>
  <method class="org.joda.time.Hours" name="org.joda.time.Hours plus(org.joda.time.Hours)" map="A"/>
  <method class="org.joda.time.Hours" name="org.joda.time.DurationFieldType getFieldType()" map="e"/>
  <method class="org.joda.time.Hours" name="org.joda.time.Hours multipliedBy(int)" map="&#x00ce;"/>
  <method class="org.joda.time.Hours" name="org.joda.time.PeriodType getPeriodType()" map="C"/>
  <method class="org.joda.time.Hours" name="org.joda.time.Hours hoursBetween(org.joda.time.ReadablePartial, org.joda.time.ReadablePartial)" map="F"/>
  <method class="org.joda.time.Hours" name="org.joda.time.Hours standardHoursIn(org.joda.time.ReadablePeriod)" map="L"/>
  <method class="org.joda.time.Hours" name="java.lang.Object readResolve()" map="&#x00c1;"/>
  <method class="org.joda.time.Hours" name="org.joda.time.Hours plus(int)" map="&#x00cf;"/>
  <method class="org.joda.time.Hours" name="org.joda.time.Hours parseHours(java.lang.String)" map="F"/>
  <method class="org.joda.time.Hours" name="org.joda.time.Days toStandardDays()" map="&#x00c2;"/>
  <method class="org.joda.time.Hours" name="org.joda.time.Hours negated()" map="&#x00c3;"/>
  <method class="org.joda.time.Hours" name="org.joda.time.Minutes toStandardMinutes()" map="&#x00c4;"/>
  <method class="org.joda.time.Hours" name="org.joda.time.Hours minus(org.joda.time.Hours)" map="B"/>
  <method class="org.joda.time.Hours" name="boolean isLessThan(org.joda.time.Hours)" map="C"/>
  <method class="org.joda.time.Hours" name="org.joda.time.Weeks toStandardWeeks()" map="&#x00c5;"/>
  <method class="org.joda.time.Hours" name="org.joda.time.Seconds toStandardSeconds()" map="&#x00c6;"/>
  <method class="org.joda.time.Hours" name="boolean isGreaterThan(org.joda.time.Hours)" map="D"/>
  <method class="org.joda.time.Hours" name="org.joda.time.Duration toStandardDuration()" map="&#x00c7;"/>
  <class name="org.joda.time.DateTimeField" map="h"/>
  <method class="org.joda.time.DateTimeField" name="int[] set(org.joda.time.ReadablePartial, int, int[], java.lang.String, java.util.Locale)" map="A"/>
  <method class="org.joda.time.DateTimeField" name="java.lang.String getAsText(long, java.util.Locale)" map="A"/>
  <method class="org.joda.time.DateTimeField" name="java.lang.String getAsShortText(long, java.util.Locale)" map="B"/>
  <method class="org.joda.time.DateTimeField" name="long roundFloor(long)" map="A"/>
  <method class="org.joda.time.DateTimeField" name="org.joda.time.DurationField getRangeDurationField()" map="A"/>
  <method class="org.joda.time.DateTimeField" name="long addWrapField(long, int)" map="A"/>
  <method class="org.joda.time.DateTimeField" name="org.joda.time.DurationField getLeapDurationField()" map="B"/>
  <method class="org.joda.time.DateTimeField" name="long add(long, long)" map="A"/>
  <method class="org.joda.time.DateTimeField" name="int getMaximumTextLength(java.util.Locale)" map="A"/>
  <method class="org.joda.time.DateTimeField" name="boolean isLenient()" map="C"/>
  <method class="org.joda.time.DateTimeField" name="int[] set(org.joda.time.ReadablePartial, int, int[], int)" map="A"/>
  <method class="org.joda.time.DateTimeField" name="long set(long, java.lang.String)" map="A"/>
  <method class="org.joda.time.DateTimeField" name="java.lang.String getAsShortText(org.joda.time.ReadablePartial, int, java.util.Locale)" map="A"/>
  <method class="org.joda.time.DateTimeField" name="int getLeapAmount(long)" map="B"/>
  <method class="org.joda.time.DateTimeField" name="int getMinimumValue()" map="D"/>
  <method class="org.joda.time.DateTimeField" name="boolean isSupported()" map="E"/>
  <method class="org.joda.time.DateTimeField" name="long add(long, int)" map="B"/>
  <method class="org.joda.time.DateTimeField" name="java.lang.String getAsShortText(long)" map="C"/>
  <method class="org.joda.time.DateTimeField" name="long remainder(long)" map="D"/>
  <method class="org.joda.time.DateTimeField" name="int get(long)" map="E"/>
  <method class="org.joda.time.DateTimeField" name="int getDifference(long, long)" map="B"/>
  <method class="org.joda.time.DateTimeField" name="int[] addWrapPartial(org.joda.time.ReadablePartial, int, int[], int)" map="B"/>
  <method class="org.joda.time.DateTimeField" name="int getMaximumValue()" map="F"/>
  <method class="org.joda.time.DateTimeField" name="long roundHalfFloor(long)" map="F"/>
  <method class="org.joda.time.DateTimeField" name="int[] addWrapField(org.joda.time.ReadablePartial, int, int[], int)" map="C"/>
  <method class="org.joda.time.DateTimeField" name="java.lang.String toString()" map="toString"/>
  <method class="org.joda.time.DateTimeField" name="int[] add(org.joda.time.ReadablePartial, int, int[], int)" map="D"/>
  <method class="org.joda.time.DateTimeField" name="java.lang.String getAsText(int, java.util.Locale)" map="A"/>
  <method class="org.joda.time.DateTimeField" name="int getMinimumValue(long)" map="G"/>
  <method class="org.joda.time.DateTimeField" name="java.lang.String getAsShortText(int, java.util.Locale)" map="B"/>
  <method class="org.joda.time.DateTimeField" name="java.lang.String getName()" map="G"/>
  <method class="org.joda.time.DateTimeField" name="long roundCeiling(long)" map="H"/>
  <method class="org.joda.time.DateTimeField" name="long roundHalfCeiling(long)" map="I"/>
  <method class="org.joda.time.DateTimeField" name="int getMinimumValue(org.joda.time.ReadablePartial)" map="A"/>
  <method class="org.joda.time.DateTimeField" name="java.lang.String getAsText(long)" map="J"/>
  <method class="org.joda.time.DateTimeField" name="java.lang.String getAsText(org.joda.time.ReadablePartial, int, java.util.Locale)" map="B"/>
  <method class="org.joda.time.DateTimeField" name="long roundHalfEven(long)" map="K"/>
  <method class="org.joda.time.DateTimeField" name="long getDifferenceAsLong(long, long)" map="C"/>
  <method class="org.joda.time.DateTimeField" name="org.joda.time.DurationField getDurationField()" map="H"/>
  <method class="org.joda.time.DateTimeField" name="java.lang.String getAsShortText(org.joda.time.ReadablePartial, java.util.Locale)" map="A"/>
  <method class="org.joda.time.DateTimeField" name="org.joda.time.DateTimeFieldType getType()" map="I"/>
  <method class="org.joda.time.DateTimeField" name="int getMaximumValue(org.joda.time.ReadablePartial, int[])" map="A"/>
  <method class="org.joda.time.DateTimeField" name="long set(long, int)" map="C"/>
  <method class="org.joda.time.DateTimeField" name="java.lang.String getAsText(org.joda.time.ReadablePartial, java.util.Locale)" map="B"/>
  <method class="org.joda.time.DateTimeField" name="boolean isLeap(long)" map="L"/>
  <method class="org.joda.time.DateTimeField" name="int getMaximumShortTextLength(java.util.Locale)" map="B"/>
  <method class="org.joda.time.DateTimeField" name="int getMinimumValue(org.joda.time.ReadablePartial, int[])" map="B"/>
  <method class="org.joda.time.DateTimeField" name="int getMaximumValue(long)" map="M"/>
  <method class="org.joda.time.DateTimeField" name="long set(long, java.lang.String, java.util.Locale)" map="A"/>
  <method class="org.joda.time.DateTimeField" name="int getMaximumValue(org.joda.time.ReadablePartial)" map="B"/>
  <class name="org.joda.time.DateMidnight$Property" map="_A"/>
  <field class="org.joda.time.DateMidnight$Property" name="iInstant" map="N"/>
  <field class="org.joda.time.DateMidnight$Property" name="iField" map="O"/>
  <field class="org.joda.time.DateMidnight$Property" name="serialVersionUID" map="P"/>
  <method class="org.joda.time.DateMidnight$Property" name="org.joda.time.DateMidnight setCopy(int)" map="N"/>
  <method class="org.joda.time.DateMidnight$Property" name="org.joda.time.DateMidnight addToCopy(int)" map="O"/>
  <method class="org.joda.time.DateMidnight$Property" name="org.joda.time.DateMidnight roundHalfFloorCopy()" map="x"/>
  <method class="org.joda.time.DateMidnight$Property" name="org.joda.time.DateMidnight roundHalfCeilingCopy()" map="y"/>
  <method class="org.joda.time.DateMidnight$Property" name="org.joda.time.Chronology getChronology()" map="G"/>
  <method class="org.joda.time.DateMidnight$Property" name="org.joda.time.DateTimeField getField()" map="H"/>
  <method class="org.joda.time.DateMidnight$Property" name="org.joda.time.DateMidnight setCopy(java.lang.String, java.util.Locale)" map="E"/>
  <method class="org.joda.time.DateMidnight$Property" name="void readObject(java.io.ObjectInputStream)" map="E"/>
  <method class="org.joda.time.DateMidnight$Property" name="org.joda.time.DateMidnight roundFloorCopy()" map="z"/>
  <method class="org.joda.time.DateMidnight$Property" name="org.joda.time.DateMidnight roundHalfEvenCopy()" map="&#x00a2;"/>
  <method class="org.joda.time.DateMidnight$Property" name="org.joda.time.DateMidnight addToCopy(long)" map="D"/>
  <method class="org.joda.time.DateMidnight$Property" name="org.joda.time.DateMidnight addWrapFieldToCopy(int)" map="P"/>
  <method class="org.joda.time.DateMidnight$Property" name="org.joda.time.DateMidnight roundCeilingCopy()" map="&#x00a3;"/>
  <method class="org.joda.time.DateMidnight$Property" name="org.joda.time.DateMidnight setCopy(java.lang.String)" map="E"/>
  <method class="org.joda.time.DateMidnight$Property" name="long getMillis()" map="Q"/>
  <method class="org.joda.time.DateMidnight$Property" name="org.joda.time.DateMidnight withMaximumValue()" map="&#x00a4;"/>
  <method class="org.joda.time.DateMidnight$Property" name="org.joda.time.DateMidnight getDateMidnight()" map="&#x00a5;"/>
  <method class="org.joda.time.DateMidnight$Property" name="org.joda.time.DateMidnight withMinimumValue()" map="&#x00aa;"/>
  <method class="org.joda.time.DateMidnight$Property" name="void writeObject(java.io.ObjectOutputStream)" map="E"/>
  <class name="org.joda.time.DateMidnight" map="i"/>
  <field class="org.joda.time.DateMidnight" name="serialVersionUID" map="P"/>
  <method class="org.joda.time.DateMidnight" name="org.joda.time.DateMidnight plusDays(int)" map="&#x00a4;"/>
  <method class="org.joda.time.DateMidnight" name="org.joda.time.DateMidnight$Property monthOfYear()" map="&#x00d0;"/>
  <method class="org.joda.time.DateMidnight" name="org.joda.time.DateMidnight minusYears(int)" map="&#x00a5;"/>
  <method class="org.joda.time.DateMidnight" name="org.joda.time.DateMidnight withMonthOfYear(int)" map="&#x00aa;"/>
  <method class="org.joda.time.DateMidnight" name="org.joda.time.DateMidnight minus(org.joda.time.ReadablePeriod)" map="D"/>
  <method class="org.joda.time.DateMidnight" name="org.joda.time.DateMidnight plusMonths(int)" map="&#x00b5;"/>
  <method class="org.joda.time.DateMidnight" name="org.joda.time.DateMidnight plus(long)" map="N"/>
  <method class="org.joda.time.DateMidnight" name="org.joda.time.DateMidnight withDayOfMonth(int)" map="&#x00ba;"/>
  <method class="org.joda.time.DateMidnight" name="org.joda.time.DateMidnight$Property property(org.joda.time.DateTimeFieldType)" map="E"/>
  <method class="org.joda.time.DateMidnight" name="org.joda.time.DateMidnight minusWeeks(int)" map="&#x00c0;"/>
  <method class="org.joda.time.DateMidnight" name="org.joda.time.DateMidnight withZoneRetainFields(org.joda.time.DateTimeZone)" map="G"/>
  <method class="org.joda.time.DateMidnight" name="org.joda.time.DateMidnight$Property weekOfWeekyear()" map="&#x00d1;"/>
  <method class="org.joda.time.DateMidnight" name="org.joda.time.DateMidnight$Property yearOfCentury()" map="&#x00d2;"/>
  <method class="org.joda.time.DateMidnight" name="org.joda.time.DateMidnight withYearOfEra(int)" map="&#x00c1;"/>
  <method class="org.joda.time.DateMidnight" name="org.joda.time.DateMidnight$Property yearOfEra()" map="&#x00d3;"/>
  <method class="org.joda.time.DateMidnight" name="org.joda.time.DateMidnight withYear(int)" map="&#x00c2;"/>
  <method class="org.joda.time.DateMidnight" name="org.joda.time.DateMidnight$Property weekyear()" map="&#x00d4;"/>
  <method class="org.joda.time.DateMidnight" name="org.joda.time.DateMidnight plusYears(int)" map="&#x00c3;"/>
  <method class="org.joda.time.DateMidnight" name="long checkInstant(long, org.joda.time.Chronology)" map="A"/>
  <method class="org.joda.time.DateMidnight" name="org.joda.time.DateMidnight withWeekOfWeekyear(int)" map="&#x00c4;"/>
  <method class="org.joda.time.DateMidnight" name="org.joda.time.DateMidnight minus(long)" map="O"/>
  <method class="org.joda.time.DateMidnight" name="org.joda.time.DateMidnight plusWeeks(int)" map="&#x00c5;"/>
  <method class="org.joda.time.DateMidnight" name="org.joda.time.DateMidnight$Property dayOfWeek()" map="&#x00d5;"/>
  <method class="org.joda.time.DateMidnight" name="org.joda.time.DateMidnight withDayOfWeek(int)" map="&#x00c6;"/>
  <method class="org.joda.time.DateMidnight" name="org.joda.time.DateMidnight minusDays(int)" map="&#x00c7;"/>
  <method class="org.joda.time.DateMidnight" name="org.joda.time.DateMidnight withWeekyear(int)" map="&#x00c8;"/>
  <method class="org.joda.time.DateMidnight" name="org.joda.time.DateMidnight$Property dayOfYear()" map="&#x00d6;"/>
  <method class="org.joda.time.DateMidnight" name="org.joda.time.DateMidnight$Property era()" map="&#x00d8;"/>
  <method class="org.joda.time.DateMidnight" name="org.joda.time.DateMidnight minus(org.joda.time.ReadableDuration)" map="F"/>
  <method class="org.joda.time.DateMidnight" name="org.joda.time.DateMidnight withCenturyOfEra(int)" map="&#x00c9;"/>
  <method class="org.joda.time.DateMidnight" name="org.joda.time.DateMidnight$Property dayOfMonth()" map="&#x00d9;"/>
  <method class="org.joda.time.DateMidnight" name="org.joda.time.DateMidnight withDurationAdded(org.joda.time.ReadableDuration, int)" map="D"/>
  <method class="org.joda.time.DateMidnight" name="org.joda.time.DateMidnight plus(org.joda.time.ReadablePeriod)" map="E"/>
  <method class="org.joda.time.DateMidnight" name="org.joda.time.DateMidnight withMillis(long)" map="P"/>
  <method class="org.joda.time.DateMidnight" name="org.joda.time.DateMidnight withDayOfYear(int)" map="&#x00ca;"/>
  <method class="org.joda.time.DateMidnight" name="org.joda.time.DateMidnight minusMonths(int)" map="&#x00cb;"/>
  <method class="org.joda.time.DateMidnight" name="org.joda.time.LocalDate toLocalDate()" map="&#x00da;"/>
  <method class="org.joda.time.DateMidnight" name="org.joda.time.DateMidnight$Property centuryOfEra()" map="&#x00db;"/>
  <method class="org.joda.time.DateMidnight" name="org.joda.time.DateMidnight withFieldAdded(org.joda.time.DurationFieldType, int)" map="C"/>
  <method class="org.joda.time.DateMidnight" name="org.joda.time.DateMidnight withChronology(org.joda.time.Chronology)" map="F"/>
  <method class="org.joda.time.DateMidnight" name="org.joda.time.DateMidnight withEra(int)" map="&#x00cc;"/>
  <method class="org.joda.time.DateMidnight" name="org.joda.time.DateMidnight withDurationAdded(long, int)" map="C"/>
  <method class="org.joda.time.DateMidnight" name="org.joda.time.DateMidnight withYearOfCentury(int)" map="&#x00cd;"/>
  <method class="org.joda.time.DateMidnight" name="org.joda.time.DateMidnight withPeriodAdded(org.joda.time.ReadablePeriod, int)" map="C"/>
  <method class="org.joda.time.DateMidnight" name="org.joda.time.DateMidnight withFields(org.joda.time.ReadablePartial)" map="B"/>
  <method class="org.joda.time.DateMidnight" name="org.joda.time.YearMonthDay toYearMonthDay()" map="&#x00dc;"/>
  <method class="org.joda.time.DateMidnight" name="org.joda.time.DateMidnight plus(org.joda.time.ReadableDuration)" map="G"/>
  <method class="org.joda.time.DateMidnight" name="org.joda.time.Interval toInterval()" map="&#x00dd;"/>
  <method class="org.joda.time.DateMidnight" name="org.joda.time.DateMidnight$Property year()" map="&#x00de;"/>
  <method class="org.joda.time.DateMidnight" name="org.joda.time.DateMidnight withField(org.joda.time.DateTimeFieldType, int)" map="C"/>
  <class name="org.joda.time.ReadWritableInstant" map="j"/>
  <method class="org.joda.time.ReadWritableInstant" name="void setMillis(long)" map="G"/>
  <method class="org.joda.time.ReadWritableInstant" name="void add(org.joda.time.ReadableDuration, int)" map="C"/>
  <method class="org.joda.time.ReadWritableInstant" name="void add(org.joda.time.ReadableDuration)" map="E"/>
  <method class="org.joda.time.ReadWritableInstant" name="void add(long)" map="K"/>
  <method class="org.joda.time.ReadWritableInstant" name="void setChronology(org.joda.time.Chronology)" map="C"/>
  <method class="org.joda.time.ReadWritableInstant" name="void add(org.joda.time.ReadablePeriod)" map="C"/>
  <method class="org.joda.time.ReadWritableInstant" name="void setZone(org.joda.time.DateTimeZone)" map="E"/>
  <method class="org.joda.time.ReadWritableInstant" name="void set(org.joda.time.DateTimeFieldType, int)" map="B"/>
  <method class="org.joda.time.ReadWritableInstant" name="void setMillis(org.joda.time.ReadableInstant)" map="D"/>
  <method class="org.joda.time.ReadWritableInstant" name="void setZoneRetainFields(org.joda.time.DateTimeZone)" map="F"/>
  <method class="org.joda.time.ReadWritableInstant" name="void add(org.joda.time.DurationFieldType, int)" map="B"/>
  <method class="org.joda.time.ReadWritableInstant" name="void add(org.joda.time.ReadablePeriod, int)" map="B"/>
  <class name="org.joda.time.IllegalFieldValueException" map="k"/>
  <field class="org.joda.time.IllegalFieldValueException" name="iFieldName" map="A"/>
  <field class="org.joda.time.IllegalFieldValueException" name="serialVersionUID" map="B"/>
  <field class="org.joda.time.IllegalFieldValueException" name="iStringValue" map="C"/>
  <field class="org.joda.time.IllegalFieldValueException" name="iLowerBound" map="D"/>
  <field class="org.joda.time.IllegalFieldValueException" name="iDateTimeFieldType" map="E"/>
  <field class="org.joda.time.IllegalFieldValueException" name="iNumberValue" map="F"/>
  <field class="org.joda.time.IllegalFieldValueException" name="iDurationFieldType" map="G"/>
  <field class="org.joda.time.IllegalFieldValueException" name="iUpperBound" map="H"/>
  <field class="org.joda.time.IllegalFieldValueException" name="iMessage" map="I"/>
  <method class="org.joda.time.IllegalFieldValueException" name="java.lang.String getIllegalValueAsString()" map="A"/>
  <method class="org.joda.time.IllegalFieldValueException" name="java.lang.String createMessage(java.lang.String, java.lang.Number, java.lang.Number, java.lang.Number, java.lang.String)" map="A"/>
  <method class="org.joda.time.IllegalFieldValueException" name="java.lang.Number getUpperBound()" map="B"/>
  <method class="org.joda.time.IllegalFieldValueException" name="void prependMessage(java.lang.String)" map="A"/>
  <method class="org.joda.time.IllegalFieldValueException" name="java.lang.String getMessage()" map="getMessage"/>
  <method class="org.joda.time.IllegalFieldValueException" name="org.joda.time.DurationFieldType getDurationFieldType()" map="C"/>
  <method class="org.joda.time.IllegalFieldValueException" name="java.lang.String getFieldName()" map="D"/>
  <method class="org.joda.time.IllegalFieldValueException" name="java.lang.String getIllegalStringValue()" map="E"/>
  <method class="org.joda.time.IllegalFieldValueException" name="java.lang.Number getIllegalNumberValue()" map="F"/>
  <method class="org.joda.time.IllegalFieldValueException" name="java.lang.String createMessage(java.lang.String, java.lang.String)" map="A"/>
  <method class="org.joda.time.IllegalFieldValueException" name="org.joda.time.DateTimeFieldType getDateTimeFieldType()" map="G"/>
  <method class="org.joda.time.IllegalFieldValueException" name="java.lang.Number getLowerBound()" map="H"/>
  <class name="org.joda.time.LocalDateTime$Property" map="_A"/>
  <field class="org.joda.time.LocalDateTime$Property" name="iInstant" map="Q"/>
  <field class="org.joda.time.LocalDateTime$Property" name="iField" map="R"/>
  <field class="org.joda.time.LocalDateTime$Property" name="serialVersionUID" map="S"/>
  <method class="org.joda.time.LocalDateTime$Property" name="org.joda.time.LocalDateTime addToCopy(long)" map="E"/>
  <method class="org.joda.time.LocalDateTime$Property" name="org.joda.time.LocalDateTime addToCopy(int)" map="Q"/>
  <method class="org.joda.time.LocalDateTime$Property" name="org.joda.time.LocalDateTime setCopy(int)" map="R"/>
  <method class="org.joda.time.LocalDateTime$Property" name="org.joda.time.LocalDateTime getLocalDateTime()" map="&#x00b5;"/>
  <method class="org.joda.time.LocalDateTime$Property" name="org.joda.time.LocalDateTime roundCeilingCopy()" map="&#x00ba;"/>
  <method class="org.joda.time.LocalDateTime$Property" name="org.joda.time.LocalDateTime setCopy(java.lang.String)" map="F"/>
  <method class="org.joda.time.LocalDateTime$Property" name="org.joda.time.Chronology getChronology()" map="G"/>
  <method class="org.joda.time.LocalDateTime$Property" name="org.joda.time.DateTimeField getField()" map="H"/>
  <method class="org.joda.time.LocalDateTime$Property" name="org.joda.time.LocalDateTime roundHalfFloorCopy()" map="&#x00c0;"/>
  <method class="org.joda.time.LocalDateTime$Property" name="void readObject(java.io.ObjectInputStream)" map="F"/>
  <method class="org.joda.time.LocalDateTime$Property" name="org.joda.time.LocalDateTime withMinimumValue()" map="&#x00c1;"/>
  <method class="org.joda.time.LocalDateTime$Property" name="org.joda.time.LocalDateTime setCopy(java.lang.String, java.util.Locale)" map="F"/>
  <method class="org.joda.time.LocalDateTime$Property" name="org.joda.time.LocalDateTime roundFloorCopy()" map="&#x00c2;"/>
  <method class="org.joda.time.LocalDateTime$Property" name="org.joda.time.LocalDateTime roundHalfCeilingCopy()" map="&#x00c3;"/>
  <method class="org.joda.time.LocalDateTime$Property" name="long getMillis()" map="Q"/>
  <method class="org.joda.time.LocalDateTime$Property" name="org.joda.time.LocalDateTime addWrapFieldToCopy(int)" map="S"/>
  <method class="org.joda.time.LocalDateTime$Property" name="org.joda.time.LocalDateTime withMaximumValue()" map="&#x00c4;"/>
  <method class="org.joda.time.LocalDateTime$Property" name="void writeObject(java.io.ObjectOutputStream)" map="F"/>
  <method class="org.joda.time.LocalDateTime$Property" name="org.joda.time.LocalDateTime roundHalfEvenCopy()" map="&#x00c5;"/>
  <class name="org.joda.time.LocalDateTime" map="l"/>
  <field class="org.joda.time.LocalDateTime" name="iLocalMillis" map="R"/>
  <field class="org.joda.time.LocalDateTime" name="MILLIS_OF_DAY" map="S"/>
  <field class="org.joda.time.LocalDateTime" name="DAY_OF_MONTH" map="T"/>
  <field class="org.joda.time.LocalDateTime" name="iChronology" map="U"/>
  <field class="org.joda.time.LocalDateTime" name="MONTH_OF_YEAR" map="V"/>
  <field class="org.joda.time.LocalDateTime" name="YEAR" map="W"/>
  <field class="org.joda.time.LocalDateTime" name="serialVersionUID" map="X"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.DateTimeField getField(int, org.joda.time.Chronology)" map="A"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.LocalDateTime$Property millisOfSecond()" map="r"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.LocalDateTime withWeekOfWeekyear(int)" map="i"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.LocalDateTime$Property dayOfYear()" map="s"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.LocalDateTime withMonthOfYear(int)" map="j"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.LocalDateTime withMinuteOfHour(int)" map="k"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.LocalDateTime plusMinutes(int)" map="l"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.LocalDateTime$Property property(org.joda.time.DateTimeFieldType)" map="G"/>
  <method class="org.joda.time.LocalDateTime" name="int getValue(int)" map="C"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.LocalDateTime$Property era()" map="t"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.LocalDateTime withDayOfWeek(int)" map="m"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.LocalDateTime fromDateFields(java.util.Date)" map="C"/>
  <method class="org.joda.time.LocalDateTime" name="boolean isSupported(org.joda.time.DateTimeFieldType)" map="B"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.LocalDateTime withHourOfDay(int)" map="n"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.LocalDateTime minus(org.joda.time.ReadablePeriod)" map="E"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.LocalDateTime withYearOfCentury(int)" map="o"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.LocalDateTime$Property millisOfDay()" map="u"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.LocalDateTime withTime(int, int, int, int)" map="A"/>
  <method class="org.joda.time.LocalDateTime" name="int getEra()" map="v"/>
  <method class="org.joda.time.LocalDateTime" name="int get(org.joda.time.DateTimeFieldType)" map="A"/>
  <method class="org.joda.time.LocalDateTime" name="int getDayOfYear()" map="w"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.LocalDateTime withDayOfMonth(int)" map="p"/>
  <method class="org.joda.time.LocalDateTime" name="boolean isSupported(org.joda.time.DurationFieldType)" map="E"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.LocalDateTime withYear(int)" map="q"/>
  <method class="org.joda.time.LocalDateTime" name="int size()" map="A"/>
  <method class="org.joda.time.LocalDateTime" name="int getYear()" map="x"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.LocalDateTime minusMonths(int)" map="r"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.LocalDateTime withSecondOfMinute(int)" map="s"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.LocalDateTime plusSeconds(int)" map="t"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.LocalDateTime withMillisOfSecond(int)" map="u"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.LocalDateTime withDurationAdded(org.joda.time.ReadableDuration, int)" map="A"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.LocalDateTime$Property yearOfCentury()" map="y"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.LocalDateTime$Property year()" map="z"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.LocalDateTime minusWeeks(int)" map="v"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.LocalDateTime plusMonths(int)" map="w"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.LocalDateTime withDayOfYear(int)" map="x"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.LocalDateTime plus(org.joda.time.ReadableDuration)" map="A"/>
  <method class="org.joda.time.LocalDateTime" name="int getDayOfMonth()" map="&#x00a2;"/>
  <method class="org.joda.time.LocalDateTime" name="boolean equals(java.lang.Object)" map="equals"/>
  <method class="org.joda.time.LocalDateTime" name="java.lang.String toString(java.lang.String, java.util.Locale)" map="C"/>
  <method class="org.joda.time.LocalDateTime" name="java.lang.String toString(java.lang.String)" map="C"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.LocalDateTime$Property monthOfYear()" map="&#x00a3;"/>
  <method class="org.joda.time.LocalDateTime" name="long getLocalMillis()" map="F"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.LocalDateTime$Property minuteOfHour()" map="&#x00a4;"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.LocalDateTime minusMillis(int)" map="y"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.LocalDateTime plusWeeks(int)" map="z"/>
  <method class="org.joda.time.LocalDateTime" name="int getMillisOfSecond()" map="&#x00a5;"/>
  <method class="org.joda.time.LocalDateTime" name="int getSecondOfMinute()" map="&#x00aa;"/>
  <method class="org.joda.time.LocalDateTime" name="int getDayOfWeek()" map="&#x00b5;"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.DateTime toDateTime(org.joda.time.DateTimeZone)" map="G"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.LocalDateTime withDate(int, int, int)" map="A"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.LocalDateTime withEra(int)" map="&#x00a2;"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.LocalDateTime fromCalendarFields(java.util.Calendar)" map="C"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.LocalDateTime withYearOfEra(int)" map="&#x00a3;"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.LocalDateTime minusHours(int)" map="&#x00a4;"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.LocalDateTime plusMillis(int)" map="&#x00a5;"/>
  <method class="org.joda.time.LocalDateTime" name="int getYearOfCentury()" map="&#x00ba;"/>
  <method class="org.joda.time.LocalDateTime" name="int getWeekOfWeekyear()" map="&#x00c0;"/>
  <method class="org.joda.time.LocalDateTime" name="int compareTo(java.lang.Object)" map="compareTo"/>
  <method class="org.joda.time.LocalDateTime" name="int getCenturyOfEra()" map="&#x00c1;"/>
  <method class="org.joda.time.LocalDateTime" name="int getMonthOfYear()" map="&#x00c2;"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.LocalDate toLocalDate()" map="&#x00c3;"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.LocalDateTime$Property weekOfWeekyear()" map="&#x00c4;"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.LocalDateTime$Property hourOfDay()" map="&#x00c5;"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.LocalDateTime minusMinutes(int)" map="&#x00aa;"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.LocalDateTime plusHours(int)" map="&#x00b5;"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.LocalDateTime withFields(org.joda.time.ReadablePartial)" map="F"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.LocalDateTime minus(org.joda.time.ReadableDuration)" map="B"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.LocalDateTime withMillisOfDay(int)" map="&#x00ba;"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.LocalDateTime withFieldAdded(org.joda.time.DurationFieldType, int)" map="C"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.LocalDateTime withWeekyear(int)" map="&#x00c0;"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.LocalDateTime$Property secondOfMinute()" map="&#x00c6;"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.LocalDateTime$Property centuryOfEra()" map="&#x00c7;"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.LocalDateTime minusYears(int)" map="&#x00c1;"/>
  <method class="org.joda.time.LocalDateTime" name="int getWeekyear()" map="&#x00c8;"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.LocalDateTime withPeriodAdded(org.joda.time.ReadablePeriod, int)" map="C"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.LocalDateTime$Property weekyear()" map="&#x00c9;"/>
  <method class="org.joda.time.LocalDateTime" name="int getYearOfEra()" map="&#x00ca;"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.LocalDateTime withCenturyOfEra(int)" map="&#x00c2;"/>
  <method class="org.joda.time.LocalDateTime" name="int getMinuteOfHour()" map="&#x00cb;"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.LocalDateTime plusDays(int)" map="&#x00c3;"/>
  <method class="org.joda.time.LocalDateTime" name="java.lang.String toString()" map="toString"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.LocalDateTime minusDays(int)" map="&#x00c4;"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.LocalDateTime withLocalMillis(long)" map="D"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.LocalTime toLocalTime()" map="&#x00cc;"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.LocalDateTime plus(org.joda.time.ReadablePeriod)" map="F"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.LocalDateTime$Property dayOfMonth()" map="&#x00cd;"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.Chronology getChronology()" map="B"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.LocalDateTime withField(org.joda.time.DateTimeFieldType, int)" map="C"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.LocalDateTime$Property yearOfEra()" map="&#x00ce;"/>
  <method class="org.joda.time.LocalDateTime" name="int getMillisOfDay()" map="&#x00cf;"/>
  <method class="org.joda.time.LocalDateTime" name="int getHourOfDay()" map="&#x00d0;"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.LocalDateTime minusSeconds(int)" map="&#x00c5;"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.DateTime toDateTime()" map="&#x00d1;"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.LocalDateTime plusYears(int)" map="&#x00c6;"/>
  <method class="org.joda.time.LocalDateTime" name="org.joda.time.LocalDateTime$Property dayOfWeek()" map="&#x00d2;"/>
  <class name="org.joda.time.Months" map="m"/>
  <field class="org.joda.time.Months" name="PARSER" map="&#x00a2;"/>
  <field class="org.joda.time.Months" name="MIN_VALUE" map="&#x00a3;"/>
  <field class="org.joda.time.Months" name="ONE" map="&#x00a4;"/>
  <field class="org.joda.time.Months" name="SEVEN" map="&#x00a5;"/>
  <field class="org.joda.time.Months" name="serialVersionUID" map="&#x00aa;"/>
  <field class="org.joda.time.Months" name="NINE" map="&#x00b5;"/>
  <field class="org.joda.time.Months" name="ZERO" map="&#x00ba;"/>
  <field class="org.joda.time.Months" name="TWO" map="&#x00c0;"/>
  <field class="org.joda.time.Months" name="ELEVEN" map="&#x00c1;"/>
  <field class="org.joda.time.Months" name="EIGHT" map="&#x00c2;"/>
  <field class="org.joda.time.Months" name="FIVE" map="&#x00c3;"/>
  <field class="org.joda.time.Months" name="THREE" map="&#x00c4;"/>
  <field class="org.joda.time.Months" name="FOUR" map="&#x00c5;"/>
  <field class="org.joda.time.Months" name="SIX" map="&#x00c6;"/>
  <field class="org.joda.time.Months" name="TWELVE" map="&#x00c7;"/>
  <field class="org.joda.time.Months" name="TEN" map="&#x00c8;"/>
  <field class="org.joda.time.Months" name="MAX_VALUE" map="&#x00c9;"/>
  <method class="org.joda.time.Months" name="int getMonths()" map="&#x00c8;"/>
  <method class="org.joda.time.Months" name="org.joda.time.Months plus(org.joda.time.Months)" map="A"/>
  <method class="org.joda.time.Months" name="org.joda.time.Months minus(org.joda.time.Months)" map="B"/>
  <method class="org.joda.time.Months" name="org.joda.time.Months minus(int)" map="&#x00d0;"/>
  <method class="org.joda.time.Months" name="java.lang.String toString()" map="toString"/>
  <method class="org.joda.time.Months" name="org.joda.time.Months plus(int)" map="&#x00d1;"/>
  <method class="org.joda.time.Months" name="boolean isLessThan(org.joda.time.Months)" map="C"/>
  <method class="org.joda.time.Months" name="org.joda.time.DurationFieldType getFieldType()" map="e"/>
  <method class="org.joda.time.Months" name="org.joda.time.PeriodType getPeriodType()" map="C"/>
  <method class="org.joda.time.Months" name="org.joda.time.Months negated()" map="&#x00c9;"/>
  <method class="org.joda.time.Months" name="java.lang.Object readResolve()" map="&#x00ca;"/>
  <method class="org.joda.time.Months" name="org.joda.time.Months multipliedBy(int)" map="&#x00d2;"/>
  <method class="org.joda.time.Months" name="org.joda.time.Months months(int)" map="&#x00d3;"/>
  <method class="org.joda.time.Months" name="org.joda.time.Months monthsBetween(org.joda.time.ReadablePartial, org.joda.time.ReadablePartial)" map="G"/>
  <method class="org.joda.time.Months" name="org.joda.time.Months dividedBy(int)" map="&#x00d4;"/>
  <method class="org.joda.time.Months" name="org.joda.time.Months monthsBetween(org.joda.time.ReadableInstant, org.joda.time.ReadableInstant)" map="G"/>
  <method class="org.joda.time.Months" name="org.joda.time.Months parseMonths(java.lang.String)" map="G"/>
  <method class="org.joda.time.Months" name="org.joda.time.Months monthsIn(org.joda.time.ReadableInterval)" map="H"/>
  <method class="org.joda.time.Months" name="boolean isGreaterThan(org.joda.time.Months)" map="D"/>
  <class name="org.joda.time.YearMonthDay$Property" map="_A"/>
  <field class="org.joda.time.YearMonthDay$Property" name="iYearMonthDay" map="G"/>
  <field class="org.joda.time.YearMonthDay$Property" name="iFieldIndex" map="H"/>
  <field class="org.joda.time.YearMonthDay$Property" name="serialVersionUID" map="I"/>
  <method class="org.joda.time.YearMonthDay$Property" name="org.joda.time.YearMonthDay setCopy(int)" map="H"/>
  <method class="org.joda.time.YearMonthDay$Property" name="org.joda.time.ReadablePartial getReadablePartial()" map="N"/>
  <method class="org.joda.time.YearMonthDay$Property" name="org.joda.time.YearMonthDay withMinimumValue()" map="U"/>
  <method class="org.joda.time.YearMonthDay$Property" name="org.joda.time.YearMonthDay getYearMonthDay()" map="V"/>
  <method class="org.joda.time.YearMonthDay$Property" name="org.joda.time.YearMonthDay setCopy(java.lang.String, java.util.Locale)" map="C"/>
  <method class="org.joda.time.YearMonthDay$Property" name="org.joda.time.YearMonthDay addWrapFieldToCopy(int)" map="I"/>
  <method class="org.joda.time.YearMonthDay$Property" name="org.joda.time.YearMonthDay setCopy(java.lang.String)" map="C"/>
  <method class="org.joda.time.YearMonthDay$Property" name="int get()" map="J"/>
  <method class="org.joda.time.YearMonthDay$Property" name="org.joda.time.YearMonthDay withMaximumValue()" map="W"/>
  <method class="org.joda.time.YearMonthDay$Property" name="org.joda.time.DateTimeField getField()" map="C"/>
  <method class="org.joda.time.YearMonthDay$Property" name="org.joda.time.YearMonthDay addToCopy(int)" map="J"/>
  <class name="org.joda.time.YearMonthDay" map="n"/>
  <field class="org.joda.time.YearMonthDay" name="FIELD_TYPES" map="m"/>
  <field class="org.joda.time.YearMonthDay" name="DAY_OF_MONTH" map="n"/>
  <field class="org.joda.time.YearMonthDay" name="MONTH_OF_YEAR" map="o"/>
  <field class="org.joda.time.YearMonthDay" name="YEAR" map="p"/>
  <field class="org.joda.time.YearMonthDay" name="serialVersionUID" map="q"/>
  <method class="org.joda.time.YearMonthDay" name="org.joda.time.YearMonthDay plusMonths(int)" map="&#x00d3;"/>
  <method class="org.joda.time.YearMonthDay" name="org.joda.time.DateTime toDateTimeAtMidnight()" map="&#x00e0;"/>
  <method class="org.joda.time.YearMonthDay" name="org.joda.time.YearMonthDay withMonthOfYear(int)" map="&#x00d4;"/>
  <method class="org.joda.time.YearMonthDay" name="org.joda.time.YearMonthDay withDayOfMonth(int)" map="&#x00d5;"/>
  <method class="org.joda.time.YearMonthDay" name="org.joda.time.YearMonthDay withYear(int)" map="&#x00d6;"/>
  <method class="org.joda.time.YearMonthDay" name="int getMonthOfYear()" map="&#x00e1;"/>
  <method class="org.joda.time.YearMonthDay" name="org.joda.time.DateTime toDateTimeAtMidnight(org.joda.time.DateTimeZone)" map="I"/>
  <method class="org.joda.time.YearMonthDay" name="org.joda.time.YearMonthDay plusYears(int)" map="&#x00d8;"/>
  <method class="org.joda.time.YearMonthDay" name="int getDayOfMonth()" map="&#x00e2;"/>
  <method class="org.joda.time.YearMonthDay" name="org.joda.time.DateTime toDateTimeAtCurrentTime()" map="&#x00e3;"/>
  <method class="org.joda.time.YearMonthDay" name="org.joda.time.YearMonthDay$Property year()" map="&#x00e4;"/>
  <method class="org.joda.time.YearMonthDay" name="org.joda.time.YearMonthDay withChronologyRetainFields(org.joda.time.Chronology)" map="C"/>
  <method class="org.joda.time.YearMonthDay" name="org.joda.time.DateMidnight toDateMidnight()" map="&#x00e5;"/>
  <method class="org.joda.time.YearMonthDay" name="int getYear()" map="&#x00e6;"/>
  <method class="org.joda.time.YearMonthDay" name="org.joda.time.DateTime toDateTime(org.joda.time.TimeOfDay, org.joda.time.DateTimeZone)" map="A"/>
  <method class="org.joda.time.YearMonthDay" name="org.joda.time.YearMonthDay minusDays(int)" map="&#x00d9;"/>
  <method class="org.joda.time.YearMonthDay" name="org.joda.time.YearMonthDay$Property monthOfYear()" map="&#x00e7;"/>
  <method class="org.joda.time.YearMonthDay" name="org.joda.time.DateTimeField getField(int, org.joda.time.Chronology)" map="A"/>
  <method class="org.joda.time.YearMonthDay" name="org.joda.time.DateTimeFieldType getFieldType(int)" map="B"/>
  <method class="org.joda.time.YearMonthDay" name="org.joda.time.YearMonthDay$Property property(org.joda.time.DateTimeFieldType)" map="K"/>
  <method class="org.joda.time.YearMonthDay" name="org.joda.time.DateMidnight toDateMidnight(org.joda.time.DateTimeZone)" map="J"/>
  <method class="org.joda.time.YearMonthDay" name="org.joda.time.Interval toInterval(org.joda.time.DateTimeZone)" map="K"/>
  <method class="org.joda.time.YearMonthDay" name="java.lang.String toString()" map="toString"/>
  <method class="org.joda.time.YearMonthDay" name="org.joda.time.DateTime toDateTime(org.joda.time.TimeOfDay)" map="A"/>
  <method class="org.joda.time.YearMonthDay" name="org.joda.time.YearMonthDay plus(org.joda.time.ReadablePeriod)" map="K"/>
  <method class="org.joda.time.YearMonthDay" name="org.joda.time.YearMonthDay fromCalendarFields(java.util.Calendar)" map="E"/>
  <method class="org.joda.time.YearMonthDay" name="org.joda.time.YearMonthDay minusMonths(int)" map="&#x00da;"/>
  <method class="org.joda.time.YearMonthDay" name="org.joda.time.YearMonthDay fromDateFields(java.util.Date)" map="E"/>
  <method class="org.joda.time.YearMonthDay" name="org.joda.time.DateTimeFieldType[] getFieldTypes()" map="C"/>
  <method class="org.joda.time.YearMonthDay" name="org.joda.time.YearMonthDay withFieldAdded(org.joda.time.DurationFieldType, int)" map="G"/>
  <method class="org.joda.time.YearMonthDay" name="org.joda.time.LocalDate toLocalDate()" map="&#x00e8;"/>
  <method class="org.joda.time.YearMonthDay" name="int size()" map="A"/>
  <method class="org.joda.time.YearMonthDay" name="org.joda.time.YearMonthDay withPeriodAdded(org.joda.time.ReadablePeriod, int)" map="F"/>
  <method class="org.joda.time.YearMonthDay" name="org.joda.time.DateTime toDateTimeAtCurrentTime(org.joda.time.DateTimeZone)" map="L"/>
  <method class="org.joda.time.YearMonthDay" name="org.joda.time.YearMonthDay$Property dayOfMonth()" map="&#x00e9;"/>
  <method class="org.joda.time.YearMonthDay" name="org.joda.time.Interval toInterval()" map="&#x00ea;"/>
  <method class="org.joda.time.YearMonthDay" name="org.joda.time.YearMonthDay withField(org.joda.time.DateTimeFieldType, int)" map="G"/>
  <method class="org.joda.time.YearMonthDay" name="org.joda.time.YearMonthDay plusDays(int)" map="&#x00db;"/>
  <method class="org.joda.time.YearMonthDay" name="org.joda.time.YearMonthDay minusYears(int)" map="&#x00dc;"/>
  <method class="org.joda.time.YearMonthDay" name="org.joda.time.YearMonthDay minus(org.joda.time.ReadablePeriod)" map="L"/>
  <class name="org.joda.time.DateTimeFieldType$StandardDateTimeFieldType" map="_A"/>
  <field class="org.joda.time.DateTimeFieldType$StandardDateTimeFieldType" name="iOrdinal" map="v"/>
  <field class="org.joda.time.DateTimeFieldType$StandardDateTimeFieldType" name="iRangeType" map="w"/>
  <field class="org.joda.time.DateTimeFieldType$StandardDateTimeFieldType" name="iUnitType" map="x"/>
  <field class="org.joda.time.DateTimeFieldType$StandardDateTimeFieldType" name="serialVersionUID" map="y"/>
  <method class="org.joda.time.DateTimeFieldType$StandardDateTimeFieldType" name="org.joda.time.DurationFieldType getDurationType()" map="D"/>
  <method class="org.joda.time.DateTimeFieldType$StandardDateTimeFieldType" name="java.lang.Object readResolve()" map="_"/>
  <method class="org.joda.time.DateTimeFieldType$StandardDateTimeFieldType" name="org.joda.time.DurationFieldType getRangeDurationType()" map="T"/>
  <method class="org.joda.time.DateTimeFieldType$StandardDateTimeFieldType" name="org.joda.time.DateTimeField getField(org.joda.time.Chronology)" map="B"/>
  <class name="org.joda.time.DateTimeFieldType" map="o"/>
  <field class="org.joda.time.DateTimeFieldType" name="HALFDAY_OF_DAY_TYPE" map="A"/>
  <field class="org.joda.time.DateTimeFieldType" name="YEAR_OF_CENTURY" map="B"/>
  <field class="org.joda.time.DateTimeFieldType" name="MINUTE_OF_DAY" map="C"/>
  <field class="org.joda.time.DateTimeFieldType" name="CLOCKHOUR_OF_HALFDAY" map="D"/>
  <field class="org.joda.time.DateTimeFieldType" name="serialVersionUID" map="E"/>
  <field class="org.joda.time.DateTimeFieldType" name="DAY_OF_WEEK_TYPE" map="F"/>
  <field class="org.joda.time.DateTimeFieldType" name="MILLIS_OF_SECOND" map="G"/>
  <field class="org.joda.time.DateTimeFieldType" name="YEAR_TYPE" map="H"/>
  <field class="org.joda.time.DateTimeFieldType" name="CLOCKHOUR_OF_DAY" map="I"/>
  <field class="org.joda.time.DateTimeFieldType" name="HALFDAY_OF_DAY" map="J"/>
  <field class="org.joda.time.DateTimeFieldType" name="HOUR_OF_HALFDAY" map="K"/>
  <field class="org.joda.time.DateTimeFieldType" name="HOUR_OF_HALFDAY_TYPE" map="L"/>
  <field class="org.joda.time.DateTimeFieldType" name="DAY_OF_WEEK" map="M"/>
  <field class="org.joda.time.DateTimeFieldType" name="MINUTE_OF_DAY_TYPE" map="N"/>
  <field class="org.joda.time.DateTimeFieldType" name="HOUR_OF_DAY" map="O"/>
  <field class="org.joda.time.DateTimeFieldType" name="DAY_OF_YEAR" map="P"/>
  <field class="org.joda.time.DateTimeFieldType" name="SECOND_OF_DAY" map="Q"/>
  <field class="org.joda.time.DateTimeFieldType" name="iName" map="R"/>
  <field class="org.joda.time.DateTimeFieldType" name="HOUR_OF_DAY_TYPE" map="S"/>
  <field class="org.joda.time.DateTimeFieldType" name="MINUTE_OF_HOUR_TYPE" map="T"/>
  <field class="org.joda.time.DateTimeFieldType" name="MONTH_OF_YEAR_TYPE" map="U"/>
  <field class="org.joda.time.DateTimeFieldType" name="SECOND_OF_DAY_TYPE" map="V"/>
  <field class="org.joda.time.DateTimeFieldType" name="YEAR" map="W"/>
  <field class="org.joda.time.DateTimeFieldType" name="CENTURY_OF_ERA_TYPE" map="X"/>
  <field class="org.joda.time.DateTimeFieldType" name="ERA_TYPE" map="Y"/>
  <field class="org.joda.time.DateTimeFieldType" name="DAY_OF_MONTH" map="Z"/>
  <field class="org.joda.time.DateTimeFieldType" name="WEEKYEAR" map="_"/>
  <field class="org.joda.time.DateTimeFieldType" name="ERA" map="a"/>
  <field class="org.joda.time.DateTimeFieldType" name="CLOCKHOUR_OF_HALFDAY_TYPE" map="b"/>
  <field class="org.joda.time.DateTimeFieldType" name="DAY_OF_YEAR_TYPE" map="c"/>
  <field class="org.joda.time.DateTimeFieldType" name="MILLIS_OF_SECOND_TYPE" map="d"/>
  <field class="org.joda.time.DateTimeFieldType" name="YEAR_OF_CENTURY_TYPE" map="e"/>
  <field class="org.joda.time.DateTimeFieldType" name="MILLIS_OF_DAY_TYPE" map="f"/>
  <field class="org.joda.time.DateTimeFieldType" name="MILLIS_OF_DAY" map="g"/>
  <field class="org.joda.time.DateTimeFieldType" name="YEAR_OF_ERA" map="h"/>
  <field class="org.joda.time.DateTimeFieldType" name="YEAR_OF_ERA_TYPE" map="i"/>
  <field class="org.joda.time.DateTimeFieldType" name="SECOND_OF_MINUTE" map="j"/>
  <field class="org.joda.time.DateTimeFieldType" name="WEEK_OF_WEEKYEAR_TYPE" map="k"/>
  <field class="org.joda.time.DateTimeFieldType" name="DAY_OF_MONTH_TYPE" map="l"/>
  <field class="org.joda.time.DateTimeFieldType" name="MINUTE_OF_HOUR" map="m"/>
  <field class="org.joda.time.DateTimeFieldType" name="CENTURY_OF_ERA" map="n"/>
  <field class="org.joda.time.DateTimeFieldType" name="WEEKYEAR_OF_CENTURY_TYPE" map="o"/>
  <field class="org.joda.time.DateTimeFieldType" name="CLOCKHOUR_OF_DAY_TYPE" map="p"/>
  <field class="org.joda.time.DateTimeFieldType" name="WEEKYEAR_OF_CENTURY" map="q"/>
  <field class="org.joda.time.DateTimeFieldType" name="SECOND_OF_MINUTE_TYPE" map="r"/>
  <field class="org.joda.time.DateTimeFieldType" name="WEEK_OF_WEEKYEAR" map="s"/>
  <field class="org.joda.time.DateTimeFieldType" name="MONTH_OF_YEAR" map="t"/>
  <field class="org.joda.time.DateTimeFieldType" name="WEEKYEAR_TYPE" map="u"/>
  <method class="org.joda.time.DateTimeFieldType" name="org.joda.time.DateTimeFieldType dayOfYear()" map="A"/>
  <method class="org.joda.time.DateTimeFieldType" name="org.joda.time.DateTimeFieldType halfdayOfDay()" map="B"/>
  <method class="org.joda.time.DateTimeFieldType" name="org.joda.time.DateTimeFieldType yearOfCentury()" map="C"/>
  <method class="org.joda.time.DateTimeFieldType" name="org.joda.time.DateTimeFieldType access$1200()" map="access$1200"/>
  <method class="org.joda.time.DateTimeFieldType" name="org.joda.time.DateTimeFieldType access$1000()" map="access$1000"/>
  <method class="org.joda.time.DateTimeFieldType" name="org.joda.time.DateTimeFieldType access$1400()" map="access$1400"/>
  <method class="org.joda.time.DateTimeFieldType" name="boolean isSupported(org.joda.time.Chronology)" map="A"/>
  <method class="org.joda.time.DateTimeFieldType" name="org.joda.time.DurationFieldType getDurationType()" map="D"/>
  <method class="org.joda.time.DateTimeFieldType" name="org.joda.time.DateTimeFieldType access$1800()" map="access$1800"/>
  <method class="org.joda.time.DateTimeFieldType" name="org.joda.time.DateTimeFieldType access$1600()" map="access$1600"/>
  <method class="org.joda.time.DateTimeFieldType" name="org.joda.time.DateTimeFieldType year()" map="E"/>
  <method class="org.joda.time.DateTimeFieldType" name="org.joda.time.DateTimeFieldType access$300()" map="access$300"/>
  <method class="org.joda.time.DateTimeFieldType" name="org.joda.time.DateTimeFieldType access$100()" map="access$100"/>
  <method class="org.joda.time.DateTimeFieldType" name="org.joda.time.DateTimeFieldType minuteOfDay()" map="F"/>
  <method class="org.joda.time.DateTimeFieldType" name="org.joda.time.DateTimeFieldType hourOfHalfday()" map="G"/>
  <method class="org.joda.time.DateTimeFieldType" name="org.joda.time.DateTimeFieldType access$700()" map="access$700"/>
  <method class="org.joda.time.DateTimeFieldType" name="org.joda.time.DateTimeFieldType access$500()" map="access$500"/>
  <method class="org.joda.time.DateTimeFieldType" name="org.joda.time.DateTimeFieldType clockhourOfHalfday()" map="H"/>
  <method class="org.joda.time.DateTimeFieldType" name="org.joda.time.DateTimeFieldType access$900()" map="access$900"/>
  <method class="org.joda.time.DateTimeFieldType" name="org.joda.time.DateTimeFieldType weekOfWeekyear()" map="I"/>
  <method class="org.joda.time.DateTimeFieldType" name="org.joda.time.DateTimeFieldType millisOfSecond()" map="J"/>
  <method class="org.joda.time.DateTimeFieldType" name="org.joda.time.DateTimeFieldType monthOfYear()" map="K"/>
  <method class="org.joda.time.DateTimeFieldType" name="org.joda.time.DateTimeFieldType yearOfEra()" map="L"/>
  <method class="org.joda.time.DateTimeFieldType" name="org.joda.time.DateTimeFieldType clockhourOfDay()" map="M"/>
  <method class="org.joda.time.DateTimeFieldType" name="org.joda.time.DateTimeFieldType access$2100()" map="access$2100"/>
  <method class="org.joda.time.DateTimeFieldType" name="java.lang.String toString()" map="toString"/>
  <method class="org.joda.time.DateTimeFieldType" name="org.joda.time.DateTimeFieldType weekyear()" map="N"/>
  <method class="org.joda.time.DateTimeFieldType" name="org.joda.time.DateTimeFieldType dayOfMonth()" map="O"/>
  <method class="org.joda.time.DateTimeFieldType" name="org.joda.time.DateTimeFieldType era()" map="P"/>
  <method class="org.joda.time.DateTimeFieldType" name="org.joda.time.DateTimeFieldType access$1300()" map="access$1300"/>
  <method class="org.joda.time.DateTimeFieldType" name="org.joda.time.DateTimeFieldType access$1100()" map="access$1100"/>
  <method class="org.joda.time.DateTimeFieldType" name="java.lang.String getName()" map="Q"/>
  <method class="org.joda.time.DateTimeFieldType" name="org.joda.time.DateTimeFieldType access$1700()" map="access$1700"/>
  <method class="org.joda.time.DateTimeFieldType" name="org.joda.time.DateTimeFieldType access$1500()" map="access$1500"/>
  <method class="org.joda.time.DateTimeFieldType" name="org.joda.time.DateTimeFieldType access$1900()" map="access$1900"/>
  <method class="org.joda.time.DateTimeFieldType" name="org.joda.time.DateTimeFieldType centuryOfEra()" map="R"/>
  <method class="org.joda.time.DateTimeFieldType" name="org.joda.time.DateTimeFieldType access$200()" map="access$200"/>
  <method class="org.joda.time.DateTimeFieldType" name="org.joda.time.DateTimeFieldType minuteOfHour()" map="S"/>
  <method class="org.joda.time.DateTimeFieldType" name="org.joda.time.DateTimeFieldType access$000()" map="access$000"/>
  <method class="org.joda.time.DateTimeFieldType" name="org.joda.time.DurationFieldType getRangeDurationType()" map="T"/>
  <method class="org.joda.time.DateTimeFieldType" name="org.joda.time.DateTimeFieldType access$400()" map="access$400"/>
  <method class="org.joda.time.DateTimeFieldType" name="org.joda.time.DateTimeFieldType dayOfWeek()" map="U"/>
  <method class="org.joda.time.DateTimeFieldType" name="org.joda.time.DateTimeFieldType access$800()" map="access$800"/>
  <method class="org.joda.time.DateTimeFieldType" name="org.joda.time.DateTimeFieldType access$600()" map="access$600"/>
  <method class="org.joda.time.DateTimeFieldType" name="org.joda.time.DateTimeFieldType secondOfDay()" map="V"/>
  <method class="org.joda.time.DateTimeFieldType" name="org.joda.time.DateTimeFieldType secondOfMinute()" map="W"/>
  <method class="org.joda.time.DateTimeFieldType" name="org.joda.time.DateTimeFieldType weekyearOfCentury()" map="X"/>
  <method class="org.joda.time.DateTimeFieldType" name="org.joda.time.DateTimeFieldType millisOfDay()" map="Y"/>
  <method class="org.joda.time.DateTimeFieldType" name="org.joda.time.DateTimeFieldType access$2200()" map="access$2200"/>
  <method class="org.joda.time.DateTimeFieldType" name="org.joda.time.DateTimeFieldType access$2000()" map="access$2000"/>
  <method class="org.joda.time.DateTimeFieldType" name="org.joda.time.DateTimeField getField(org.joda.time.Chronology)" map="B"/>
  <method class="org.joda.time.DateTimeFieldType" name="org.joda.time.DateTimeFieldType hourOfDay()" map="Z"/>
  <class name="org.joda.time.Days" map="p"/>
  <field class="org.joda.time.Days" name="PARSER" map="&#x00ca;"/>
  <field class="org.joda.time.Days" name="MIN_VALUE" map="&#x00cb;"/>
  <field class="org.joda.time.Days" name="ONE" map="&#x00cc;"/>
  <field class="org.joda.time.Days" name="SEVEN" map="&#x00cd;"/>
  <field class="org.joda.time.Days" name="serialVersionUID" map="&#x00ce;"/>
  <field class="org.joda.time.Days" name="ZERO" map="&#x00cf;"/>
  <field class="org.joda.time.Days" name="TWO" map="&#x00d0;"/>
  <field class="org.joda.time.Days" name="FIVE" map="&#x00d1;"/>
  <field class="org.joda.time.Days" name="THREE" map="&#x00d2;"/>
  <field class="org.joda.time.Days" name="FOUR" map="&#x00d3;"/>
  <field class="org.joda.time.Days" name="SIX" map="&#x00d4;"/>
  <field class="org.joda.time.Days" name="MAX_VALUE" map="&#x00d5;"/>
  <method class="org.joda.time.Days" name="org.joda.time.Days daysBetween(org.joda.time.ReadableInstant, org.joda.time.ReadableInstant)" map="H"/>
  <method class="org.joda.time.Days" name="org.joda.time.Days daysIn(org.joda.time.ReadableInterval)" map="I"/>
  <method class="org.joda.time.Days" name="boolean isGreaterThan(org.joda.time.Days)" map="A"/>
  <method class="org.joda.time.Days" name="boolean isLessThan(org.joda.time.Days)" map="B"/>
  <method class="org.joda.time.Days" name="org.joda.time.Days negated()" map="&#x00cb;"/>
  <method class="org.joda.time.Days" name="org.joda.time.Days minus(org.joda.time.Days)" map="C"/>
  <method class="org.joda.time.Days" name="java.lang.String toString()" map="toString"/>
  <method class="org.joda.time.Days" name="org.joda.time.Days multipliedBy(int)" map="&#x00d5;"/>
  <method class="org.joda.time.Days" name="org.joda.time.Days plus(int)" map="&#x00d6;"/>
  <method class="org.joda.time.Days" name="org.joda.time.DurationFieldType getFieldType()" map="e"/>
  <method class="org.joda.time.Days" name="org.joda.time.Days plus(org.joda.time.Days)" map="D"/>
  <method class="org.joda.time.Days" name="org.joda.time.Days days(int)" map="&#x00d8;"/>
  <method class="org.joda.time.Days" name="org.joda.time.PeriodType getPeriodType()" map="C"/>
  <method class="org.joda.time.Days" name="org.joda.time.Hours toStandardHours()" map="&#x00cc;"/>
  <method class="org.joda.time.Days" name="java.lang.Object readResolve()" map="&#x00cd;"/>
  <method class="org.joda.time.Days" name="org.joda.time.Days daysBetween(org.joda.time.ReadablePartial, org.joda.time.ReadablePartial)" map="H"/>
  <method class="org.joda.time.Days" name="org.joda.time.Days minus(int)" map="&#x00d9;"/>
  <method class="org.joda.time.Days" name="org.joda.time.Days parseDays(java.lang.String)" map="H"/>
  <method class="org.joda.time.Days" name="org.joda.time.Days standardDaysIn(org.joda.time.ReadablePeriod)" map="M"/>
  <method class="org.joda.time.Days" name="org.joda.time.Minutes toStandardMinutes()" map="&#x00ce;"/>
  <method class="org.joda.time.Days" name="org.joda.time.Weeks toStandardWeeks()" map="&#x00cf;"/>
  <method class="org.joda.time.Days" name="org.joda.time.Days dividedBy(int)" map="&#x00da;"/>
  <method class="org.joda.time.Days" name="int getDays()" map="&#x00d0;"/>
  <method class="org.joda.time.Days" name="org.joda.time.Seconds toStandardSeconds()" map="&#x00d1;"/>
  <method class="org.joda.time.Days" name="org.joda.time.Duration toStandardDuration()" map="&#x00d2;"/>
  <class name="org.joda.time.Duration" map="q"/>
  <field class="org.joda.time.Duration" name="ZERO" map="C"/>
  <field class="org.joda.time.Duration" name="serialVersionUID" map="D"/>
  <method class="org.joda.time.Duration" name="org.joda.time.Duration standardHours(long)" map="B"/>
  <method class="org.joda.time.Duration" name="org.joda.time.Duration standardMinutes(long)" map="C"/>
  <method class="org.joda.time.Duration" name="org.joda.time.Duration plus(long)" map="D"/>
  <method class="org.joda.time.Duration" name="org.joda.time.Duration withMillis(long)" map="E"/>
  <method class="org.joda.time.Duration" name="org.joda.time.Seconds toStandardSeconds()" map="D"/>
  <method class="org.joda.time.Duration" name="org.joda.time.Duration minus(org.joda.time.ReadableDuration)" map="D"/>
  <method class="org.joda.time.Duration" name="org.joda.time.Duration withDurationAdded(long, int)" map="A"/>
  <method class="org.joda.time.Duration" name="org.joda.time.Duration withDurationAdded(org.joda.time.ReadableDuration, int)" map="A"/>
  <method class="org.joda.time.Duration" name="org.joda.time.Duration minus(long)" map="F"/>
  <method class="org.joda.time.Duration" name="org.joda.time.Duration plus(org.joda.time.ReadableDuration)" map="E"/>
  <method class="org.joda.time.Duration" name="long getStandardSeconds()" map="E"/>
  <method class="org.joda.time.Duration" name="org.joda.time.Duration standardDays(long)" map="G"/>
  <method class="org.joda.time.Duration" name="org.joda.time.Duration toDuration()" map="C"/>
  <method class="org.joda.time.Duration" name="org.joda.time.Duration standardSeconds(long)" map="H"/>
</map>
</yguard>
